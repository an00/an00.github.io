<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>An00</title>
  
  <subtitle>An00 blog</subtitle>
  <link href="https://blog.an00.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.an00.cn/"/>
  <updated>2023-10-29T07:06:12.692Z</updated>
  <id>https://blog.an00.cn/</id>
  
  <author>
    <name>chenzuoqing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 urfave/cli 解析命令行参数</title>
    <link href="https://blog.an00.cn/2022/01/08/%E4%BD%BF%E7%94%A8-urfave-cli-%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/"/>
    <id>https://blog.an00.cn/2022/01/08/%E4%BD%BF%E7%94%A8-urfave-cli-%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</id>
    <published>2022-01-08T08:19:15.000Z</published>
    <updated>2023-10-29T07:06:12.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-urfave-cli-解析命令行参数"><a href="#使用-urfave-cli-解析命令行参数" class="headerlink" title="使用 urfave&#x2F;cli 解析命令行参数"></a>使用 urfave&#x2F;cli 解析命令行参数</h1><p><code>urfave/cli</code> 是一个命令行辅助包，可以设置命令执行的方法。让服务可以根据参数不同，启动不一样的入口，非常方便。</p><span id="more"></span><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/urfave/cli/v2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">app := cli.NewApp()</span><br><span class="line">app.Name = <span class="string">&quot;Cli Test Application&quot;</span></span><br><span class="line">app.Usage = <span class="string">&quot;cli test app usage&quot;</span></span><br><span class="line">app.Version = <span class="string">&quot;1.1.0&quot;</span></span><br><span class="line">app.Flags = []cli.Flag&#123;</span><br><span class="line">&amp;cli.StringFlag&#123;</span><br><span class="line">Name:        <span class="string">&quot;host&quot;</span>,</span><br><span class="line">Value:       <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">Usage:       <span class="string">&quot;host address&quot;</span>,</span><br><span class="line">Destination: &amp;host, <span class="comment">// 参数解析到 host 变量中</span></span><br><span class="line">&#125;,</span><br><span class="line">&amp;cli.Int64Flag&#123;</span><br><span class="line">Name:  <span class="string">&quot;port&quot;</span>,</span><br><span class="line">Value: <span class="number">10202</span>,</span><br><span class="line">Usage: <span class="string">&quot;port number&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行单个命令用 Action</span></span><br><span class="line"><span class="comment">// app.Action = func(c *cli.Context) error &#123;</span></span><br><span class="line"><span class="comment">// fmt.Println(&quot;hello world&quot;)</span></span><br><span class="line"><span class="comment">// fmt.Println(&quot;host=&quot;, host)</span></span><br><span class="line"><span class="comment">// fmt.Println(&quot;port=&quot;, c.Int(&quot;port&quot;)) // 从 cli 中获取 port 参数</span></span><br><span class="line"><span class="comment">// return nil</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个命令，可以指定到 Commands 中</span></span><br><span class="line">app.Commands = []*cli.Command&#123;</span><br><span class="line">&#123;</span><br><span class="line">Name:    <span class="string">&quot;server&quot;</span>,</span><br><span class="line">Aliases: []<span class="type">string</span>&#123;<span class="string">&quot;s&quot;</span>&#125;,</span><br><span class="line">Usage:   <span class="string">&quot;run server&quot;</span>,</span><br><span class="line">Action: <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;run server arg:&quot;</span>, c.Args().First())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">Name:    <span class="string">&quot;agent&quot;</span>,</span><br><span class="line">Aliases: []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>&#125;,</span><br><span class="line">Usage:   <span class="string">&quot;run agent&quot;</span>,</span><br><span class="line">Action: <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;run agent arg:&quot;</span>, c.Args().First())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := app.Run(os.Args); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;error: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单个命令的 Action 测试</span></span><br><span class="line">go run cli.go --host 1.2.3.4 --port 11022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多入口命令测试</span></span><br><span class="line">go run cli.go server start</span><br><span class="line">go run cli.go agent stop</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;使用-urfave-cli-解析命令行参数&quot;&gt;&lt;a href=&quot;#使用-urfave-cli-解析命令行参数&quot; class=&quot;headerlink&quot; title=&quot;使用 urfave&amp;#x2F;cli 解析命令行参数&quot;&gt;&lt;/a&gt;使用 urfave&amp;#x2F;cli 解析命令行参数&lt;/h1&gt;&lt;p&gt;&lt;code&gt;urfave/cli&lt;/code&gt; 是一个命令行辅助包，可以设置命令执行的方法。让服务可以根据参数不同，启动不一样的入口，非常方便。&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://blog.an00.cn/categories/Golang/"/>
    
    
  </entry>
  
  <entry>
    <title>记录 golang 信号处理</title>
    <link href="https://blog.an00.cn/2022/01/08/%E8%AE%B0%E5%BD%95-golang-%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"/>
    <id>https://blog.an00.cn/2022/01/08/%E8%AE%B0%E5%BD%95-golang-%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/</id>
    <published>2022-01-08T07:09:24.000Z</published>
    <updated>2023-10-29T07:07:12.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录-golang-信号处理"><a href="#记录-golang-信号处理" class="headerlink" title="记录 golang 信号处理"></a>记录 golang 信号处理</h1><blockquote><p> 系统信号处理的方式，纯内置的处理。</p></blockquote><p>逻辑是定义一个容量为 1 的 chan 接收系统信号(os.Signal)，触发指定信号时往 chan 接收到值，以此判断做相应的处理。</p><span id="more"></span><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/signal&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> code = <span class="number">1</span></span><br><span class="line"><span class="comment">// 容量是1的channel，接受信号</span></span><br><span class="line"><span class="keyword">var</span> sc = <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 触发这些信号时，通知 sc channel</span></span><br><span class="line">signal.Notify(sc, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他go routine执行操作，这里每秒执行打印时间</span></span><br><span class="line">ticker := time.NewTicker(time.Second * <span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">&lt;-ticker.C</span><br><span class="line">fmt.Printf(<span class="string">&quot;  ++&gt; working time: %v\n&quot;</span>, time.Now().Format(<span class="string">&quot;2006-01-02 15:04:05.000&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 信号接收和相应的处理</span></span><br><span class="line">LOOP:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 没接收到信号时，这里会阻塞</span></span><br><span class="line">sig := &lt;-sc</span><br><span class="line">fmt.Println(<span class="string">&quot;recevived signal:&quot;</span>, sig.String())</span><br><span class="line"><span class="keyword">switch</span> sig &#123;</span><br><span class="line"><span class="keyword">case</span> syscall.SIGTERM, syscall.SIGINT, syscall.SIGQUIT:</span><br><span class="line"><span class="comment">// 收到信号结束的，这里可能还做一些清理操作，退出循环</span></span><br><span class="line">code = <span class="number">0</span></span><br><span class="line"><span class="keyword">break</span> LOOP</span><br><span class="line"><span class="keyword">case</span> syscall.SIGHUP:</span><br><span class="line">fmt.Println(<span class="string">&quot;==&gt; reload config&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// 跳出循环</span></span><br><span class="line"><span class="keyword">break</span> LOOP</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出</span></span><br><span class="line">fmt.Println(<span class="string">&quot;==&gt; server exit&quot;</span>)</span><br><span class="line">os.Exit(code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;记录-golang-信号处理&quot;&gt;&lt;a href=&quot;#记录-golang-信号处理&quot; class=&quot;headerlink&quot; title=&quot;记录 golang 信号处理&quot;&gt;&lt;/a&gt;记录 golang 信号处理&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 系统信号处理的方式，纯内置的处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;逻辑是定义一个容量为 1 的 chan 接收系统信号(os.Signal)，触发指定信号时往 chan 接收到值，以此判断做相应的处理。&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://blog.an00.cn/categories/Golang/"/>
    
    
  </entry>
  
  <entry>
    <title>记录 golang context</title>
    <link href="https://blog.an00.cn/2021/10/16/%E8%AE%B0%E5%BD%95-golang-context/"/>
    <id>https://blog.an00.cn/2021/10/16/%E8%AE%B0%E5%BD%95-golang-context/</id>
    <published>2021-10-16T08:12:47.000Z</published>
    <updated>2023-10-29T07:07:07.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录-golang-context"><a href="#记录-golang-context" class="headerlink" title="记录 golang context"></a>记录 golang context</h1><p>有四种</p><ul><li><code>context.WithCancel</code><ul><li>可取消的context</li></ul></li><li><code>context.WithDeadline</code><ul><li>在某时间结束的context</li></ul></li><li><code>context.WithTimeout(context.Background(), 2 * time.Second)</code><ul><li>设置超时的context，也返回 <code>ctx</code> 和 <code>cancel</code>，可以等待自动超时，也可以提前执行<code>cancel</code>，<code>ctx.Done</code>都可以接收到值</li></ul></li><li><code>context.WithValue</code><ul><li>值</li></ul></li></ul><span id="more"></span><h2 id="WithCancel示例"><a href="#WithCancel示例" class="headerlink" title="WithCancel示例"></a>WithCancel示例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cpuInfo</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再生成子context，给memoryInfo，不接收cancel方法，当父context被cancel时也能接受到ctx.Done消息</span></span><br><span class="line">ctx2, _ := context.WithCancel(ctx)</span><br><span class="line"><span class="keyword">go</span> memoryInfo(ctx2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">fmt.Println(<span class="string">&quot;==&gt; 退出CPU监控&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;获取CPU信息&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">memoryInfo</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">fmt.Println(<span class="string">&quot;==&gt; 退出内存监控&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;获取内存信息&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 主goroutine生成父ctx，默认用Background生成父context</span></span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> cpuInfo(ctx)</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父context，调用cancel时，同时会调用基于此context创建的子context的cancel方法</span></span><br><span class="line"><span class="comment">// 这里的效果也就是一起退出</span></span><br><span class="line">cancel()</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">获取内存信息</span><br><span class="line">获取CPU信息</span><br><span class="line">获取CPU信息</span><br><span class="line">获取内存信息</span><br><span class="line">获取内存信息</span><br><span class="line">获取CPU信息</span><br><span class="line">获取CPU信息</span><br><span class="line">获取内存信息</span><br><span class="line">获取CPU信息</span><br><span class="line">==&gt; 退出CPU监控</span><br><span class="line">获取内存信息</span><br><span class="line">==&gt; 退出内存监控</span><br></pre></td></tr></table></figure><h2 id="WithTimeout示例"><a href="#WithTimeout示例" class="headerlink" title="WithTimeout示例"></a>WithTimeout示例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cpuInfo</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">fmt.Println(<span class="string">&quot;==&gt; 退出CPU监控&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;获取CPU信息&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 主goroutine生成父ctx，默认用Background生成父context</span></span><br><span class="line"><span class="comment">// 也返回cancel，不调用不接收</span></span><br><span class="line">ctx, _ := context.WithTimeout(context.Background(), time.Second*<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> cpuInfo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// timeout context的cancel只能在未超时前执行</span></span><br><span class="line"><span class="comment">//cancel()</span></span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取CPU信息</span><br><span class="line">获取CPU信息</span><br><span class="line">获取CPU信息</span><br><span class="line">==&gt; 退出CPU监控</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;记录-golang-context&quot;&gt;&lt;a href=&quot;#记录-golang-context&quot; class=&quot;headerlink&quot; title=&quot;记录 golang context&quot;&gt;&lt;/a&gt;记录 golang context&lt;/h1&gt;&lt;p&gt;有四种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;context.WithCancel&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;可取消的context&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context.WithDeadline&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;在某时间结束的context&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context.WithTimeout(context.Background(), 2 * time.Second)&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;设置超时的context，也返回 &lt;code&gt;ctx&lt;/code&gt; 和 &lt;code&gt;cancel&lt;/code&gt;，可以等待自动超时，也可以提前执行&lt;code&gt;cancel&lt;/code&gt;，&lt;code&gt;ctx.Done&lt;/code&gt;都可以接收到值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context.WithValue&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://blog.an00.cn/categories/Golang/"/>
    
    
  </entry>
  
  <entry>
    <title>验证 X.509 证书有效性</title>
    <link href="https://blog.an00.cn/2021/08/05/%E9%AA%8C%E8%AF%81-X-509-%E8%AF%81%E4%B9%A6%E6%9C%89%E6%95%88%E6%80%A7/"/>
    <id>https://blog.an00.cn/2021/08/05/%E9%AA%8C%E8%AF%81-X-509-%E8%AF%81%E4%B9%A6%E6%9C%89%E6%95%88%E6%80%A7/</id>
    <published>2021-08-05T07:59:14.000Z</published>
    <updated>2023-10-29T07:03:34.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="验证-X-509-证书的有效性"><a href="#验证-X-509-证书的有效性" class="headerlink" title="验证 X.509 证书的有效性"></a>验证 X.509 证书的有效性</h1><p>X.509 是公钥证书的格式标准，非常常见。但是证书可以自签、被撤销，就需要验证 CA 证书是否有效，下面以 python 为例。</p><p>检查 CA 的有效性，从 OCSP（在线证书状态协议）可以得到证书是否被签发方回收</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cryptography <span class="keyword">import</span> x509</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> serialization</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.hashes <span class="keyword">import</span> SHA256</span><br><span class="line"><span class="keyword">from</span> cryptography.x509 <span class="keyword">import</span> ocsp</span><br><span class="line"><span class="keyword">from</span> cryptography.x509.ocsp <span class="keyword">import</span> OCSPResponseStatus</span><br><span class="line"><span class="keyword">from</span> cryptography.x509.oid <span class="keyword">import</span> ExtensionOID, AuthorityInformationAccessOID</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cert_for_hostname</span>(<span class="params">hostname, port=<span class="number">443</span></span>):</span><br><span class="line">    conn = ssl.create_connection((hostname, port))</span><br><span class="line">    context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)</span><br><span class="line">    sock = context.wrap_socket(conn, server_hostname=hostname)</span><br><span class="line">    certDER = sock.getpeercert(<span class="literal">True</span>)</span><br><span class="line">    certPEM = ssl.DER_cert_to_PEM_cert(certDER)</span><br><span class="line">    <span class="keyword">return</span> x509.load_pem_x509_certificate(certPEM.encode(<span class="string">&#x27;ascii&#x27;</span>), default_backend())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_issuer</span>(<span class="params">cert</span>):</span><br><span class="line">    aia = cert.extensions.get_extension_for_oid(ExtensionOID.AUTHORITY_INFORMATION_ACCESS).value</span><br><span class="line">    issuers = [ia <span class="keyword">for</span> ia <span class="keyword">in</span> aia <span class="keyword">if</span> ia.access_method == AuthorityInformationAccessOID.CA_ISSUERS]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> issuers:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">f&#x27;no issuers entry in AIA&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> issuers[<span class="number">0</span>].access_location.value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ocsp_server</span>(<span class="params">cert</span>):</span><br><span class="line">    aia = cert.extensions.get_extension_for_oid(ExtensionOID.AUTHORITY_INFORMATION_ACCESS).value</span><br><span class="line">    ocsps = [ia <span class="keyword">for</span> ia <span class="keyword">in</span> aia <span class="keyword">if</span> ia.access_method == AuthorityInformationAccessOID.OCSP]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ocsps:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">f&#x27;no ocsp server entry in AIA&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> ocsps[<span class="number">0</span>].access_location.value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_issuer_cert</span>(<span class="params">ca_issuer</span>):</span><br><span class="line">    issuer_response = requests.get(ca_issuer)</span><br><span class="line">    <span class="keyword">if</span> issuer_response.ok:</span><br><span class="line">        issuerDER = issuer_response.content</span><br><span class="line">        issuerPEM = ssl.DER_cert_to_PEM_cert(issuerDER)</span><br><span class="line">        <span class="keyword">return</span> x509.load_pem_x509_certificate(issuerPEM.encode(<span class="string">&#x27;ascii&#x27;</span>), default_backend())</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">f&#x27;fetching issuer cert  failed with response status: <span class="subst">&#123;issuer_response.status_code&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_oscp_request</span>(<span class="params">ocsp_server, cert, issuer_cert</span>):</span><br><span class="line">    builder = ocsp.OCSPRequestBuilder()</span><br><span class="line">    builder = builder.add_certificate(cert, issuer_cert, SHA256())</span><br><span class="line">    req = builder.build()</span><br><span class="line">    req_path = base64.b64encode(req.public_bytes(serialization.Encoding.DER))</span><br><span class="line">    <span class="keyword">return</span> urljoin(ocsp_server + <span class="string">&#x27;/&#x27;</span>, req_path.decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ocsp_cert_status</span>(<span class="params">ocsp_server, cert, issuer_cert</span>):</span><br><span class="line">    ocsp_resp = requests.get(get_oscp_request(ocsp_server, cert, issuer_cert))</span><br><span class="line">    <span class="keyword">if</span> ocsp_resp.ok:</span><br><span class="line">        ocsp_decoded = ocsp.load_der_ocsp_response(ocsp_resp.content)</span><br><span class="line">        <span class="keyword">if</span> ocsp_decoded.response_status == OCSPResponseStatus.SUCCESSFUL:</span><br><span class="line">            <span class="keyword">return</span> ocsp_decoded.certificate_status</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">f&#x27;decoding ocsp response failed: <span class="subst">&#123;ocsp_decoded.response_status&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">f&#x27;fetching ocsp cert status failed with response status: <span class="subst">&#123;ocsp_resp.status_code&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cert_status_for_host</span>(<span class="params">hostname, port=<span class="number">443</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;   hostname:&#x27;</span>, hostname, <span class="string">&quot;port:&quot;</span>, port)</span><br><span class="line">    cert = get_cert_for_hostname(hostname, port)</span><br><span class="line">    ca_issuer = get_issuer(cert)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;   issuer -&gt;&#x27;</span>, ca_issuer)</span><br><span class="line">    issuer_cert = get_issuer_cert(ca_issuer)</span><br><span class="line">    ocsp_server = get_ocsp_server(cert)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;   ocsp_server -&gt;&#x27;</span>, ocsp_server)</span><br><span class="line">    <span class="keyword">return</span> get_ocsp_cert_status(ocsp_server, cert, issuer_cert)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># CA证书处于有效期间</span></span><br><span class="line">    <span class="comment"># host = &quot;blog.an00.cn&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 已回收的例子</span></span><br><span class="line">    host = <span class="string">&quot;revoked.badssl.com&quot;</span></span><br><span class="line">    status = get_cert_status_for_host(host)</span><br><span class="line">    <span class="built_in">print</span>(host, status)</span><br></pre></td></tr></table></figure><p>检查结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   hostname: blog.an00.cn port: 443</span><br><span class="line">   issuer -&gt; http://cacerts.digitalcertvalidation.com/TrustAsiaTLSRSACA.crt</span><br><span class="line">   ocsp_server -&gt; http://statuse.digitalcertvalidation.com</span><br><span class="line">blog.an00.cn OCSPCertStatus.GOOD</span><br><span class="line">===========================================</span><br><span class="line">   hostname: revoked.badssl.com port: 443</span><br><span class="line">   issuer -&gt; http://cacerts.digicert.com/RapidSSLTLSDVRSAMixedSHA2562020CA-1.crt</span><br><span class="line">   ocsp_server -&gt; http://ocsp.digicert.com</span><br><span class="line">revoked.badssl.com OCSPCertStatus.REVOKED</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;验证-X-509-证书的有效性&quot;&gt;&lt;a href=&quot;#验证-X-509-证书的有效性&quot; class=&quot;headerlink&quot; title=&quot;验证 X.509 证书的有效性&quot;&gt;&lt;/a&gt;验证 X.509 证书的有效性&lt;/h1&gt;&lt;p&gt;X.509 是公钥证书的格式标准，非常常见。但是证书可以自签、被撤销，就需要验证 CA 证书是否有效，下面以 python 为例。&lt;/p&gt;
&lt;p&gt;检查 CA 的有效性，从 OCSP（在线证书状态协议）可以得到证书是否被签发方回收&lt;/p&gt;</summary>
    
    
    
    <category term="CA" scheme="https://blog.an00.cn/categories/CA/"/>
    
    
    <category term="X.509" scheme="https://blog.an00.cn/tags/X-509/"/>
    
  </entry>
  
  <entry>
    <title>python 与 openssl 对应的 AES-CBC</title>
    <link href="https://blog.an00.cn/2021/04/05/python-%E4%B8%8E-openssl-%E5%AF%B9%E5%BA%94%E7%9A%84-AES-CBC/"/>
    <id>https://blog.an00.cn/2021/04/05/python-%E4%B8%8E-openssl-%E5%AF%B9%E5%BA%94%E7%9A%84-AES-CBC/</id>
    <published>2021-04-05T02:34:39.000Z</published>
    <updated>2023-10-29T07:05:25.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-实现与-openssl-对应的-AES-CBC"><a href="#python-实现与-openssl-对应的-AES-CBC" class="headerlink" title="python 实现与 openssl 对应的 AES-CBC"></a>python 实现与 openssl 对应的 AES-CBC</h1><blockquote><p>可对应 <code>openssl</code> 的 AES-CBC 加密，<a class="link"   href="https://stackoverflow.com/questions/16761458/how-to-decrypt-openssl-aes-encrypted-files-in-python" >参考来源<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>奇怪的需求又增加了，项目大量使用的 shell 脚本，有需求加密某内容，让脚本解密后使用。一番尝试后，发现 python 中的 AES 还与操作系统中 openssl 工具加解密不对应。又一番面向 Stack Overflow 编程后，调试出了合适的 demo，以下是处理内容。</p><p>需要注意的是这种方式不够安全！！！</p><p>先安装加密库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pycryptodome</span><br></pre></td></tr></table></figure><span id="more"></span><p> 对应的 AES-CBC 加密类封装，使用了内存中的 BytesIO，所以别加密太大的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;pip3 install pycryptodome&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AESCipher</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    NOTE 这种方法现在已经不是很安全，只是为了与 `openssl` 命令相兼容，方便脚本解密</span></span><br><span class="line"><span class="string">    使用内存 BytesIO 写入加密、解密内容，模拟文件进行加密、解密，主要用到 AES-CBC 算法，加 salt</span></span><br><span class="line"><span class="string">    参考: https://stackoverflow.com/questions/16761458/how-to-decrypt-openssl-aes-encrypted-files-in-python</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    block_size = AES.block_size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, content, password, salt_header=<span class="string">&#x27;Salted__&#x27;</span>, key_length=<span class="number">32</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        注意: 若需要支持 `openssl` 命令，必须指定 salt_header=&#x27;Salted__&#x27;</span></span><br><span class="line"><span class="string">        如果只是 python 内部使用 salt_header 可以为空</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.content = content</span><br><span class="line">        self.password = password</span><br><span class="line">        self.salt_header = salt_header</span><br><span class="line">        self.key_length = key_length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">derive_key_and_iv</span>(<span class="params">self, salt</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算得到 `key` 和 `iv` &quot;&quot;&quot;</span></span><br><span class="line">        d = d_i = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(d) &lt; self.key_length + self.block_size:</span><br><span class="line">            d_i = md5(d_i + <span class="built_in">str</span>.encode(self.password) + salt).digest()</span><br><span class="line">            d += d_i</span><br><span class="line">        <span class="keyword">return</span> d[:self.key_length], d[self.key_length:self.key_length + self.block_size]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        返回的是加密后的 `base64` 二进制字符串，bytes</span></span><br><span class="line"><span class="string">        对应 `openssl` 命令解法：</span></span><br><span class="line"><span class="string">            从文件：openssl aes-256-cbc -salt -in secret.txt -d -a -k &#x27;password&#x27;</span></span><br><span class="line"><span class="string">            从输入：echo &quot;U2FsdGVkX1/5sFe6z6+H4CfQvnTZgCEV4yget0PI8XM=&quot; | openssl aes-256-cbc -salt -d -a -k &#x27;password&#x27;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        content = self.content.encode() <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(self.content, <span class="built_in">bytes</span>) <span class="keyword">else</span> self.content</span><br><span class="line">        <span class="comment"># 字节IO模拟文件</span></span><br><span class="line">        in_file = io.BytesIO(content)</span><br><span class="line">        out_file = io.BytesIO()</span><br><span class="line">        salt = urandom(self.block_size - <span class="built_in">len</span>(self.salt_header))</span><br><span class="line">        key, iv = self.derive_key_and_iv(salt)</span><br><span class="line">        cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">        out_file.write(<span class="built_in">str</span>.encode(self.salt_header) + salt)</span><br><span class="line">        finished = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> finished:</span><br><span class="line">            chunk = in_file.read(<span class="number">1024</span> * self.block_size)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(chunk) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(chunk) % self.block_size != <span class="number">0</span>:</span><br><span class="line">                padding_length = (self.block_size - <span class="built_in">len</span>(chunk) % self.block_size) <span class="keyword">or</span> self.block_size</span><br><span class="line">                chunk += <span class="built_in">str</span>.encode(</span><br><span class="line">                    padding_length * <span class="built_in">chr</span>(padding_length))</span><br><span class="line">                finished = <span class="literal">True</span></span><br><span class="line">            out_file.write(cipher.encrypt(chunk))</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(out_file.getvalue())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, content=<span class="literal">None</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        密文 content 可以传入，使用实例对象的密码，返回解密后的明文 bytes</span></span><br><span class="line"><span class="string">        错误的密码、salt_header、key_size解密将报错</span></span><br><span class="line"><span class="string">        openssl 加密命令</span></span><br><span class="line"><span class="string">            从文件：openssl aes-256-cbc -salt -in text.txt -a -k &#x27;password&#x27;</span></span><br><span class="line"><span class="string">            从输入：echo &quot;abc&quot; | openssl aes-256-cbc -salt -a -k &#x27;password&#x27;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        content = content <span class="keyword">if</span> content <span class="keyword">else</span> self.content</span><br><span class="line">        content = content.encode() <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(content, <span class="built_in">bytes</span>) <span class="keyword">else</span> content</span><br><span class="line">        text = base64.b64decode(content)</span><br><span class="line">        <span class="comment"># 字节IO模拟文件</span></span><br><span class="line">        in_file = io.BytesIO(text)</span><br><span class="line">        out_file = io.BytesIO()</span><br><span class="line">        salt = in_file.read(self.block_size)[<span class="built_in">len</span>(self.salt_header):]</span><br><span class="line">        key, iv = self.derive_key_and_iv(salt)</span><br><span class="line">        cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">        next_chunk = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        finished = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> finished:</span><br><span class="line">            chunk, next_chunk = next_chunk, cipher.decrypt(in_file.read(<span class="number">1024</span> * self.block_size))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(next_chunk) == <span class="number">0</span>:</span><br><span class="line">                padding_length = chunk[-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> padding_length &lt; <span class="number">1</span> <span class="keyword">or</span> padding_length &gt; self.block_size:</span><br><span class="line">                    <span class="comment"># 触发此错误原因可能是密码错误</span></span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">&quot;bad decrypt pad (%d)&quot;</span> % padding_length)</span><br><span class="line">                chunk = chunk[:-padding_length]</span><br><span class="line">                finished = <span class="literal">True</span></span><br><span class="line">            out_file.write(chunk)</span><br><span class="line">        <span class="comment"># 若为空可能是密码错误了，或者触发上面的异常</span></span><br><span class="line">        <span class="keyword">return</span> out_file.getvalue()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;++++++++++++++++++++++++++++++++++++++++++&quot;</span>)</span><br><span class="line">    aes = AESCipher(<span class="string">&quot;hello world2223&quot;</span>, <span class="string">&#x27;111111&#x27;</span>)</span><br><span class="line">    secret = aes.encrypt()</span><br><span class="line">    raw = aes.decrypt(secret)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;密文:&quot;</span>, secret)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;明文:&quot;</span>, raw)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;++++++++++++++++++++++++++++++++++++++++++&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 错误的密码解密将报错</span></span><br><span class="line">        aes2 = AESCipher(<span class="string">&quot;&quot;</span>, <span class="string">&#x27;222&#x27;</span>, salt_header=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        res = aes2.decrypt(secret)</span><br><span class="line">        <span class="built_in">print</span>(res)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;密码错了！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;python-实现与-openssl-对应的-AES-CBC&quot;&gt;&lt;a href=&quot;#python-实现与-openssl-对应的-AES-CBC&quot; class=&quot;headerlink&quot; title=&quot;python 实现与 openssl 对应的 AES-CBC&quot;&gt;&lt;/a&gt;python 实现与 openssl 对应的 AES-CBC&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;可对应 &lt;code&gt;openssl&lt;/code&gt; 的 AES-CBC 加密，&lt;a class=&quot;link&quot;   href=&quot;https://stackoverflow.com/questions/16761458/how-to-decrypt-openssl-aes-encrypted-files-in-python&quot; &gt;参考来源&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;奇怪的需求又增加了，项目大量使用的 shell 脚本，有需求加密某内容，让脚本解密后使用。一番尝试后，发现 python 中的 AES 还与操作系统中 openssl 工具加解密不对应。又一番面向 Stack Overflow 编程后，调试出了合适的 demo，以下是处理内容。&lt;/p&gt;
&lt;p&gt;需要注意的是这种方式不够安全！！！&lt;/p&gt;
&lt;p&gt;先安装加密库：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip3 install pycryptodome&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.an00.cn/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>记录 DRF 学习片段</title>
    <link href="https://blog.an00.cn/2020/12/18/%E8%AE%B0%E5%BD%95-DRF-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://blog.an00.cn/2020/12/18/%E8%AE%B0%E5%BD%95-DRF-%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-12-18T08:53:03.000Z</published>
    <updated>2023-10-29T07:06:59.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录-DRF-学习片段"><a href="#记录-DRF-学习片段" class="headerlink" title="记录 DRF 学习片段"></a>记录 DRF 学习片段</h1><p>刷官方 tutorial 的记录，官网地址 <a class="link"   href="https://www.django-rest-framework.org/tutorial/quickstart/" >django-rest-framework<i class="fas fa-external-link-alt"></i></a></p><span id="more"></span><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><blockquote><p>代码不是全部都贴出，仅做记录（不难看懂）</p><p>参考 <a class="link"   href="https://q1mi.github.io/Django-REST-framework-documentation/" >q1mi老师翻译的文档<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>示例 <code>models.py</code> 中的 <code>Snippet</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_all_lexers</span><br><span class="line"><span class="keyword">from</span> pygments.styles <span class="keyword">import</span> get_all_styles</span><br><span class="line"></span><br><span class="line">LEXERS = [item <span class="keyword">for</span> item <span class="keyword">in</span> get_all_lexers() <span class="keyword">if</span> item[<span class="number">1</span>]]</span><br><span class="line">LANGUAGE_CHOICES = <span class="built_in">sorted</span>([(item[<span class="number">1</span>][<span class="number">0</span>], item[<span class="number">0</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> LEXERS])</span><br><span class="line">STYLE_CHOICES = <span class="built_in">sorted</span>((item, item) <span class="keyword">for</span> item <span class="keyword">in</span> get_all_styles())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Snippet</span>(models.Model):</span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>, blank=<span class="literal">True</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    code = models.TextField()</span><br><span class="line">    linenos = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    language = models.CharField(choices=LANGUAGE_CHOICES, default=<span class="string">&#x27;python&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    style = models.CharField(choices=STYLE_CHOICES, default=<span class="string">&#x27;friendly&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        ordering = (<span class="string">&#x27;created&#x27;</span>,)</span><br></pre></td></tr></table></figure><p>示例的序列化类 <code>serializers.py</code> 定义，写法的进化过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet, LANGUAGE_CHOICES, STYLE_CHOICES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手写版本</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetSerializer</span>(serializers.Serializer):</span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(read_only=<span class="literal">True</span>)</span><br><span class="line">    title = serializers.CharField(required=<span class="literal">False</span>, allow_blank=<span class="literal">True</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    code = serializers.CharField(style=&#123;<span class="string">&#x27;base_template&#x27;</span>: <span class="string">&#x27;textarea.html&#x27;</span>&#125;)</span><br><span class="line">    linenos = serializers.BooleanField(required=<span class="literal">False</span>)</span><br><span class="line">    language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">    style = serializers.ChoiceField(choices=STYLE_CHOICES, default=<span class="string">&#x27;friendly&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据提供的验证过的数据创建并返回一个新的`Snippet`实例。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Snippet.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据提供的验证过的数据更新和返回一个已经存在的`Snippet`实例。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        instance.title = validated_data.get(<span class="string">&#x27;title&#x27;</span>, instance.title)</span><br><span class="line">        instance.code = validated_data.get(<span class="string">&#x27;code&#x27;</span>, instance.code)</span><br><span class="line">        instance.linenos = validated_data.get(<span class="string">&#x27;linenos&#x27;</span>, instance.linenos)</span><br><span class="line">        instance.language = validated_data.get(<span class="string">&#x27;language&#x27;</span>, instance.language)</span><br><span class="line">        instance.style = validated_data.get(<span class="string">&#x27;style&#x27;</span>, instance.style)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用封装的序列化器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Snippet</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;linenos&#x27;</span>, <span class="string">&#x27;language&#x27;</span>, <span class="string">&#x27;style&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><p>基础的序列化过程，<code>Snippet</code> 是个表 model，以及它的序列化类 <code>SnippetSerializer</code>，先忽略他们定义的内容，看序列化做的事情</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> JSONRenderer</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser</span><br><span class="line"></span><br><span class="line">snippet = Snippet(code=<span class="string">&#x27;foo = &quot;bar&quot;\n&#x27;</span>)</span><br><span class="line">snippet.save()</span><br><span class="line"></span><br><span class="line">snippet = Snippet(code=<span class="string">&#x27;print &quot;hello, world&quot;\n&#x27;</span>)</span><br><span class="line">snippet.save()</span><br><span class="line"></span><br><span class="line">serializer = SnippetSerializer(snippet)  <span class="comment"># 将model对象转成python原生数据类型</span></span><br><span class="line"><span class="built_in">print</span>(serializer.data)  <span class="comment"># 字典数据，&#123;&#x27;id&#x27;: 1, ...&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SnippetSerializer(Snippet.objects.all(), many=True)  # 不是单个对象而是querySet时，传many=True，可以序列化多个</span></span><br><span class="line"></span><br><span class="line">content = JSONRenderer().render(serializer.data)  <span class="comment"># 将数据转成JSON</span></span><br><span class="line"><span class="built_in">print</span>(content)  <span class="comment"># b&#x27;&#123;&quot;id&quot;: 2, ...&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>反序列化过程，类似 forms 验证，接上以上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">stream = io.BytesIO(content)</span><br><span class="line">data = JSONParser().parse(stream)          <span class="comment"># 接受JSON数据，模拟从请求中读取的数据</span></span><br><span class="line">serializer = SnippetSerializer(data=data)  <span class="comment"># 传入反序列化的数据</span></span><br><span class="line">serializer.is_valid()      <span class="comment"># 校验数据是否缺少</span></span><br><span class="line">serializer.validated_data  <span class="comment"># 校验字段内容</span></span><br><span class="line">serializer.save()          <span class="comment"># 保存对象</span></span><br></pre></td></tr></table></figure><h2 id="序列化类"><a href="#序列化类" class="headerlink" title="序列化类"></a>序列化类</h2><p>介绍 <code>rest_framework.serializers</code> 中创建序列化器的快捷方式</p><h3 id="ModelSerializer"><a href="#ModelSerializer" class="headerlink" title="ModelSerializer"></a>ModelSerializer</h3><p>类似 django forms 中的 <code>ModelForm</code></p><ul><li>可简单定义需要序列化的字段</li><li>默认实现的 <code>create</code> 和 <code>update</code> 方法，用于增加和更新</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Snippet</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;linenos&#x27;</span>, <span class="string">&#x27;language&#x27;</span>, <span class="string">&#x27;style&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="HyperlinkedModelSerializer"><a href="#HyperlinkedModelSerializer" class="headerlink" title="HyperlinkedModelSerializer"></a>HyperlinkedModelSerializer</h3><blockquote><p>可以更好的处理对象实体之间的关系</p></blockquote><p>这个序列化器在有关联字段的时候，展示的不是 ID，而是相关对象的 URL，与 <code>ModelSerializer</code> 有区别</p><ul><li>默认不包括 ID 字段</li><li>数据含一个<code>url</code>字段，使用<code>HyperlinkedIdentityField</code></li><li>使用的关联使用 <code>HyperlinkedRelatedField</code> 而不是 <code>PrimaryKeyRelatedField</code> (它会把关联的对象仅给出 ID 返回)</li></ul><h3 id="PrimaryKeyRelatedField"><a href="#PrimaryKeyRelatedField" class="headerlink" title="PrimaryKeyRelatedField"></a>PrimaryKeyRelatedField</h3><p>得到此对象对应的多个关联对象ID，如解析 <code>User</code> 实例的 <code>Snippet</code> 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    snippets = serializers.PrimaryKeyRelatedField(many=<span class="literal">True</span>, queryset=Snippet.objects.<span class="built_in">all</span>())</span><br><span class="line">    <span class="comment"># 返回如: &#123;&quot;id&quot;:1, &quot;snippets&quot;: [1,2,3], ...&#125;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;snippets&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="HyperlinkedRelatedField"><a href="#HyperlinkedRelatedField" class="headerlink" title="HyperlinkedRelatedField"></a>HyperlinkedRelatedField</h3><p>得到此对象对应的多个关联对象实体 URL（需要传入 <code>view_name</code> ）</p><p>如下，解析 <code>User</code> 实例的 <code>Snippet</code> 对象，<code>snippet-detail</code> 对应 <code>urls.py</code> 中的 <code>name</code> 参数（参考后面<strong>关系和超链接</strong>部分）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserSerializer</span>(serializers.HyperlinkedModelSerializer):</span><br><span class="line">    snippets = serializers.HyperlinkedRelatedField(many=<span class="literal">True</span>, view_name=<span class="string">&#x27;snippet-detail&#x27;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 返回如: &#123;&quot;id&quot;:1, &quot;snippets&quot;: [&quot;http://127.0.0.1:8000/snippets/1/&quot;, ...], ...&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;snippets&#x27;</span>, <span class="string">&#x27;url&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><h3 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.POST  <span class="comment"># 只试用与POST方法</span></span><br><span class="line">request.data  <span class="comment"># 处理任意数据  适用于&#x27;POST&#x27;，&#x27;PUT&#x27;和&#x27;PATCH&#x27;方法</span></span><br></pre></td></tr></table></figure><h3 id="响应对象"><a href="#响应对象" class="headerlink" title="响应对象"></a>响应对象</h3><p>继承了 django 中的 <code>SimpleTemplateResponse</code> ，但未渲染模板，会使用内容协商来确定返回给客户端的正确内容类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from rest_framework.response import Response</span></span><br><span class="line"><span class="keyword">return</span> Response(data)</span><br></pre></td></tr></table></figure><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>命名了 HTTP 状态码，便于使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># from rest_framework import status</span><br><span class="line">return Response(data, status=status.HTTP_201_CREATED)</span><br></pre></td></tr></table></figure><h3 id="API-视图包装器"><a href="#API-视图包装器" class="headerlink" title="API 视图包装器"></a>API 视图包装器</h3><p>均可限制访问接口的方法，否则抛出 <code>405 Method Not Allowed</code> 错误</p><ul><li>APIView 供类视图继承，与 django 的类视图相似，路由中传入 <code>as_view</code>，并内置dispatch方法，若请求方法未实现将抛出 <code>405</code></li><li>api_view 给函数视图使用的装饰器，默认仅允许 GET 请求，可传入 method 列表</li><li>action 给视图集增加动作，如一个 <code>viewSet</code> 默认可能有<code>detail</code>、<code>list</code> 等方法，若它注册路由时设置 <code>basename=snippets</code> 将自动生成可解析的 <code>snippets-detail</code> 等动作。action可以增加自定义的动作，如下有增加 <code>snippets-highlight</code> 的示例，默认后缀为被装饰的方法名（viewSet 路由注册部分看 <strong>viewsets 视图集和 routers</strong>）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view, action</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_func_demo</span>(<span class="params">request</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Snippet的常规增删查改、列表视图</span></span><br><span class="line"><span class="string">    还提供了一个额外的`highlight`操作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = (permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注意action装饰的方法替代了上面的SnippetHighlight</span></span><br><span class="line">    <span class="comment"># 默认仅允许GET方法，methods指定</span></span><br><span class="line">    <span class="comment"># detail表示是否适用于实例详细信息，需要实例参数pk=1这种情况</span></span><br><span class="line">    <span class="comment"># 使用Router且basename=snippet时，此动作解析为&#x27;snippet-highlight&#x27;，与序列化中的view_name对应</span></span><br><span class="line"><span class="meta">    @action(<span class="params">renderer_classes=[renderers.StaticHTMLRenderer], detail=<span class="literal">True</span>, methods=[<span class="string">&#x27;get&#x27;</span>]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">highlight</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        snippet = self.get_object()</span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save(owner=self.request.user)</span><br></pre></td></tr></table></figure><h2 id="类视图"><a href="#类视图" class="headerlink" title="类视图"></a>类视图</h2><h3 id="mixins-混合类"><a href="#mixins-混合类" class="headerlink" title="mixins 混合类"></a>mixins 混合类</h3><p>在 <code>rest_framework.mixins</code> 中，定义了很多可服用的行为，对应我们接口处理 model 的查询、修改、序列化、反序列化、保存等操作，它们需要和 <code>generics.GenericAPIView</code> 一起继承，搭配使用</p><ul><li><code>CreateModelMixin</code> 用于创建对象，封装了 <code>create</code> ，调用序列化类校验数据、保存等操作</li><li><code>ListModelMixin</code> 用于列出多个对象，封装了 <code>list</code> 方法，从 model 中查询数据，并序列化成数据、分页返回给请求</li><li><code>RetrieveModelMixin</code>  用于查找单个对象示例，封装了 <code>retrieve</code> 方法，返回单个对象已序列化的数据</li><li><code>UpdateModelMixin</code> 用于更新数据，封装了 <code>update</code> 方法，更新单个对象的数据</li><li><code>DestroyModelMixin</code>  用于删除对象，封装了 <code>destroy</code> 方法，查找对象实例进行删除</li></ul><p>继承了上面多个类将有多个类的功能，如下将 mixin 中的封装对应 HTTP 方法的处理函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetList</span>(mixins.ListModelMixin,</span><br><span class="line">                  mixins.CreateModelMixin,</span><br><span class="line">                  generics.GenericAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span>(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="generics-通用类"><a href="#generics-通用类" class="headerlink" title="generics 通用类"></a>generics 通用类</h3><p>在 <code>rest_framework.generics</code> 中有已经内置混合好的通用视图，用它可以将HTTP方法与 Mixin 封装对应上。</p><ul><li><code>GenericAPIView</code> 是通用视图中最基础的类，继承 <code>views.APIView</code>，带有序列化、分页、对象过滤等封装</li></ul><p>使用通用类视图写接口，代码量将变的很少，逻辑就像配置一样，设置 <code>queryset</code> 和<strong>序列化类</strong>就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetList</span>(generics.ListCreateAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(generics.RetrieveUpdateDestroyAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br></pre></td></tr></table></figure><p>基于上面两个视图，修改 <code>urls.py</code>，增加 URL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 方便调试接口，需要注意namespace</span></span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>, namespace=<span class="string">&#x27;rest_framework&#x27;</span>)),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注意path的传参，参数名为pk，类型int</span></span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view()),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.SnippetDetail.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>运行测试（创建用户访问 <a class="link"   href="http://localhost:8000/api-auth/login" >http://localhost:8000/api-auth/login<i class="fas fa-external-link-alt"></i></a> 再打开 &#x2F;snippets&#x2F; 页面）</p><ul><li><p>&#x2F;snippets&#x2F; 列表数据</p><p><img                       lazyload                     alt="image"                     data-src="https://raw.githubusercontent.com/an00/files/master/img/image-20210202152358734.png"                      alt="image-20210202152358734"                ></p></li><li><p>&#x2F;snippets&#x2F;1&#x2F; 可以查看id&#x3D;1的对象，还显示了其他可操作的方法</p><p><img                       lazyload                     alt="image"                     data-src="https://raw.githubusercontent.com/an00/files/master/img/image-20210202152657768.png"                      alt="image-20210202152657768"                ></p></li></ul><h3 id="viewsets-视图集和-routers"><a href="#viewsets-视图集和-routers" class="headerlink" title="viewsets 视图集和 routers"></a>viewsets 视图集和 routers</h3><blockquote><p>应该是最常用的方式，包括这种方式的路由</p></blockquote><p><code>ViewSet</code> 和 <code>View</code> 很类似，但它提供的是读取、更新、创建、删除的操作，而不是类里面 <code>get</code> 和 <code>post</code> 这种请求处理的函数。<code>ViewSet</code> 类可以不自己写 URL，使用 <code>rest_framework.routers</code> 中的路由类，可以自动生成 URL</p><p>内置了几个常用类，继承自 <code>mixin</code> 和 <code>generics</code> 组成了几种常用的搭配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提供as_view方法</span></span><br><span class="line"><span class="comment"># 将GET、POST、PUT、DELETE请求映射到了子类的list|retrieve、create、update|partial_update、destory等方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewSetMixin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不包含任何操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewSet</span>(ViewSetMixin, views.APIView)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含GenericAPIView功能的通用视图集</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericViewSet</span>(ViewSetMixin, generics.GenericAPIView)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只读方法，可查看多个和单个实例数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReadOnlyModelViewSet</span>(mixins.RetrieveModelMixin, mixins.ListModelMixin, GenericViewSet)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含CRUD方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModelViewSet</span>(mixins.CreateModelMixin, mixins.RetrieveModelMixin, mixins.UpdateModelMixin, </span><br><span class="line">                   mixins.DestroyModelMixin, mixins.ListModelMixin, GenericViewSet)</span><br></pre></td></tr></table></figure><p>使用示例，由上面的函数签名可以知道，<code>ReadOnlyModelViewSet</code> 只有读的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserViewSet</span>(viewsets.ReadOnlyModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    此视图自动提供`list`和`detail`操作。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br></pre></td></tr></table></figure><p>增加路由的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将根据basename生成解析，默认反解的api-root是接口目录路径</span></span><br><span class="line">router = DefaultRouter()</span><br><span class="line"><span class="comment"># 各个方法将解析为类似&#x27;snippet-detail&#x27;等，@action装饰的动作如&#x27;snippet-方法名&#x27;</span></span><br><span class="line">router.register(<span class="string">&#x27;users&#x27;</span>, views.UserViewSet, basename=<span class="string">&#x27;snippet&#x27;</span>)</span><br><span class="line">router.register(<span class="string">&#x27;snippets&#x27;</span>, views.SnippetViewSet, basename=<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将router2的路由扩展到router中</span></span><br><span class="line">router2 = DefaultRouter()</span><br><span class="line">router.registry.extend(router.registry)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>, namespace=<span class="string">&#x27;rest_framework&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(router.urls)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><h3 id="内置权限类"><a href="#内置权限类" class="headerlink" title="内置权限类"></a>内置权限类</h3><p>在 <code>rest_framework.permissions</code> 中有权限验证相关的内容</p><p>通常权限继承自 <code>BasePermission</code> 基类，主要定义了两个方法，均返回 Bool 值，用于区分是否有权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 权限的基类，定义了 has_permission 和 has_object_permission 两个方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasePermission</span>(metaclass=BasePermissionMetaclass):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A base class from which all permission classes should inherit.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_permission</span>(<span class="params">self, request, view</span>):  <span class="comment"># 视图级别权限</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Return `True` if permission is granted, `False` otherwise.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_object_permission</span>(<span class="params">self, request, view, obj</span>):  <span class="comment"># 对象级别权限，多传递了一个对象参数</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Return `True` if permission is granted, `False` otherwise.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>自定义权限只需要继承 <code>BasePermission</code> 在两个方法中做判断，然后在视图中指定即可。</p><p><code>rest_framework.permissions</code> 中内置了以下几种权限：</p><ul><li><code>IsAuthenticated</code></li><li><code>IsAdminUser</code></li><li><code>IsAuthenticatedOrReadOnly</code></li><li><code>DjangoModelPermissions</code></li><li><code>DjangoModelPermissionsOrAnonReadOnly</code></li><li><code>DjangoObjectPermissions</code></li></ul><h3 id="自定义权限"><a href="#自定义权限" class="headerlink" title="自定义权限"></a>自定义权限</h3><p>例如在 snippets model 增加了 owner 字段关联用户，并且增加 <code>permissions.py</code>，实现只有 owner 用户可以修改自己的 snippets，其他情况均只读的权限类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IsOwnerOrReadOnly</span>(permissions.BasePermission):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义权限只允许对象的所有者编辑它。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_object_permission</span>(<span class="params">self, request, view, obj</span>):</span><br><span class="line">        <span class="comment"># 读取权限允许任何请求，</span></span><br><span class="line">        <span class="comment"># 所以我们总是允许GET，HEAD或OPTIONS请求。</span></span><br><span class="line">        <span class="keyword">if</span> request.method <span class="keyword">in</span> permissions.SAFE_METHODS:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 只有该snippet的所有者才允许写权限。</span></span><br><span class="line">        <span class="keyword">return</span> obj.owner == request.user</span><br></pre></td></tr></table></figure><p>修改视图，导入新增的权限类并设置，这将只有 owner 可以修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.permissions <span class="keyword">import</span> IsOwnerOrReadOnly</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnippetDetail</span>(generics.RetrieveUpdateDestroyAPIView):</span><br><span class="line">    queryset = Snippet.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = (permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly)</span><br></pre></td></tr></table></figure><h2 id="关系和超链接"><a href="#关系和超链接" class="headerlink" title="关系和超链接"></a>关系和超链接</h2><p>为 API 根路径设置一个入口，<code>snippets/views.py</code> 中增加一个函数视图，使用 reverse 返回完全限定的 URL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.reverse <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api_root</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> Response(&#123;</span><br><span class="line">        <span class="string">&#x27;users&#x27;</span>: reverse(<span class="string">&#x27;user-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>),</span><br><span class="line">        <span class="string">&#x27;snippets&#x27;</span>: reverse(<span class="string">&#x27;snippet-list&#x27;</span>, request=request, <span class="built_in">format</span>=<span class="built_in">format</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>修改 <code>urls.py</code> 给 URL 加上 <code>name</code>，用于 reverse 解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include</span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>, namespace=<span class="string">&#x27;rest_framework&#x27;</span>)),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">&#x27;snippets/&#x27;</span>, views.SnippetList.as_view(), name=<span class="string">&#x27;snippet-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/&#x27;</span>, views.SnippetDetail.as_view(), name=<span class="string">&#x27;snippet-detail&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;snippets/&lt;int:pk&gt;/highlight/&#x27;</span>, views.SnippetHighlight.as_view(), name=<span class="string">&#x27;snippet-highlight&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, views.UserList.as_view(), name=<span class="string">&#x27;user-list&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;users/&lt;int:pk&gt;/&#x27;</span>, views.UserDetail.as_view(), name=<span class="string">&#x27;user-detail&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.api_root)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><p>此时访问接口根路径可以得到接口列表</p><p><img                       lazyload                     alt="image"                     data-src="https://raw.githubusercontent.com/an00/files/master/img/image-20210202173528241.png"                      alt="image-20210202173528241"                > </p></li><li><p>访问连接得到实体 URL 链接（代码未贴出，参考项目）</p><p><img                       lazyload                     alt="image"                     data-src="https://raw.githubusercontent.com/an00/files/master/img/image-20210202175202112.png"                                     ></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;记录-DRF-学习片段&quot;&gt;&lt;a href=&quot;#记录-DRF-学习片段&quot; class=&quot;headerlink&quot; title=&quot;记录 DRF 学习片段&quot;&gt;&lt;/a&gt;记录 DRF 学习片段&lt;/h1&gt;&lt;p&gt;刷官方 tutorial 的记录，官网地址 &lt;a class=&quot;link&quot;   href=&quot;https://www.django-rest-framework.org/tutorial/quickstart/&quot; &gt;django-rest-framework&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.an00.cn/categories/Python/"/>
    
    
    <category term="DRF" scheme="https://blog.an00.cn/tags/DRF/"/>
    
  </entry>
  
  <entry>
    <title>记录 django 外键关联统计</title>
    <link href="https://blog.an00.cn/2020/12/09/%E8%AE%B0%E5%BD%95-django-%E5%A4%96%E9%94%AE%E5%85%B3%E8%81%94%E7%BB%9F%E8%AE%A1/"/>
    <id>https://blog.an00.cn/2020/12/09/%E8%AE%B0%E5%BD%95-django-%E5%A4%96%E9%94%AE%E5%85%B3%E8%81%94%E7%BB%9F%E8%AE%A1/</id>
    <published>2020-12-09T09:05:49.000Z</published>
    <updated>2023-10-29T07:06:51.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录-django-外键关联统计"><a href="#记录-django-外键关联统计" class="headerlink" title="记录 django 外键关联统计"></a>记录 django 外键关联统计</h1><p>记录几个统计问题实例</p><span id="more"></span><ol><li>从主机表统计每个主机的装服数量，<code>ServerModel</code> 的 <code>host</code> 字段关联 <code>HostModel</code>，在 <code>1.11</code> 中实测可用。统计后的对象将额外生成一个 <code>__count</code> 后缀的字段，并且可以用于排序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HostModel.objects.using(gameName).values(<span class="string">&#x27;id&#x27;</span>).annotate(Count(<span class="string">&#x27;servermodel&#x27;</span>)).order_by(<span class="string">&#x27;servermodel__count&#x27;</span>)</span><br><span class="line"></span><br><span class="line">添加过滤</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count, When, Case</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person = Person.objects.annotate(Count(Case(When(task_set__is_done=<span class="literal">True</span>, then=<span class="number">0</span>))).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person.task_set__count</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.0往后</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count, Q</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person = Person.objects.annotate(</span><br><span class="line"><span class="meta">... </span>            Count(<span class="string">&#x27;task_set&#x27;</span>, <span class="built_in">filter</span>=Q(task_set__is_done=<span class="literal">True</span>))</span><br><span class="line"><span class="meta">... </span>        ).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person.task_set__count</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><ol start="2"><li>sum(x) .. group by field<br>如下PerformanceStatsModel 有字段[host_id(外键),mem1,mem2,mem3,created_date]，想得到某机器在多天时各 mem 字段统计的总和数据。<br>这里的特点是 <code>annotate</code> 注解（分组）会按 order_by 字段，若想按host_id分组，model中默认可能会是 <code>&quot;-id&quot;</code> 排序。我们这里的结果必须用 <code>.values(&quot;host&quot;).order_by(&quot;host&quot;)</code> 才能实现像 SQL 中的 <code>group by host_id</code>，最后 <code>annotate</code> 中的参数与 <code>select sum(mem1) as mem_1, sum(mem2) as mem_2, sum(mem3) as mem_3 from ...</code> 相同</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PerformanceStatsModel.objects.using(gameName).<span class="built_in">filter</span>(</span><br><span class="line">    host__in=hosts, mem3=<span class="number">0</span>, created_date__gte=d).values(<span class="string">&quot;host&quot;</span>).order_by(<span class="string">&quot;host&quot;</span>).annotate(</span><br><span class="line">        mem_1=Sum(<span class="string">&quot;mem1&quot;</span>), mem_2=Sum(<span class="string">&quot;mem2&quot;</span>), mem_3=Sum(<span class="string">&quot;mem3&quot;</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果集是一个个统计好的字典：</span></span><br><span class="line">&#123;<span class="string">&#x27;host&#x27;</span>: <span class="number">175</span>, <span class="string">&#x27;mem_1&#x27;</span>: <span class="number">2880</span>, <span class="string">&#x27;mem_2&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;mem_3&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;host&#x27;</span>: <span class="number">178</span>, <span class="string">&#x27;mem_1&#x27;</span>: <span class="number">2880</span>, <span class="string">&#x27;mem_2&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;mem_3&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果集中的字典是可以用filter过滤的，相当于SQL中group by后面的: having maxMem = 0</span></span><br><span class="line">PerformanceStatsModel.objects.using(gameName).<span class="built_in">filter</span>(host__in=hosts, created_date__gte=d).values(<span class="string">&quot;host&quot;</span>).order_by(<span class="string">&quot;host&quot;</span>).annotate(maxMem=Sum(<span class="string">&quot;mem3&quot;</span>)).<span class="built_in">filter</span>(maxMem=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;记录-django-外键关联统计&quot;&gt;&lt;a href=&quot;#记录-django-外键关联统计&quot; class=&quot;headerlink&quot; title=&quot;记录 django 外键关联统计&quot;&gt;&lt;/a&gt;记录 django 外键关联统计&lt;/h1&gt;&lt;p&gt;记录几个统计问题实例&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.an00.cn/categories/Python/"/>
    
    
    <category term="django" scheme="https://blog.an00.cn/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>记录 django 中的查询优化</title>
    <link href="https://blog.an00.cn/2020/12/09/%E8%AE%B0%E5%BD%95-django-%E4%B8%AD%E7%9A%84%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2/"/>
    <id>https://blog.an00.cn/2020/12/09/%E8%AE%B0%E5%BD%95-django-%E4%B8%AD%E7%9A%84%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2/</id>
    <published>2020-12-09T09:00:51.000Z</published>
    <updated>2023-10-29T07:06:41.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录-django-中的查询优化"><a href="#记录-django-中的查询优化" class="headerlink" title="记录 django 中的查询优化"></a>记录 django 中的查询优化</h1><p>恰当的使用 <code>select_related</code> 和 <code>prefetch_related</code> 方法，可以减少数据库重复查询的次数  </p><p>两种方法均支持双下划线指定需要查询的关联对象的字段名</p><ul><li>select_related<ul><li>适合一对一，一对多的外键字段</li></ul></li><li>prefetch_related:<ul><li>适合多对多字段、外键反查(<code>related_name</code>)的情况</li><li>在方法中使用 Prefetch 可以增加查询条件</li><li>执行两次数据库查询</li></ul></li></ul><span id="more"></span><p>示例 model </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Article(models.Model):</span><br><span class="line">    &quot;&quot;&quot;文章模型&quot;&quot;&quot;</span><br><span class="line">    title = models.CharField(&#x27;标题&#x27;, max_length=200, db_index=True)</span><br><span class="line">    category = models.ForeignKey(&#x27;Category&#x27;, verbose_name=&#x27;分类&#x27;, on_delete=models.CASCADE, blank=False, null=False)</span><br><span class="line">    tags = models.ManyToManyField(&#x27;Tag&#x27;, verbose_name=&#x27;标签集合&#x27;, blank=True)</span><br></pre></td></tr></table></figure><h2 id="select-related"><a href="#select-related" class="headerlink" title="select_related"></a>select_related</h2><p>适用于外键这种一对一，一对多的情况，执行其实是生成一条 <code>inner join</code> 的 SQL 语句，一次查询获取对象和关联对象的内容。  </p><p>使用方法如下，遍历结果集 <code>articles</code> 调用 <code>item.category.name</code>  获取信息时，不产生另外的查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取对象的同时，获取相关的字段信息</span></span><br><span class="line">articles = Article.objects.<span class="built_in">all</span>().select_related(<span class="string">&#x27;category&#x27;</span>)</span><br><span class="line">articles = Article.objects.<span class="built_in">all</span>().select_related(<span class="string">&#x27;category__name&#x27;</span>)</span><br><span class="line">articles = Article.objects.<span class="built_in">all</span>().select_related(<span class="string">&#x27;category&#x27;</span>, <span class="string">&#x27;author__name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不指定字段，直接使用select_related()将查出所有关联信息</span></span><br><span class="line">articles = Article.objects.<span class="built_in">all</span>().select_related()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再加 filter 组合，顺序不重要</span></span><br><span class="line">articles = Article.objects.<span class="built_in">all</span>().<span class="built_in">filter</span>(pk__in=(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)).select_related()</span><br></pre></td></tr></table></figure><p>在模板中遍历的示例，未使用 <code>select_related</code> 方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% for article in articles %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; article.title &#125;&#125; &lt;/li&gt;</span><br><span class="line">    &#123;# category.name 每次都将生成一条查询。若按上述方法，这里将从对象中直接拿到，不用额外的一次查询 #&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; article.category.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">            &#123;% for tag in article.tags.all %&#125;</span><br><span class="line">             &#123;&#123; tag.name &#125;&#125;,  &#123;# 每次都将生成一条查询 #&#125;</span><br><span class="line">             &#123;% endfor %&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h2 id="prefetch-related"><a href="#prefetch-related" class="headerlink" title="prefetch_related"></a>prefetch_related</h2><p>对于多对多的字段，不能使用 <code>select_related</code> 方式，避免多对多字段 join 后结果很大。<code>prefect_related</code> 就是用于多对多关系的，也可以用于外键的反查(related_name)</p><p>使用方法如下，遍历结果集，拿关联的 <code>tags</code> 对象信息时，不用每次遍历执行一次查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取对象列表并加载关联 tags 对象的 name 字段</span></span><br><span class="line">articles = Article.objects.<span class="built_in">all</span>().prefetch_related(<span class="string">&#x27;tags__name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取关联对象 tags 的所有信息</span></span><br><span class="line">articles = Article.objects.<span class="built_in">all</span>().prefetch_related(<span class="string">&#x27;tags&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面模版中的例子，可以使用如下查询，加载 category 和 tags 对象信息</span></span><br><span class="line">articles = Article.objects.<span class="built_in">all</span>().select_related(<span class="string">&#x27;category__name&#x27;</span>).prefetch_related(<span class="string">&#x27;tags&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在 prefetch_related 中，还可以对所查的关联对象进行过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取文章列表及每篇文章相关的名字以P开头的tags对象信息</span></span><br><span class="line">Article.objects.<span class="built_in">all</span>().prefetch_related(</span><br><span class="line">    Prefetch(<span class="string">&#x27;tags&#x27;</span>, queryset=Tag.objects.<span class="built_in">filter</span>(name__startswith=<span class="string">&quot;P&quot;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章列表及每篇文章的名字以P开头的tags对象信息, 放在article_p_tag列表</span></span><br><span class="line">Article.objects.<span class="built_in">all</span>().prefetch_related(</span><br><span class="line">    Prefetch(<span class="string">&#x27;tags&#x27;</span>, queryset=Tag.objects.<span class="built_in">filter</span>(name__startswith=<span class="string">&quot;P&quot;</span>)),</span><br><span class="line">to_attr=<span class="string">&#x27;article_p_tag&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;记录-django-中的查询优化&quot;&gt;&lt;a href=&quot;#记录-django-中的查询优化&quot; class=&quot;headerlink&quot; title=&quot;记录 django 中的查询优化&quot;&gt;&lt;/a&gt;记录 django 中的查询优化&lt;/h1&gt;&lt;p&gt;恰当的使用 &lt;code&gt;select_related&lt;/code&gt; 和 &lt;code&gt;prefetch_related&lt;/code&gt; 方法，可以减少数据库重复查询的次数  &lt;/p&gt;
&lt;p&gt;两种方法均支持双下划线指定需要查询的关联对象的字段名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select_related&lt;ul&gt;
&lt;li&gt;适合一对一，一对多的外键字段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;prefetch_related:&lt;ul&gt;
&lt;li&gt;适合多对多字段、外键反查(&lt;code&gt;related_name&lt;/code&gt;)的情况&lt;/li&gt;
&lt;li&gt;在方法中使用 Prefetch 可以增加查询条件&lt;/li&gt;
&lt;li&gt;执行两次数据库查询&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.an00.cn/categories/Python/"/>
    
    
    <category term="django" scheme="https://blog.an00.cn/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>innodb cluster 和 mysqlsh</title>
    <link href="https://blog.an00.cn/2020/09/27/innodb-cluster-%E5%92%8C-mysqlsh/"/>
    <id>https://blog.an00.cn/2020/09/27/innodb-cluster-%E5%92%8C-mysqlsh/</id>
    <published>2020-09-27T07:56:24.000Z</published>
    <updated>2023-10-29T07:03:50.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="innodb-cluster-和-mysqlsh"><a href="#innodb-cluster-和-mysqlsh" class="headerlink" title="innodb-cluster 和 mysqlsh"></a>innodb-cluster 和 mysqlsh</h2><p>官网下载并安装下面几个包（不带过程）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql-server mysql-shell mysql-router</span><br></pre></td></tr></table></figure><h3 id="配置-innodb-cluster"><a href="#配置-innodb-cluster" class="headerlink" title="配置 innodb cluster"></a>配置 innodb cluster</h3><blockquote><p>mysql 官网提供了一个很好的工具，叫 mysql-shell 以前没体会到妙处，在配置 innodb cluster 时发现非常方便，推荐尝试。</p></blockquote><p>innodb 集群在 mysql-shell 中配置的大致命令，交互命令都是 <code>js</code> 的语法</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 进入mysqlshell</span><br><span class="line">shell&gt; mysqlsh root@<span class="number">192.168</span><span class="number">.234</span><span class="number">.128</span>:<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"># 检查实例配置，如果需要修复某些选项，提示中会建议执行 <span class="string">`dba.configureInstance()`</span></span><br><span class="line">dba.<span class="title function_">checkInstanceConfiguration</span>(<span class="string">&#x27;root@192.168.234.128:3306&#x27;</span>)</span><br><span class="line">dba.<span class="title function_">checkInstanceConfiguration</span>(<span class="string">&#x27;root@192.168.234.128:3307&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># 最好记录修复后的配置加到配置文件 -- 不确定</span><br><span class="line">dba.<span class="title function_">configureInstance</span>(<span class="string">&#x27;root@192.168.234.128:3307&#x27;</span>)</span><br><span class="line">dba.<span class="title function_">configureInstance</span>(<span class="string">&#x27;root@192.168.234.128:3306&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># 创建集群、获取集群，加入实例，实例必须已配置好</span><br><span class="line"><span class="keyword">var</span> cluster = dba.<span class="title function_">createCluster</span>(<span class="string">&#x27;mine_db&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cluster.<span class="title function_">addInstance</span>(<span class="string">&#x27;root@192.168.234.128:3306&#x27;</span>)</span><br><span class="line">cluster.<span class="title function_">addInstance</span>(<span class="string">&#x27;root@192.168.234.128:3307&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># 查看集群，status中列出mode为R/W的为可读写的节点</span><br><span class="line">cluster.<span class="title function_">describe</span>()</span><br><span class="line">cluster.<span class="title function_">status</span>()</span><br><span class="line"></span><br><span class="line"># 获取集群</span><br><span class="line"><span class="keyword">var</span> cluster = dba.<span class="title function_">getCluster</span>(<span class="string">&#x27;mine_db&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># 若集群节点都离线，会获取失败，提示:</span><br><span class="line"><span class="title class_">Dba</span>.<span class="property">getCluster</span>: <span class="title class_">This</span> <span class="keyword">function</span> is not available through a session to a standalone instance (metadata exists, instance belongs to that metadata, but <span class="variable constant_">GR</span> is not active) (<span class="title class_">RuntimeError</span>)</span><br><span class="line"></span><br><span class="line"># 可以执行下面命令恢复集群</span><br><span class="line">dba.<span class="title function_">rebootClusterFromCompleteOutage</span>(<span class="string">&#x27;mine_db&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># 切换多主、单主模式</span><br><span class="line">cluster.<span class="title function_">switchToMultiPrimaryMode</span>()</span><br><span class="line">cluster.<span class="title function_">switchToSinglePrimaryMode</span>()</span><br><span class="line"></span><br><span class="line"># 有节点<span class="variable constant_">UNREACHABLE</span>了不能做出冲裁时，写请求hang住，修复需要强制指定某活跃的节点</span><br><span class="line">cluster.<span class="title function_">forceQuorumUsingPartitionOf</span>(<span class="string">&#x27;root@192.168.234.128:3307&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># mysql-router相关</span><br><span class="line">cluster.<span class="title function_">listRouters</span>()</span><br><span class="line">cluster.<span class="title function_">removeRouterMetadata</span>(<span class="string">&#x27;192.168.234.128::system&#x27;</span>)</span><br></pre></td></tr></table></figure><p>当前状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">cluster.<span class="title function_">status</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;clusterName&quot;</span>: <span class="string">&quot;mine_db&quot;</span>,  # 集群名称</span><br><span class="line">    <span class="string">&quot;defaultReplicaSet&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;default&quot;</span>, </span><br><span class="line">        <span class="string">&quot;primary&quot;</span>: <span class="string">&quot;192.168.234.128:3307&quot;</span>,  # 主节点</span><br><span class="line">        <span class="string">&quot;ssl&quot;</span>: <span class="string">&quot;REQUIRED&quot;</span>, </span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="string">&quot;OK_NO_TOLERANCE&quot;</span>, </span><br><span class="line">        <span class="string">&quot;statusText&quot;</span>: <span class="string">&quot;Cluster is NOT tolerant to any failures.&quot;</span>,  # 由于测试只有<span class="number">2</span>个节点，不能容忍任何一个故障</span><br><span class="line">        <span class="string">&quot;topology&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;192.168.234.128:3306&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;address&quot;</span>: <span class="string">&quot;192.168.234.128:3306&quot;</span>, </span><br><span class="line">                <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;R/O&quot;</span>,   # 只读</span><br><span class="line">                <span class="string">&quot;readReplicas&quot;</span>: &#123;&#125;, </span><br><span class="line">                <span class="string">&quot;replicationLag&quot;</span>: <span class="literal">null</span>, </span><br><span class="line">                <span class="string">&quot;role&quot;</span>: <span class="string">&quot;HA&quot;</span>, </span><br><span class="line">                <span class="string">&quot;status&quot;</span>: <span class="string">&quot;ONLINE&quot;</span>, </span><br><span class="line">                <span class="string">&quot;version&quot;</span>: <span class="string">&quot;8.0.20&quot;</span></span><br><span class="line">            &#125;, </span><br><span class="line">            <span class="string">&quot;192.168.234.128:3307&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;address&quot;</span>: <span class="string">&quot;192.168.234.128:3307&quot;</span>, </span><br><span class="line">                <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;R/W&quot;</span>,  # 可读写</span><br><span class="line">                <span class="string">&quot;readReplicas&quot;</span>: &#123;&#125;, </span><br><span class="line">                <span class="string">&quot;replicationLag&quot;</span>: <span class="literal">null</span>, </span><br><span class="line">                <span class="string">&quot;role&quot;</span>: <span class="string">&quot;HA&quot;</span>, </span><br><span class="line">                <span class="string">&quot;status&quot;</span>: <span class="string">&quot;ONLINE&quot;</span>, </span><br><span class="line">                <span class="string">&quot;version&quot;</span>: <span class="string">&quot;8.0.20&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        <span class="string">&quot;topologyMode&quot;</span>: <span class="string">&quot;Single-Primary&quot;</span>  # 当前单主模式，cluster.<span class="property">switchToMultiPrimaryMode</span>可切换</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">&quot;groupInformationSourceMember&quot;</span>: <span class="string">&quot;192.168.234.128:3307&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增加-mysql-router"><a href="#增加-mysql-router" class="headerlink" title="增加 mysql-router"></a>增加 mysql-router</h3><p>若router已经在 <code>cluster.listRouters</code> 中，需要 <code>cluster.removeRouterMetadata</code> 后才能添加，rpm包默认会创建mysqlrouter用户，并且service也以此用户身份运行</p><p>生成mysqlrouter配置，执行后可以 <code>cluster.listRouters()</code> 看到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">mysqlrouter --bootstrap root@192.168.234.128:3306 --user=mysqlrouter --force-password-validation --report-host 192.168.234.128</span></span><br><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">systemctl start mysqlrouter.service</span></span><br></pre></td></tr></table></figure><p>生成后提示有监听4个端口，两种协议的读写端口各不同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># MySQL Classic protocol</span></span></span><br><span class="line">- Read/Write Connections: 192.168.234.128:6446</span><br><span class="line">- Read/Only Connections:  192.168.234.128:6447</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># MySQL X protocol</span></span></span><br><span class="line">- Read/Write Connections: 192.168.234.128:64460</span><br><span class="line">- Read/Only Connections:  192.168.234.128:64470</span><br></pre></td></tr></table></figure><p>连接测试，<code>R/O</code> 模式的节点是 <code>super-read-only</code> 不可写的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p111111 -h192.168.234.128 -P6446 -e &quot;select @@port&quot;</span><br><span class="line">mysql -uroot -p111111 -h192.168.234.128 -P6447 -e &quot;select @@port&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试语句</span></span><br><span class="line">-- use test;</span><br><span class="line">-- create table user (id int unsigned auto_increment primary key, name varchar(32), create_time datetime not null default current_timestamp);</span><br><span class="line">-- insert into user (name) values (&#x27;aa&#x27;), (&#x27;bb&#x27;);</span><br></pre></td></tr></table></figure><p>中途停掉一个之后，通过 mysqlrouter 连接同样可以读写，mysqlshell中看到有实例状态是 <code>MISSING</code> 并且连接错误。启动后自动加入到了集群中，开始同步数据，恢复状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysqld_multi stop 3</span></span><br></pre></td></tr></table></figure><h3 id="测试配置"><a href="#测试配置" class="headerlink" title="测试配置"></a>测试配置</h3><blockquote><p>从 5.7 改的，不一定是优选，仅供参考</p></blockquote><p>使用 <code>mysqld_multi</code> 配置，8.0.20 版本</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment">#prompt=&quot;(\\u@\\h:\\p) [\\d]&gt; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">user</span>=root</span><br><span class="line"><span class="comment"># default use 3306 instance</span></span><br><span class="line"><span class="attr">socket</span>  = /data/<span class="number">3306</span>/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld_multi]</span></span><br><span class="line"><span class="attr">mysqld</span> = /usr/local/mysql/bin/mysqld_safe</span><br><span class="line"><span class="attr">mysqladmin</span> = /usr/local/mysql/bin/mysqladmin</span><br><span class="line"><span class="attr">user</span> = root</span><br><span class="line"><span class="attr">password</span> = your_password</span><br><span class="line"><span class="attr">log</span> = /data/multi_mysqld.log</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">########basic settings########</span></span><br><span class="line"><span class="comment">#server-id = 10</span></span><br><span class="line"><span class="comment">#port = 3306</span></span><br><span class="line"><span class="attr">user</span> = mysql</span><br><span class="line"><span class="attr">bind_address</span> = <span class="number">192.168</span>.<span class="number">234.128</span></span><br><span class="line"><span class="attr">socket</span> = mysql.sock</span><br><span class="line"><span class="comment">#autocommit = 0</span></span><br><span class="line"><span class="attr">character_set_server</span>=utf8mb4</span><br><span class="line"><span class="attr">skip_name_resolve</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">max_connections</span> = <span class="number">800</span></span><br><span class="line"><span class="attr">max_connect_errors</span> = <span class="number">1000</span></span><br><span class="line"><span class="comment">#datadir = /data/3306</span></span><br><span class="line"><span class="attr">transaction_isolation</span> = REPEATABLE-READ</span><br><span class="line"><span class="attr">explicit_defaults_for_timestamp</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">join_buffer_size</span> = <span class="number">134217728</span></span><br><span class="line"><span class="attr">tmp_table_size</span> = <span class="number">67108864</span></span><br><span class="line"><span class="attr">tmpdir</span> = /tmp</span><br><span class="line"><span class="comment">#max_allowed_packet = 16777216</span></span><br><span class="line"><span class="attr">max_allowed_packet</span> = <span class="number">100</span>M</span><br><span class="line"><span class="comment">#sql_mode = &quot;STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER&quot;</span></span><br><span class="line"><span class="attr">interactive_timeout</span> = <span class="number">1800</span></span><br><span class="line"><span class="attr">wait_timeout</span> = <span class="number">1800</span></span><br><span class="line"><span class="attr">read_buffer_size</span> = <span class="number">16777216</span></span><br><span class="line"><span class="attr">read_rnd_buffer_size</span> = <span class="number">33554432</span></span><br><span class="line"><span class="attr">sort_buffer_size</span> = <span class="number">33554432</span></span><br><span class="line"><span class="comment">########log settings########</span></span><br><span class="line"><span class="attr">log_error</span> = error.log</span><br><span class="line"><span class="attr">slow_query_log</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">slow_query_log_file</span> = slow.log</span><br><span class="line"><span class="attr">log_queries_not_using_indexes</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">log_slow_admin_statements</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">log_slow_slave_statements</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">log_throttle_queries_not_using_indexes</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">expire_logs_days</span> = <span class="number">90</span></span><br><span class="line"><span class="attr">long_query_time</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">min_examined_row_limit</span> = <span class="number">100</span></span><br><span class="line"><span class="comment">########replication settings########</span></span><br><span class="line"><span class="attr">master_info_repository</span> = TABLE</span><br><span class="line"><span class="attr">relay_log_info_repository</span> = TABLE</span><br><span class="line"><span class="attr">log_bin</span> = bin.log</span><br><span class="line"><span class="attr">sync_binlog</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">gtid_mode</span> = <span class="literal">on</span></span><br><span class="line"><span class="attr">enforce_gtid_consistency</span> = <span class="number">1</span></span><br><span class="line">log_slave_updates</span><br><span class="line"><span class="attr">binlog_format</span> = row </span><br><span class="line"><span class="attr">relay_log</span> = relay.log</span><br><span class="line"><span class="attr">relay_log_recovery</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">binlog_gtid_simple_recovery</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">slave_skip_errors</span> = ddl_exist_errors</span><br><span class="line"><span class="comment">#report-host = 192.168.234.128</span></span><br><span class="line"><span class="comment">#report-port = 3306</span></span><br><span class="line"><span class="comment"># 并行复制</span></span><br><span class="line"><span class="attr">slave-parallel-type</span>=LOGICAL_CLOCK</span><br><span class="line"><span class="attr">slave-parallel-workers</span>=<span class="number">2</span>    <span class="comment"># 并行的Coordinator线程数量</span></span><br><span class="line"><span class="attr">master_info_repository</span>=TABLE</span><br><span class="line"><span class="attr">relay_log_info_repository</span>=TABLE</span><br><span class="line"><span class="attr">binlog_checksum</span> = none</span><br><span class="line"><span class="attr">slave_preserve_commit_order</span> = <span class="literal">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########innodb settings########</span></span><br><span class="line"><span class="attr">innodb_page_size</span> = <span class="number">16384</span></span><br><span class="line"><span class="comment">#innodb_buffer_pool_size = 512m</span></span><br><span class="line"><span class="attr">innodb_buffer_pool_size</span> = <span class="number">256</span>m</span><br><span class="line"><span class="attr">innodb_buffer_pool_instances</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">innodb_buffer_pool_load_at_startup</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">innodb_buffer_pool_dump_at_shutdown</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">innodb_lru_scan_depth</span> = <span class="number">100</span>    <span class="comment"># no more than innodb_io_capacity / innodb_buffer_pool_instances</span></span><br><span class="line"><span class="attr">innodb_lock_wait_timeout</span> = <span class="number">50</span></span><br><span class="line"><span class="attr">innodb_io_capacity</span> = <span class="number">800</span>       <span class="comment"># innodb_io_capacity_max * 80%</span></span><br><span class="line"><span class="attr">innodb_io_capacity_max</span> = <span class="number">1000</span>  <span class="comment"># current disk raid 5, max iops 1000+-</span></span><br><span class="line"><span class="attr">innodb_flush_method</span> = O_DIRECT</span><br><span class="line"><span class="attr">innodb_flush_neighbors</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">innodb_log_file_size</span> = <span class="number">128</span>M</span><br><span class="line"><span class="attr">innodb_log_buffer_size</span> = <span class="number">16777216</span></span><br><span class="line"><span class="attr">innodb_purge_threads</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">innodb_thread_concurrency</span> = <span class="number">64</span></span><br><span class="line"><span class="attr">innodb_print_all_deadlocks</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">innodb_strict_mode</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">innodb_sort_buffer_size</span> = <span class="number">67108864</span></span><br><span class="line"><span class="comment">########semi sync replication settings########</span></span><br><span class="line"><span class="attr">plugin_dir</span>=/usr/local/mysql/lib/plugin</span><br><span class="line"><span class="attr">plugin_load</span> = <span class="string">&quot;rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so&quot;</span></span><br><span class="line"><span class="attr">loose_rpl_semi_sync_master_enabled</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">loose_rpl_semi_sync_slave_enabled</span> = <span class="number">1</span></span><br><span class="line"><span class="comment"># - AFTER_SYNC 表示的是无损复制（ 5.7 默认）</span></span><br><span class="line"><span class="comment"># - AFTER_COMMIT 表示的是半同步复制</span></span><br><span class="line"><span class="attr">rpl_semi_sync_master_wait_point</span>=AFTER_SYNC</span><br><span class="line"><span class="comment"># 超时五秒后换回异步的方式</span></span><br><span class="line"><span class="comment">#loose_rpl_semi_sync_master_timeout = 5000</span></span><br><span class="line"><span class="comment">########ssl settings########</span></span><br><span class="line"><span class="attr">ssl-ca</span> = ca.pem</span><br><span class="line"><span class="attr">ssl-cert</span> = server-cert.pem</span><br><span class="line"><span class="attr">ssl-key</span> = server-key.pem</span><br><span class="line"></span><br><span class="line"><span class="attr">innodb_buffer_pool_dump_pct</span> = <span class="number">40</span></span><br><span class="line"><span class="attr">innodb_page_cleaners</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">innodb_undo_log_truncate</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">innodb_max_undo_log_size</span> = <span class="number">256</span>M</span><br><span class="line"><span class="attr">innodb_purge_rseg_truncate_frequency</span> = <span class="number">128</span></span><br><span class="line"><span class="attr">binlog_gtid_simple_recovery</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">log_timestamps</span>=system</span><br><span class="line"><span class="attr">transaction_write_set_extraction</span>=MURMUR32</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld2]</span></span><br><span class="line"><span class="attr">report-host</span> = <span class="number">192.168</span>.<span class="number">234.128</span></span><br><span class="line"><span class="attr">report-port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">datadir</span> = /data/<span class="number">3306</span></span><br><span class="line"><span class="attr">server-id</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">socket</span> = /data/<span class="number">3306</span>/mysql.sock</span><br><span class="line"><span class="attr">pid-file</span> = /data/<span class="number">3307</span>/mysql2.pid</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld3]</span></span><br><span class="line"><span class="attr">report-host</span> = <span class="number">192.168</span>.<span class="number">234.128</span></span><br><span class="line"><span class="attr">report-port</span> = <span class="number">3307</span></span><br><span class="line"><span class="attr">datadir</span> = /data/<span class="number">3307</span></span><br><span class="line"><span class="attr">server-id</span> = <span class="number">20</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3307</span></span><br><span class="line"><span class="attr">socket</span> = /data/<span class="number">3307</span>/mysql.sock</span><br><span class="line"><span class="attr">pid-file</span> = /data/<span class="number">3307</span>/mysql3.pid</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;innodb-cluster-和-mysqlsh&quot;&gt;&lt;a href=&quot;#innodb-cluster-和-mysqlsh&quot; class=&quot;headerlink&quot; title=&quot;innodb-cluster 和 mysqlsh&quot;&gt;&lt;/a&gt;innodb-cluster 和 mysqlsh&lt;/h2&gt;&lt;p&gt;官网下载并安装下面几个包（不带过程）&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql-server mysql-shell mysql-router&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;配置-innodb-cluster&quot;&gt;&lt;a href=&quot;#配置-innodb-cluster&quot; class=&quot;headerlink&quot; title=&quot;配置 innodb cluster&quot;&gt;&lt;/a&gt;配置 innodb cluster&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;mysql 官网提供了一个很好的工具，叫 mysql-shell 以前没体会到妙处，在配置 innodb cluster 时发现非常方便，推荐尝试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;innodb 集群在 mysql-shell 中配置的大致命令，交互命令都是 &lt;code&gt;js&lt;/code&gt; 的语法&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.an00.cn/categories/MySQL/"/>
    
    
    <category term="innodb" scheme="https://blog.an00.cn/tags/innodb/"/>
    
    <category term="mysqlsh" scheme="https://blog.an00.cn/tags/mysqlsh/"/>
    
  </entry>
  
  <entry>
    <title>记录前端 flex 布局</title>
    <link href="https://blog.an00.cn/2020/07/11/%E8%AE%B0%E5%BD%95%E5%89%8D%E7%AB%AF-flex-%E5%B8%83%E5%B1%80/"/>
    <id>https://blog.an00.cn/2020/07/11/%E8%AE%B0%E5%BD%95%E5%89%8D%E7%AB%AF-flex-%E5%B8%83%E5%B1%80/</id>
    <published>2020-07-11T09:09:57.000Z</published>
    <updated>2023-10-29T07:07:20.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录前端-flex-布局"><a href="#记录前端-flex-布局" class="headerlink" title="记录前端 flex 布局"></a>记录前端 flex 布局</h1><p>弹性布局，任何一个容器都可以指定为 flex 布局。<br>当为父盒子设定为 flex 布局后，子元素的float、clear和vertical-align 属性将失效。</p><p>采用flex布局的元素，称为flex container（容器），它的所有子元素称为flex item（项目）</p><p>flex 布局原理：通过给父盒子添加flex属性，来控制子盒子的位置和排列方式。</p><span id="more"></span><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><p>容器属性是给父元素添加的属性，通常有下面几种：</p><ul><li>flex-direction 设置主轴的方向</li><li>justify-content 设置主轴上子元素的排列方式</li><li>flex-wrap 设置子元素是否换行</li><li>align-content 设置侧轴上的子元素排列方式（多行）</li><li>align-items 设置侧轴上子元素的排列方式（单行）</li><li>flex-flow 复合属性，相当于同时设置了flex-direction和 flex-wrap</li></ul><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p>flex 有两个方向的概念，以默认方式介绍：</p><ul><li>水平方向（默认）：主轴、X轴、行，默认水平向右</li><li>垂直方向（默认）：侧轴、Y轴、列，默认垂直向下</li><li>但是主轴和侧轴会变换，就看 flex-direction 定义那个是主轴</li></ul><p>而 flex-direction 是控制主轴方向的属性（控制了flex item的排列方向）。主轴和侧轴是会变化的，就看flex-direction设置谁为主轴，剩下的就是侧轴，子元素是根据主轴方向排列的。</p><p>flex-direction属性：</p><table><thead><tr><th>fex-direction 属性值</th><th>含义</th></tr></thead><tbody><tr><td>row</td><td>从左到右，<strong>默认值</strong></td></tr><tr><td>row-reverse</td><td>从右到左</td></tr><tr><td>column</td><td>从上到下</td></tr><tr><td>column-reverse</td><td>从下到上</td></tr></tbody></table><p>示例代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* flex-direction: row-reverse; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: burlywood;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>用于设置主轴上子元素的对齐方式，<strong>使用此属性前一定要确定好主轴</strong></p><table><thead><tr><th>Justify-content 属性值</th><th>含义</th></tr></thead><tbody><tr><td>flex-start</td><td>从头部开始（如果主轴是x轴，则从左到右），<strong>默认</strong></td></tr><tr><td>flex-end</td><td>从尾部开始排列</td></tr><tr><td>center</td><td>在主轴居中对齐（若主轴是x轴，则水平居中）</td></tr><tr><td>space-around</td><td>平分剩余空间（每个子元素左右间隙一样，相当于左右margin一样）</td></tr><tr><td>space-between</td><td>先两边贴边，再平分剩余空间，元素间间隔一样（重要）</td></tr><tr><td>space-evenly</td><td>平分剩余空间到元素间的间隔，每个元素间的间隔相等，不贴边</td></tr></tbody></table><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* justify-content: space-between;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* justify-content: space-around; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-evenly;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: burlywood;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>flex 布局中，默认子元素是不换行的，flex item 都排在一条轴线上。如果子元素太多，flex 会压缩元素的大小（宽或高）让子元素继续挤在一行，但是可以用flex-wrap 控制是否换行。</p><table><thead><tr><th>Flex-wrap 属性值</th><th>含义</th></tr></thead><tbody><tr><td>nowrap</td><td>不换行，<strong>默认</strong></td></tr><tr><td>wrap</td><td>换行</td></tr></tbody></table><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-wrap</span>: wrap;  <span class="comment">/* 默认nowrap，不换行 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: burlywood;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>控制侧轴上（默认侧轴是y轴）子元素的排列方式（单行），在子项是单项的时候使用，注意确定侧轴。</p><table><thead><tr><th>Align-items 属性值</th><th>含义</th></tr></thead><tbody><tr><td>flex-start</td><td>从上到下（如默认侧轴是y轴），<strong>默认值</strong></td></tr><tr><td>flex-end</td><td>从下到上（如默认侧轴是y轴）</td></tr><tr><td>center</td><td>挤在一起居中（垂直居中）</td></tr><tr><td>stretch</td><td>拉伸子元素与父元素一样高（若子元素设置了高度会无效果）</td></tr></tbody></table><p>示例，实现<strong>水平垂直居中</strong>，分别控制主轴和侧轴居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* align-items: stretch; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: burlywood;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>设置子项在侧轴上的排列方式，并且只能用于子项出现<strong>换行</strong>的情况（多行），子项单行是没效果的。</p><table><thead><tr><th>align-content 属性值</th><th>含义</th></tr></thead><tbody><tr><td>flex-start</td><td>在侧轴的头部开始排列，<strong>默认</strong></td></tr><tr><td>flex-end</td><td>在侧轴的尾部开始排列</td></tr><tr><td>center</td><td>在侧轴的中间显示</td></tr><tr><td>space-around</td><td>子项在侧轴平分剩余空间（相当于两个子项有相同的margin值）</td></tr><tr><td>space-between</td><td>子项在侧轴先分布在两头（贴边），再平分剩余空间</td></tr><tr><td>stretch</td><td>设置子项元素高度平分父元素高度</td></tr></tbody></table><p>与 align-items 的区别：</p><ul><li>align-items 适用于单行情况，只有上对齐、下对齐、居中和拉伸几种方式</li><li>align-content 适用于子项多行（换行）的情况，单行无效，属性值较多，如上</li><li>所以<strong>单行用 align-items</strong>，<strong>多行用 align-content</strong>，同时注意确定侧轴</li></ul><p>示例，可以实现多行子项的各种对齐排列</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* align-content: space-between;  /* 一行贴上沿，一行贴着下沿 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* align-content: stretch;  /* 一行贴上沿，一行贴着下沿 */</span> </span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-content</span>: center;  <span class="comment">/* 水平、垂直居中 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: burlywood;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>6<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性，如下写法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">flex-direction</span>: row;</span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 与下面等效 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">flex-flow</span>: row wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子项属性"><a href="#子项属性" class="headerlink" title="子项属性"></a>子项属性</h2><ul><li><p>flex 子项占的份数</p></li><li><p>align-self 控制自己在侧轴上的排列方式</p></li><li><p>order 属性定义子项的排列顺序（前后顺序）</p></li></ul><h3 id="flex-属性"><a href="#flex-属性" class="headerlink" title="flex 属性"></a>flex 属性</h3><p>flex 属性定义子项目分配<strong>剩余空间</strong>，用 flex 来表示占多少份数，默认值是 0</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line"><span class="attribute">flex</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>典型场景：一行中三个元素，最左侧元素固定、最右侧元素固定，中间元素占的宽度自适应（圣杯布局）。</p><p>还可以类似 bootstrap 中的 col，给元素平均、指定分配占比，并且拉伸自适应。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">section</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: burlywood;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123; <span class="comment">/* 表示第一个子项 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123; <span class="comment">/* 表示第二个子项 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;  <span class="comment">/* 占用所有剩余空间 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: grey;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123; <span class="comment">/* 表示第三个子项 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: burlywood;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;   <span class="comment">/* 三个子项宽度平均分配 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> dashed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#demo1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: burlywood;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#demo1</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;   <span class="comment">/* 三个子项宽度平均分配 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> dashed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#demo1</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">2</span>;  <span class="comment">/* 第二个元素占2份，其他两个格子各占1份 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>控制子项自己在<strong>侧轴</strong>上的排列方式，可以允许单个子项与其他子项有不一样的对齐方式，可以覆盖父元素 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性。如果没有父元素，等同于 stretch。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: burlywood;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;   <span class="comment">/* 三个子项宽度平均分配 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> dashed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;  <span class="comment">/* 让第二个子项向侧轴的底部对齐 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-self</span>: flex-end;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>定义子项的排列顺序，<strong>数值越小，排列越靠前</strong>，默认为 0。</p><p>示例：让原本1、2、3排列的三个子项变成2、1、3排列。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: burlywood;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> dashed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">order</span>: -<span class="number">1</span>; <span class="comment">/* 让第二个子项排前面，顺序变成2 1 3，不设默认是1 2 3排列的 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;记录前端-flex-布局&quot;&gt;&lt;a href=&quot;#记录前端-flex-布局&quot; class=&quot;headerlink&quot; title=&quot;记录前端 flex 布局&quot;&gt;&lt;/a&gt;记录前端 flex 布局&lt;/h1&gt;&lt;p&gt;弹性布局，任何一个容器都可以指定为 flex 布局。&lt;br&gt;当为父盒子设定为 flex 布局后，子元素的float、clear和vertical-align 属性将失效。&lt;/p&gt;
&lt;p&gt;采用flex布局的元素，称为flex container（容器），它的所有子元素称为flex item（项目）&lt;/p&gt;
&lt;p&gt;flex 布局原理：通过给父盒子添加flex属性，来控制子盒子的位置和排列方式。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blog.an00.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="flex" scheme="https://blog.an00.cn/tags/flex/"/>
    
    <category term="css" scheme="https://blog.an00.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>在 salt 模块中获取 jid</title>
    <link href="https://blog.an00.cn/2020/03/05/%E5%9C%A8-salt-%E6%A8%A1%E5%9D%97%E4%B8%AD%E8%8E%B7%E5%8F%96-jid/"/>
    <id>https://blog.an00.cn/2020/03/05/%E5%9C%A8-salt-%E6%A8%A1%E5%9D%97%E4%B8%AD%E8%8E%B7%E5%8F%96-jid/</id>
    <published>2020-03-05T07:45:36.000Z</published>
    <updated>2022-04-05T08:27:20.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在-salt-模块中获取任务-jid"><a href="#在-salt-模块中获取任务-jid" class="headerlink" title="在 salt 模块中获取任务 jid"></a>在 salt 模块中获取任务 jid</h1><blockquote><p>在自定义的模块中获取 jid，以实现一些需求（客户端主动的方式，触发最新步骤的结果）</p></blockquote><p>需要自定义 salt 模块，并且接收 <code>kwargs</code> 参数（必须），在kwargs中会有一个 <code>__pub_jid</code> 的参数，是当前运行 job 的 id。</p><p>监听事件命令，方便观察，主要看事件输出的 jid 和我们后面模块写入的 jid （<code>__pub_jid</code>）是否一致，对比 minion 日志中我们打的日志。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt-run state.event &#x27;salt/job/*/prog/*/0&#x27;</span><br></pre></td></tr></table></figure><h2 id="自定义测试模块"><a href="#自定义测试模块" class="headerlink" title="自定义测试模块"></a>自定义测试模块</h2><blockquote><p><code>console.log</code><br>用 state.sls 在 sls 中跑是无效的，kwargs 中会没有 jid  </p></blockquote><p>接收 <code>**kwargs</code> 参数，其中包含 <code>__pub_jid</code> 就是 jid 了，注意如果没接收参数就无了。</p><p>另外值的注意的是，在自定义模块中如果再调用其他模块（<code>__salt__</code> 方式），子 job 运行时，事件监听获取不到该调用的 jid，这时候需要在调用时传入 <code>__pub_jid</code>，最好是把 <code>**kwargs</code> 传入，这样会使用当前的 jid。</p><p>模块代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /srv/salt/_modules/console.py</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__virtual__</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;console&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_get_sls</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;测试的从接口获取 sls 名称，可以去掉&quot;&quot;&quot;</span></span><br><span class="line">    req = requests.get(<span class="string">&quot;http://172.16.6.239:5000/api/v1/asset/sls_name/&quot;</span>)</span><br><span class="line">    logger.info(<span class="string">&quot;=====&gt; %s&quot;</span> % req.content)</span><br><span class="line">    <span class="keyword">return</span> req.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">value=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;console.log&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    sls_name = _get_sls()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># __pub_jid是一个字符串，如果写死，从此处调用的job都将是同一个jid</span></span><br><span class="line">    <span class="comment"># 最好传入 **kwargs 里面包含 __pub_jid</span></span><br><span class="line">    __salt__[<span class="string">&quot;state.sls&quot;</span>](sls_name, **kwargs)</span><br><span class="line">    <span class="comment">#__salt__[&quot;state.sls&quot;](sls_name, __pub_jid=&quot;aaaaaaaaaaaaaa&quot;)</span></span><br><span class="line"></span><br><span class="line">    ret = &#123;&#125;</span><br><span class="line">    ret[<span class="string">&#x27;sls_name&#x27;</span>] = sls_name</span><br><span class="line">    ret[<span class="string">&#x27;msg&#x27;</span>] = value</span><br><span class="line">    ret[<span class="string">&#x27;kwargs&#x27;</span>] = kwargs</span><br><span class="line">    logger.info(<span class="string">&quot;++++&gt; &quot;</span>)</span><br><span class="line">    logger.info(<span class="string">&quot;++++&gt; %s&quot;</span> % ret)</span><br><span class="line">    logger.info(<span class="string">&quot;++++&gt; &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同步模块（修改 _modules 下的文件需要同步）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt &#x27;*&#x27; saltutil.sync_all</span><br></pre></td></tr></table></figure><p>调用的命令，执行 <code>console.log</code> 模块，输出的 kwargs 中含有 jid<br>（用 state.sls 在 sls 中跑是无效的，kwargs 中没有 jid）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt &quot;*&quot;  console.log &quot;hello world&quot;</span><br></pre></td></tr></table></figure><h2 id="无效的方式"><a href="#无效的方式" class="headerlink" title="无效的方式"></a>无效的方式</h2><blockquote><p>（在 sls 中无法获取到）</p></blockquote><p>测试用 state.sls 方式运行下面的状态文件 <code>salt &quot;*&quot; state.sls console</code>，会看到 <code>console.log</code> 模块中是没有 jid 数据的，这点差异需要注意</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /srv/states/console.sls </span></span><br><span class="line"><span class="attr">test echo test:</span></span><br><span class="line">  <span class="attr">cmd.run:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">echo</span> <span class="string">&quot;111&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cwd:</span> <span class="string">/tmp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">stateful:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="attr">console.log:</span></span><br><span class="line">  <span class="attr">module.run:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">console.log:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">value:</span> <span class="string">&quot;console.log.message&quot;</span></span><br></pre></td></tr></table></figure><h2 id="pillar-schedule"><a href="#pillar-schedule" class="headerlink" title="pillar schedule"></a>pillar schedule</h2><p>如果在 pillar 的 http_json 中有 schedule，也必须直接跑模块才生效，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://xxxx.com/xxx/$&#123;minion_id&#125;/</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;schedule&quot;</span>: &#123;</span><br><span class="line">        <span class="comment"># 如下为刷新pillar，自动请求本接口</span></span><br><span class="line">        <span class="string">&quot;job_refresh&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;function&quot;</span>: <span class="string">&quot;saltutil.refresh_pillar&quot;</span>,</span><br><span class="line">            <span class="string">&quot;seconds&quot;</span>: <span class="number">60</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;an00_test_job&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;function&quot;</span>: <span class="string">&quot;console.log&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;kwargs&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: <span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;seconds&quot;</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="string">&quot;once&quot;</span>: <span class="literal">None</span></span><br><span class="line">            <span class="comment"># &quot;once&quot;: &quot;2022-01-07T11:35:00&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在-salt-模块中获取任务-jid&quot;&gt;&lt;a href=&quot;#在-salt-模块中获取任务-jid&quot; class=&quot;headerlink&quot; title=&quot;在 salt 模块中获取任务 jid&quot;&gt;&lt;/a&gt;在 salt 模块中获取任务 jid&lt;/h1&gt;&lt;blockquo</summary>
      
    
    
    
    <category term="saltstack" scheme="https://blog.an00.cn/categories/saltstack/"/>
    
    
    <category term="salt" scheme="https://blog.an00.cn/tags/salt/"/>
    
    <category term="jid" scheme="https://blog.an00.cn/tags/jid/"/>
    
  </entry>
  
  <entry>
    <title>golang 文件操作</title>
    <link href="https://blog.an00.cn/2019/12/08/golang-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>https://blog.an00.cn/2019/12/08/golang-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</id>
    <published>2019-12-08T09:53:24.000Z</published>
    <updated>2023-10-29T07:03:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="golang-文件操作"><a href="#golang-文件操作" class="headerlink" title="golang 文件操作"></a>golang 文件操作</h2><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p>在 golang 中，用 <code>os.Open()</code> 来打开文件，将返回一个文件实例 <code>*File</code> 和错误 <code>err</code>，文件实例调用 <code>Close()</code> 方法来关闭文件</p><span id="more"></span><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 打开文件</span></span><br><span class="line">    file, err := os.Open(filename)</span><br><span class="line"><span class="keyword">defer</span> file.Close()  <span class="comment">// 关闭文件</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;打开文件失败：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 文件操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写文件的打开方式又略有不同，需要另外指定参数，用 <code>os.OpenFile()</code> 打开，该方法签名如下，参数在后面写文件部分介绍</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OpenFile</span><span class="params">(name <span class="type">string</span>, flag <span class="type">int</span>, perm FileMode)</span></span> (*File, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>读取文件有多种方式，速度可以测试一下再选用  </p><ul><li><code>File.Read</code>  文件实例自带的操作  </li><li><code>bufio</code>  带缓冲的IO，速度快，读到内存中缓冲，发起读写操作时会先冲缓冲中获取数据</li><li><code>ioutil</code> 重点是方便，里面一些操作有封装 <code>bufio</code> 库<ul><li><code>ioutil.ReadAll</code></li><li><code>ioutil.Read</code></li></ul></li></ul><p>示例代码，分别是文件实例直接读取和循环、<code>bufio</code> 库读取、逐行读取、<code>ioutil</code> 库读取的内容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// file.Read读取文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">osReader</span><span class="params">(filename <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">file, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;打开文件失败：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> content [<span class="number">32</span>]<span class="type">byte</span></span><br><span class="line"><span class="comment">// 读取需要一个接收一个byte切片，返回读取数据的大小和错误</span></span><br><span class="line">n, err := file.Read(content[:])</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123; <span class="comment">// 文件结束时返回错误是EOF，n是0</span></span><br><span class="line">fmt.Println(<span class="string">&quot;文件读完了！&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;读取文件失败！&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="type">string</span>(content[:n]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bufio 读取文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bufioReader</span><span class="params">(filename <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">file, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;打开文件失败：&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"><span class="comment">//reader := bufio.NewReader(file)  // 默认大小</span></span><br><span class="line">reader := bufio.NewReaderSize(file, <span class="number">32</span>) <span class="comment">// 可以指定大小</span></span><br><span class="line">content := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">32</span>)</span><br><span class="line">n, err := reader.Read(content)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123; <span class="comment">// 文件结束时返回错误是EOF，n是0</span></span><br><span class="line">fmt.Println(<span class="string">&quot;文件读完了！&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;读取文件失败！err:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(content[:n]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fileRead循环读取文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">osReaderLoop</span><span class="params">(filename <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">file, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;打开文件失败：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> content []<span class="type">byte</span></span><br><span class="line"><span class="keyword">var</span> tmp = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">128</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">n, err := file.Read(tmp)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;文件读完了！&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;读取文件失败！err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">content = <span class="built_in">append</span>(content, tmp[:n]...) <span class="comment">// 追加到content中</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(content))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bufio逐行读取</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bufioReaderLine</span><span class="params">(filename <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">file, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;打开文件失败：&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">reader := bufio.NewReader(file) <span class="comment">// 默认大小</span></span><br><span class="line"><span class="comment">//var content []byte</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">line, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>) <span class="comment">// 指定定界符，读到该字符时返回一次，返回字符串</span></span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;文件读完了！&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;读取文件失败！err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(line)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ioutil读取文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ioutilReader</span><span class="params">(filename <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 可以直接读取文件，代码中不用另外打开，返回byte切片和err</span></span><br><span class="line">content, err := ioutil.ReadFile(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;读取文件失败！err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(<span class="type">string</span>(content)) <span class="comment">// 转字符串打印</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">filename := <span class="string">&quot;./tmp.txt&quot;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;file.Read:&quot;</span>)</span><br><span class="line">osReader(filename)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;bufio读取文件:&quot;</span>)</span><br><span class="line">bufioReader(filename)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;file.Read循环读取:&quot;</span>)</span><br><span class="line">osReaderLoop(filename)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;bufio循环读取:&quot;</span>)</span><br><span class="line">bufioReaderLine(filename)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;ioutil读取:&quot;</span>)</span><br><span class="line">ioutilReader(filename)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设有文件 <code>./tmp.txt</code>，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello world1！</span><br><span class="line">hello world2！</span><br><span class="line">hello world3！</span><br><span class="line">hello world4！</span><br><span class="line">hello world5！</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">file.Read:</span><br><span class="line">hello world1！</span><br><span class="line">hello world2！</span><br><span class="line">bufio读取文件:</span><br><span class="line">hello world1！</span><br><span class="line">hello world2！</span><br><span class="line">file.Read循环读取:</span><br><span class="line">文件读完了！</span><br><span class="line">hello world1！</span><br><span class="line">hello world2！</span><br><span class="line">hello world3！</span><br><span class="line">hello world4！</span><br><span class="line">hello world5！</span><br><span class="line">bufio循环读取:</span><br><span class="line">hello world1！</span><br><span class="line">hello world2！</span><br><span class="line">hello world3！</span><br><span class="line">hello world4！</span><br><span class="line">文件读完了！</span><br></pre></td></tr></table></figure><h3 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h3><p>需要写文件时，需要用 <code>os.OpenFile()</code> 指定操作模式打开文件，得到文件实例后进行写入，看下它的签名</p><ul><li><code>filename</code> 文件名 </li><li><code>flag</code> 是操作模式，在 <code>os</code> 包中有定义这些常量可以用，多个之间可以用 <code>|</code> 拼接</li><li><code>perm</code> 指定文件权限，为一个八进制数，读写执行分别为(<code>r</code> : 04，<code>w</code> : 02，<code>x</code> : 01)<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flag常量定义的部分</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// Exactly one of O_RDONLY, O_WRONLY, or O_RDWR must be specified.</span></span><br><span class="line">O_RDONLY <span class="type">int</span> = syscall.O_RDONLY <span class="comment">// open the file read-only.(只读)</span></span><br><span class="line">O_WRONLY <span class="type">int</span> = syscall.O_WRONLY <span class="comment">// open the file write-only.(只写)</span></span><br><span class="line">O_RDWR   <span class="type">int</span> = syscall.O_RDWR   <span class="comment">// open the file read-write.(可读可写)</span></span><br><span class="line"><span class="comment">// The remaining values may be or&#x27;ed in to control behavior.</span></span><br><span class="line">O_APPEND <span class="type">int</span> = syscall.O_APPEND <span class="comment">// append data to the file when writing.(追加写)</span></span><br><span class="line">O_CREATE <span class="type">int</span> = syscall.O_CREAT  <span class="comment">// create a new file if none exists.(不存在将创建)</span></span><br><span class="line">O_EXCL   <span class="type">int</span> = syscall.O_EXCL   <span class="comment">// used with O_CREATE, file must not exist.(与创建搭配使用，文件必须不存在)</span></span><br><span class="line">O_SYNC   <span class="type">int</span> = syscall.O_SYNC   <span class="comment">// open for synchronous I/O.(用同步IO，不写缓冲直接落盘)</span></span><br><span class="line">O_TRUNC  <span class="type">int</span> = syscall.O_TRUNC  <span class="comment">// truncate regular writable file when opened.(清空再写)</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// OpenFile 函数签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OpenFile</span><span class="params">(name <span class="type">string</span>, flag <span class="type">int</span>, perm FileMode)</span></span> (*File, <span class="type">error</span>)</span><br></pre></td></tr></table></figure></li></ul><p>写文件示例，可以看到 <code>ioutil</code> 是封装的比较方便使用，；另外 <code>bufio</code> 因为有缓冲，所以有个刷盘操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//File实例的写入操作，将创建文件，并清空</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fileInstanceWriter</span><span class="params">(filename <span class="type">string</span>, content <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 注意若多次重复写入文件，又未指定os.O_TRUNC模式，将从文件开头写，覆盖旧内容</span></span><br><span class="line"><span class="comment">// 若旧内容比新内容长，覆盖了部分长度的内容，容易导致字符不完整</span></span><br><span class="line">file, err := os.OpenFile(filename, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;打开文件失败：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">_, err = file.Write([]<span class="type">byte</span>(content)) <span class="comment">// 返回写入的长度</span></span><br><span class="line"><span class="comment">//_, err = file.WriteString(&quot;测试写入文件！&quot;) // 写入字符串，方法内自动加了[]byte(s)</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;写入文件失败：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bufio写文件示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bufioWriter</span><span class="params">(filename <span class="type">string</span>, content <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">file, err := os.OpenFile(filename, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;打开文件失败：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">if</span> _, err = writer.WriteString(content); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;写入文件失败：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = writer.Flush(); err != <span class="literal">nil</span> &#123; <span class="comment">// 将缓存内容刷盘</span></span><br><span class="line">fmt.Println(<span class="string">&quot;写入磁盘失败&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ioutil写文件示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ioutilWriter</span><span class="params">(filename <span class="type">string</span>, content <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := ioutil.WriteFile(filename, []<span class="type">byte</span>(content), <span class="number">0666</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;写入文件失败：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fileInstanceWriter(<span class="string">&quot;./fileInstanceWriter.txt&quot;</span>, <span class="string">&quot;测试写入文件！&quot;</span>)</span><br><span class="line">bufioWriter(<span class="string">&quot;./bufioWriter.txt&quot;</span>, <span class="string">&quot;测试用bufio写入文件&quot;</span>)</span><br><span class="line">ioutilWriter(<span class="string">&quot;./ioutilWriter.txt&quot;</span>, <span class="string">&quot;测试用ioutil写入文件&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚接触，备忘。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;golang-文件操作&quot;&gt;&lt;a href=&quot;#golang-文件操作&quot; class=&quot;headerlink&quot; title=&quot;golang 文件操作&quot;&gt;&lt;/a&gt;golang 文件操作&lt;/h2&gt;&lt;h3 id=&quot;打开文件&quot;&gt;&lt;a href=&quot;#打开文件&quot; class=&quot;headerlink&quot; title=&quot;打开文件&quot;&gt;&lt;/a&gt;打开文件&lt;/h3&gt;&lt;p&gt;在 golang 中，用 &lt;code&gt;os.Open()&lt;/code&gt; 来打开文件，将返回一个文件实例 &lt;code&gt;*File&lt;/code&gt; 和错误 &lt;code&gt;err&lt;/code&gt;，文件实例调用 &lt;code&gt;Close()&lt;/code&gt; 方法来关闭文件&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="https://blog.an00.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>一首喜欢的诗</title>
    <link href="https://blog.an00.cn/2019/11/03/%E4%B8%80%E9%A6%96%E5%96%9C%E6%AC%A2%E7%9A%84%E8%AF%97/"/>
    <id>https://blog.an00.cn/2019/11/03/%E4%B8%80%E9%A6%96%E5%96%9C%E6%AC%A2%E7%9A%84%E8%AF%97/</id>
    <published>2019-11-03T08:50:34.000Z</published>
    <updated>2020-05-17T03:02:36.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="春江花夜月"><a href="#春江花夜月" class="headerlink" title="春江花夜月"></a>春江花夜月</h2><p>春江潮水连海平，海上明月共潮生。</p><p>滟滟随波千万里，何处春江无月明！</p><p>江流宛转绕芳甸，月照花林皆似霰；</p><p>空里流霜不觉飞，汀上白沙看不见。</p><p>江天一色无纤尘，皎皎空中孤月轮。</p><p>江畔何人初见月？江月何年初照人？</p><p>人生代代无穷已，江月年年望相似。</p><p>不知江月待何人，但见长江送流水。</p><p>白云一片去悠悠，青枫浦上不胜愁。</p><p>谁家今夜扁舟子？何处相思明月楼？</p><p>可怜楼上月徘徊，应照离人妆镜台。</p><p>玉户帘中卷不去，捣衣砧上拂还来。</p><p>此时相望不相闻，愿逐月华流照君。</p><p>鸿雁长飞光不度，鱼龙潜跃水成文。</p><p>昨夜闲潭梦落花，可怜春半不还家。</p><p>江水流春去欲尽，江潭落月复西斜。</p><p>斜月沉沉藏海雾，碣石潇湘无限路。</p><p>不知趁月几人归，落月摇情满江树。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;春江花夜月&quot;&gt;&lt;a href=&quot;#春江花夜月&quot; class=&quot;headerlink&quot; title=&quot;春江花夜月&quot;&gt;&lt;/a&gt;春江花夜月&lt;/h2&gt;&lt;p&gt;春江潮水连海平，海上明月共潮生。&lt;/p&gt;
&lt;p&gt;滟滟随波千万里，何处春江无月明！&lt;/p&gt;
&lt;p&gt;江流宛转绕芳甸，月照</summary>
      
    
    
    
    <category term="古诗词" scheme="https://blog.an00.cn/categories/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>kubernetes-1.15.3-installation</title>
    <link href="https://blog.an00.cn/2019/10/27/kubernetes-1-15-3-installation/"/>
    <id>https://blog.an00.cn/2019/10/27/kubernetes-1-15-3-installation/</id>
    <published>2019-10-27T11:13:23.000Z</published>
    <updated>2023-10-29T07:04:21.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><blockquote><p>kubernetes 二进制安装</p></blockquote><h3 id="1-集群信息"><a href="#1-集群信息" class="headerlink" title="1. 集群信息"></a>1. 集群信息</h3><blockquote><p>系统：CentOS Linux release 7.6.1810 (Core) </p><p>内核：3.10.0-957.27.2.el7.x86_64</p></blockquote><p>机器和服务分部，master 也计划安装上 kubelet、kube-proxy、docker、flannel 这些</p><span id="more"></span><table><thead><tr><th>主机名</th><th>IP</th><th>集群角色</th><th>服务</th></tr></thead><tbody><tr><td>master-01</td><td>172.16.10.20</td><td>master</td><td>etcd、Apiserver、ControllerManager、Scheduler<br />docker、flannel、kube-proxy、kubelet</td></tr><tr><td>worker-01</td><td>172.16.10.25</td><td>node</td><td>etcd、kubelet、kube-proxy、docker、flannel</td></tr><tr><td>worker-02</td><td>172.16.10.26</td><td>node</td><td>etcd、kubelet、kube-proxy、docker、flannel</td></tr></tbody></table><p>kubernetes 集群规划</p><table><thead><tr><th>配置项</th><th>值</th></tr></thead><tbody><tr><td>Cluster CIDR</td><td>10.66.0.0&#x2F;24</td></tr><tr><td>容器网段（ flannel 大网段 ）</td><td>10.99.0.0&#x2F;16</td></tr></tbody></table><h3 id="2-配置系统"><a href="#2-配置系统" class="headerlink" title="2. 配置系统"></a>2. 配置系统</h3><blockquote><p>请绑定主机名、配置 master-01 到其他机器的 ssh 等效性，集群机器都执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i &#x27;/^SELINUX=/s/enforcing/disabled/&#x27; /etc/selinux/config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭swap，若有请注释fstab中的swap挂载配置</span></span><br><span class="line">swapoff -a </span><br><span class="line">sysctl -w vm.swappiness=0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载内核模块</span></span><br><span class="line">modprobe br_netfilter</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装docker-ce-18.09，用阿里云的源，先不启动，安装完flannel配置后再启动</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum install -y docker-ce-18.09.6-3.el7</span><br></pre></td></tr></table></figure><h3 id="3-软件包"><a href="#3-软件包" class="headerlink" title="3. 软件包"></a>3. 软件包</h3><blockquote><p>这里存放在 master-01 的 &#x2F;repo 中共享给其他机器</p></blockquote><ul><li><a class="link"   href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.15.md#server-binaries" >kubernetes 1.15.3 <i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://github.com/etcd-io/etcd/releases/download/v3.3.15/etcd-v3.3.15-linux-amd64.tar.gz" >etcd 3.3.15<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://github.com/coreos/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gz" >flannel 0.11.0<i class="fas fa-external-link-alt"></i></a></li><li>docker-ce 18.09 后面 yum 安装</li></ul><h2 id="二、创建证书"><a href="#二、创建证书" class="headerlink" title="二、创建证书"></a>二、创建证书</h2><p>创建一些目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/ssl/&#123;k8s,etcd&#125;</span><br><span class="line">mkdir -p /usr/local/kubernetes/bin</span><br><span class="line">mkdir -p /etc/kubernetes</span><br><span class="line">mkdir -p /etc/&#123;etcd,kubernetes&#125;/ssl</span><br><span class="line"></span><br><span class="line">echo &#x27;export PATH=$PATH:/usr/local/kubernetes/bin/&#x27; &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>下载 <strong>cfssl</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line">chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64</span><br><span class="line">mv cfssl_linux-amd64 /usr/local/bin/cfssl</span><br><span class="line">mv cfssljson_linux-amd64 /usr/local/bin/cfssljson</span><br><span class="line">mv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo</span><br></pre></td></tr></table></figure><h3 id="1-创建-etcd-证书"><a href="#1-创建-etcd-证书" class="headerlink" title="1. 创建 etcd 证书"></a>1. 创建 etcd 证书</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">cd ~/ssl/etcd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 etcd 证书</span></span><br><span class="line">cat &lt;&lt; EOF | tee ca-config.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;signing&quot;: &#123;</span><br><span class="line">    &quot;default&quot;: &#123;</span><br><span class="line">      &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;profiles&quot;: &#123;</span><br><span class="line">      &quot;www&quot;: &#123;</span><br><span class="line">         &quot;expiry&quot;: &quot;87600h&quot;,</span><br><span class="line">         &quot;usages&quot;: [</span><br><span class="line">            &quot;signing&quot;,</span><br><span class="line">            &quot;key encipherment&quot;,</span><br><span class="line">            &quot;server auth&quot;,</span><br><span class="line">            &quot;client auth&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 CA 配置文件</span></span><br><span class="line">cat &lt;&lt; EOF | tee ca-csr.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;etcd CA&quot;,</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;Guangzhou&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;Guangzhou&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 server 证书</span></span><br><span class="line">cat &lt;&lt; EOF | tee server-csr.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;etcd&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">    &quot;172.16.10.20&quot;,</span><br><span class="line">    &quot;172.16.10.25&quot;,</span><br><span class="line">    &quot;172.16.10.26&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;Guangzhou&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;Guangzhou&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 pem 证书</span></span><br><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server</span><br></pre></td></tr></table></figure><h3 id="2-创建-kubernetes-证书"><a href="#2-创建-kubernetes-证书" class="headerlink" title="2. 创建 kubernetes 证书"></a>2. 创建 kubernetes 证书</h3><p>进入准备的临时目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/ssl/k8s</span><br></pre></td></tr></table></figure><h4 id="2-1-生成-CA-证书"><a href="#2-1-生成-CA-证书" class="headerlink" title="2.1 生成 CA 证书"></a>2.1 生成 CA 证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF | tee ca-config.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;signing&quot;: &#123;</span><br><span class="line">    &quot;default&quot;: &#123;</span><br><span class="line">      &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;profiles&quot;: &#123;</span><br><span class="line">      &quot;kubernetes&quot;: &#123;</span><br><span class="line">         &quot;expiry&quot;: &quot;87600h&quot;,</span><br><span class="line">         &quot;usages&quot;: [</span><br><span class="line">            &quot;signing&quot;,</span><br><span class="line">            &quot;key encipherment&quot;,</span><br><span class="line">            &quot;server auth&quot;,</span><br><span class="line">            &quot;client auth&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF | tee ca-csr.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;kubernetes&quot;,</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;Guangzhou&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;Guangzhou&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;k8s&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成证书</span></span><br><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br></pre></td></tr></table></figure><h4 id="2-2-生成-API-Server-证书"><a href="#2-2-生成-API-Server-证书" class="headerlink" title="2.2 生成 API Server 证书"></a>2.2 生成 API Server 证书</h4><ul><li>10.66.0.1 是计划在Apiserver中指定的 <code>service-cluster-ip-range</code> 网段第一个 ip</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF | tee server-csr.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;kubernetes&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">        &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;10.66.0.1&quot;,</span><br><span class="line">        &quot;172.16.10.20&quot;,</span><br><span class="line">        &quot;172.16.10.25&quot;,</span><br><span class="line">        &quot;172.16.10.26&quot;,</span><br><span class="line">        &quot;kubernetes&quot;,</span><br><span class="line">        &quot;kubernetes.default&quot;,</span><br><span class="line">        &quot;kubernetes.default.svc&quot;,</span><br><span class="line">        &quot;kubernetes.default.svc.cluster&quot;,</span><br><span class="line">        &quot;kubernetes.default.svc.cluster.local&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;Guangzhou&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;Guangzhou&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;k8s&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server</span><br></pre></td></tr></table></figure><h4 id="2-3-创建-Kube-Proxy-证书"><a href="#2-3-创建-Kube-Proxy-证书" class="headerlink" title="2.3 创建 Kube Proxy 证书"></a>2.3 创建 Kube Proxy 证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF | tee kube-proxy-csr.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;system:kube-proxy&quot;,</span><br><span class="line">  &quot;hosts&quot;: [],</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;Guangzhou&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;Guangzhou&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;k8s&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br></pre></td></tr></table></figure><h4 id="2-4-创建-Admin-证书"><a href="#2-4-创建-Admin-证书" class="headerlink" title="2.4 创建 Admin 证书"></a>2.4 创建 Admin 证书</h4><p>客户端连接 apiserver 的证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF | tee admin-csr.json </span><br><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;admin&quot;,</span><br><span class="line">  &quot;hosts&quot;: [],</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;Guangzhou&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;Guangzhou&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;system:masters&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成证书</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin</span><br></pre></td></tr></table></figure><h2 id="三、安装-etcd"><a href="#三、安装-etcd" class="headerlink" title="三、安装 etcd"></a>三、安装 etcd</h2><blockquote><p>集群中其他节点除配置文件外内容一致</p></blockquote><h3 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h3><p>解压 etcd 二进制文件到 <code>$PATH</code>中，复制证书到准备的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp ~/ssl/etcd/*pem /etc/etcd/ssl</span><br><span class="line"></span><br><span class="line">cd /repo</span><br><span class="line">tar xf etcd-v3.3.15-linux-amd64.tar.gz </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其他节点记得复制并创建 etcd 目录</span></span><br><span class="line">cp -a etcd-v3.3.15-linux-amd64/etcd* /usr/local/kubernetes/bin/</span><br><span class="line">mkdir -p /var/lib/etcd/</span><br></pre></td></tr></table></figure><h3 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2. 修改配置"></a>2. 修改配置</h3><p>配置文件 <code>/etc/etcd/etcd.conf</code> ，其他节点除 <code>ETCD_INITIAL_CLUSTER</code> 外的 IP 需要改成自己的</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/etcd/etcd.conf </span><br><span class="line"><span class="attr">ETCD_DATA_DIR</span>=<span class="string">&quot;/var/lib/etcd/&quot;</span></span><br><span class="line"><span class="attr">ETCD_LISTEN_PEER_URLS</span>=<span class="string">&quot;https://172.16.10.20:2380&quot;</span></span><br><span class="line"><span class="attr">ETCD_LISTEN_CLIENT_URLS</span>=<span class="string">&quot;https://172.16.10.20:2379,http://127.0.0.1:2379&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外的节点请修改为 infra2、infra3，对应 ETCD_INITIAL_CLUSTER</span></span><br><span class="line"><span class="attr">ETCD_NAME</span>=<span class="string">&quot;infra1&quot;</span></span><br><span class="line"><span class="attr">ETCD_INITIAL_ADVERTISE_PEER_URLS</span>=<span class="string">&quot;https://172.16.10.20:2380&quot;</span></span><br><span class="line"><span class="attr">ETCD_ADVERTISE_CLIENT_URLS</span>=<span class="string">&quot;https://172.16.10.20:2379&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与节点的 ETCD_NAME 对应，三个节点这个配置是相同的</span></span><br><span class="line"><span class="attr">ETCD_INITIAL_CLUSTER</span>=<span class="string">&quot;infra1=https://172.16.10.20:2380,infra2=https://172.16.10.25:2380,infra3=https://172.16.10.26:2380&quot;</span></span><br><span class="line"><span class="attr">ETCD_INITIAL_CLUSTER_TOKEN</span>=<span class="string">&quot;etcd-cluster&quot;</span></span><br><span class="line"><span class="attr">ETCD_INITIAL_CLUSTER_STATE</span>=<span class="string">&quot;new&quot;</span></span><br><span class="line"><span class="attr">ETCD_CERT_FILE</span>=<span class="string">&quot;/etc/etcd/ssl/server.pem&quot;</span></span><br><span class="line"><span class="attr">ETCD_KEY_FILE</span>=<span class="string">&quot;/etc/etcd/ssl/server-key.pem&quot;</span></span><br><span class="line"><span class="attr">ETCD_TRUSTED_CA_FILE</span>=<span class="string">&quot;/etc/etcd/ssl/ca.pem&quot;</span></span><br><span class="line"><span class="attr">ETCD_PEER_CERT_FILE</span>=<span class="string">&quot;/etc/etcd/ssl/server.pem&quot;</span></span><br><span class="line"><span class="attr">ETCD_PEER_KEY_FILE</span>=<span class="string">&quot;/etc/etcd/ssl/server-key.pem&quot;</span></span><br><span class="line"><span class="attr">ETCD_PEER_TRUSTED_CA_FILE</span>=<span class="string">&quot;/etc/etcd/ssl/ca.pem&quot;</span></span><br></pre></td></tr></table></figure><p>配置 <code>/usr/lib/systemd/system/etcd.service</code> 启动文件，集群中其他节点也是一样</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Etcd Server</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"><span class="attr">Wants</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"><span class="attr">Documentation</span>=https://github.com/coreos</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=notify</span><br><span class="line"><span class="attr">WorkingDirectory</span>=/var/lib/etcd/</span><br><span class="line"><span class="attr">EnvironmentFile</span>=-/etc/etcd/etcd.conf</span><br><span class="line"><span class="attr">ExecStart</span>=/bin/bash -c <span class="string">&quot;GOMAXPROCS=$(nproc) /usr/local/kubernetes/bin/etcd \</span></span><br><span class="line"><span class="string">    --name=\&quot;$&#123;ETCD_NAME&#125;\&quot; \</span></span><br><span class="line"><span class="string">    --cert-file=\&quot;$&#123;ETCD_CERT_FILE&#125;\&quot; \</span></span><br><span class="line"><span class="string">    --key-file=\&quot;$&#123;ETCD_KEY_FILE&#125;\&quot; \</span></span><br><span class="line"><span class="string">    --peer-cert-file=\&quot;$&#123;ETCD_PEER_CERT_FILE&#125;\&quot; \</span></span><br><span class="line"><span class="string">    --peer-key-file=\&quot;$&#123;ETCD_PEER_KEY_FILE&#125;\&quot; \</span></span><br><span class="line"><span class="string">    --trusted-ca-file=\&quot;$&#123;ETCD_TRUSTED_CA_FILE&#125;\&quot; \</span></span><br><span class="line"><span class="string">    --peer-trusted-ca-file=\&quot;$&#123;ETCD_PEER_TRUSTED_CA_FILE&#125;\&quot; \</span></span><br><span class="line"><span class="string">    --initial-advertise-peer-urls=\&quot;$&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125;\&quot; \</span></span><br><span class="line"><span class="string">    --listen-peer-urls=\&quot;$&#123;ETCD_LISTEN_PEER_URLS&#125;\&quot; \</span></span><br><span class="line"><span class="string">    --listen-client-urls=\&quot;$&#123;ETCD_LISTEN_CLIENT_URLS&#125;\&quot; \</span></span><br><span class="line"><span class="string">    --advertise-client-urls=\&quot;$&#123;ETCD_ADVERTISE_CLIENT_URLS&#125;\&quot; \</span></span><br><span class="line"><span class="string">    --initial-cluster-token=\&quot;$&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125;\&quot; \</span></span><br><span class="line"><span class="string">    --initial-cluster=\&quot;$&#123;ETCD_INITIAL_CLUSTER&#125;\&quot; \</span></span><br><span class="line"><span class="string">    --initial-cluster-state=\&quot;$&#123;ETCD_INITIAL_CLUSTER_STATE&#125;\&quot; \</span></span><br><span class="line"><span class="string">    --data-dir=\&quot;$&#123;ETCD_DATA_DIR&#125;\&quot;&quot;</span></span><br><span class="line"><span class="comment"># 如果上一个配置文件错了，并且启动失败，可以尝试把下面两行注释阻止继续重启，修复后改回来</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">5</span></span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="number">65536</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>复制配置文件到集群其他节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制完需要修改配置文件</span></span><br><span class="line">scp -r /etc/etcd worker-01:/etc/</span><br><span class="line">scp -r /etc/etcd worker-02:/etc/</span><br><span class="line"></span><br><span class="line">scp /usr/lib/systemd/system/etcd.service worker-01:/usr/lib/systemd/system/etcd.service</span><br><span class="line">scp /usr/lib/systemd/system/etcd.service worker-02:/usr/lib/systemd/system/etcd.service</span><br></pre></td></tr></table></figure><h3 id="3-启动和测试"><a href="#3-启动和测试" class="headerlink" title="3. 启动和测试"></a>3. 启动和测试</h3><p>启动 etcd 服务（<strong>注意这里需要有两个节点一起启动，单机启动会卡住</strong>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable etcd</span><br><span class="line">systemctl start etcd</span><br></pre></td></tr></table></figure><p>测试 etcd 集群状态，因为配置了证书所以需要指定很多证书路径参数，为了后面调试可以 <code>alias</code> 一个别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">etcdctl \</span><br><span class="line">--ca-file=/etc/etcd/ssl/ca.pem \</span><br><span class="line">--cert-file=/etc/etcd/ssl/server.pem \</span><br><span class="line">--key-file=/etc/etcd/ssl/server-key.pem \</span><br><span class="line">--endpoints=&quot;https://172.16.10.20:2379,\</span><br><span class="line">https://172.16.10.25:2379,\</span><br><span class="line">https://172.16.10.26:2379&quot; \</span><br><span class="line">cluster-health</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">正常输出 cluster is healthy</span></span><br><span class="line">member b15ab296f41fb90 is healthy: got healthy result from https://172.16.10.20:2379</span><br><span class="line">member 421127a297dd866e is healthy: got healthy result from https://172.16.10.25:2379</span><br><span class="line">member b7f5cc8d67090480 is healthy: got healthy result from https://172.16.10.26:2379</span><br><span class="line">cluster is healthy</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">etcdctl别名加上参数</span></span><br><span class="line">alias etcdctl=&#x27;etcdctl \</span><br><span class="line">--ca-file=/etc/etcd/ssl/ca.pem \</span><br><span class="line">--cert-file=/etc/etcd/ssl/server.pem \</span><br><span class="line">--key-file=/etc/etcd/ssl/server-key.pem \</span><br><span class="line">--endpoints=&quot;https://172.16.10.20:2379,\</span><br><span class="line">https://172.16.10.25:2379,\</span><br><span class="line">https://172.16.10.26:2379&quot; &#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次尝试，后面有其他步骤用 etcdctl 命令配置数据时，将直接用这种方式</span></span><br><span class="line">etcdctl cluster-health  </span><br></pre></td></tr></table></figure><p>有上面的 <code>cluster is healthy</code> 说明我们的 etcd  集群就完成了</p><h2 id="四、安装-flannel"><a href="#四、安装-flannel" class="headerlink" title="四、安装 flannel"></a>四、安装 flannel</h2><blockquote><p>worker 节点都安装 flannel ，它在集群中的作用是让不同 docker host 之间的容器互相通信</p></blockquote><h3 id="1-准备-1"><a href="#1-准备-1" class="headerlink" title="1. 准备"></a>1. 准备</h3><p>解压软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /repo</span><br><span class="line">tar xf flannel-v0.11.0-linux-amd64.tar.gz</span><br><span class="line">cp -a flanneld mk-docker-opts.sh /usr/local/kubernetes/bin/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发送到 worker 节点</span></span><br><span class="line">scp  flanneld mk-docker-opts.sh worker-01:/usr/local/kubernetes/bin/</span><br><span class="line">scp  flanneld mk-docker-opts.sh worker-02:/usr/local/kubernetes/bin/</span><br></pre></td></tr></table></figure><h3 id="2-修改配置-1"><a href="#2-修改配置-1" class="headerlink" title="2. 修改配置"></a>2. 修改配置</h3><blockquote><p>10.99.0.0&#x2F;16 对应我们最开始规划的 Cluster IP，这个子网必须是 16 位地址</p></blockquote><p>创建网络配置，所有的 flannel 节点会在 10.99.0.0&#x2F;16 下创建一个 24 位的子网，作为本机的网段，将在后面提供给 docker 中运行的 Pod 使用</p><p>这里使用 <code>host-gw</code> 的方式，另外可以配置 <code>vxlan</code> ，可以详细了解它们的差异</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建网络配置，<span class="string">&quot;/kubernetes/network/config&quot;</span>将在 flannel 配置文件中用到</span></span><br><span class="line">etcdctl mk /kubernetes/network/config \</span><br><span class="line">&#x27;&#123;&quot;Network&quot;:&quot;10.99.0.0/16&quot;,&quot;SubnetLen&quot;:24,&quot;Backend&quot;:&#123;&quot;Type&quot;:&quot;host-gw&quot;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>修改 <code>/etc/sysconfig/flanneld</code> 配置文件，指定 etcd 地址和证书位置</p><ul><li>如果是多网卡环境，则需要在 <code>FLANNEL_OPTIONS</code> 中增加指定的外网出口的网卡，例如 <code>-iface=ens33</code></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Flanneld configuration options  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etcd url location.  Point this to the server where etcd runs</span></span><br><span class="line"><span class="attr">FLANNEL_ETCD_ENDPOINTS</span>=<span class="string">&quot;https://172.16.10.20:2379,https://172.16.10.25:2379,https://172.16.10.26:2379&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面配置网络时，存在 etcd 中的 key 名</span></span><br><span class="line"><span class="attr">FLANNEL_ETCD_PREFIX</span>=<span class="string">&quot;/kubernetes/network&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Any additional options that you want to pass</span></span><br><span class="line"><span class="attr">FLANNEL_OPTIONS</span>=<span class="string">&quot;-etcd-cafile=/etc/etcd/ssl/ca.pem -etcd-certfile=/etc/etcd/ssl/server.pem -etcd-keyfile=/etc/etcd/ssl/server-key.pem&quot;</span></span><br></pre></td></tr></table></figure><p>配置 <code>/usr/lib/systemd/system/flanneld.service</code> 启动文件</p><ul><li>flannel 启动后将执行 <code>mk-docker-opts.sh</code> 把网段信息写入到 <code>cat /run/flannel/docker</code> 中，后面docker启动的时候会按文件中的变量配置 docker0 网桥</li><li>运行需要 root 权限</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Flanneld overlay address etcd agent</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"><span class="attr">Wants</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"><span class="attr">After</span>=etcd.service</span><br><span class="line"><span class="attr">Before</span>=docker.service</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=notify</span><br><span class="line"><span class="attr">EnvironmentFile</span>=/etc/sysconfig/flanneld</span><br><span class="line"><span class="attr">EnvironmentFile</span>=-/etc/sysconfig/docker-network</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/kubernetes/bin/flanneld -etcd-endpoints=<span class="variable">$&#123;FLANNEL_ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">            <span class="attr">-etcd-prefix</span>=<span class="variable">$&#123;FLANNEL_ETCD_PREFIX&#125;</span> <span class="variable">$FLANNEL_OPTIONS</span></span><br><span class="line"><span class="attr">ExecStartPost</span>=/usr/local/kubernetes/bin/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/docker</span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br><span class="line"><span class="attr">WantedBy</span>=docker.service</span><br></pre></td></tr></table></figure><p>发送配置到 worker 节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scp /etc/sysconfig/flanneld worker-01:/etc/sysconfig/ </span><br><span class="line">scp /etc/sysconfig/flanneld worker-02:/etc/sysconfig/ </span><br><span class="line"></span><br><span class="line">scp /usr/lib/systemd/system/flanneld.service worker-01:/usr/lib/systemd/system/</span><br><span class="line">scp /usr/lib/systemd/system/flanneld.service worker-02:/usr/lib/systemd/system/</span><br></pre></td></tr></table></figure><h3 id="3-启动和测试-1"><a href="#3-启动和测试-1" class="headerlink" title="3. 启动和测试"></a>3. 启动和测试</h3><p>启动所有节点中的 flannel 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start flanneld.service</span><br><span class="line">systemctl enable flanneld.service </span><br></pre></td></tr></table></figure><p>再次看下 etcd 中的变化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">etcdctl ls /kubernetes/network/subnets</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下，这里三个节点都安装有 flannel</span></span><br><span class="line">/kubernetes/network/subnets/10.99.76.0-24</span><br><span class="line">/kubernetes/network/subnets/10.99.41.0-24</span><br><span class="line">/kubernetes/network/subnets/10.99.59.0-24</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里再看 master-01 的两个 flannel 文件，和 etcd 中生成的对应，docker 服务将要用这里的变量</span></span><br><span class="line">cat /run/flannel/subnet.env     </span><br><span class="line">FLANNEL_NETWORK=10.99.0.0/16</span><br><span class="line">FLANNEL_SUBNET=10.99.41.1/24</span><br><span class="line">FLANNEL_MTU=1500</span><br><span class="line">FLANNEL_IPMASQ=false</span><br><span class="line"></span><br><span class="line">cat /run/flannel/docker </span><br><span class="line">DOCKER_OPT_BIP=&quot;--bip=10.99.41.1/24&quot;</span><br><span class="line">DOCKER_OPT_IPMASQ=&quot;--ip-masq=true&quot;</span><br><span class="line">DOCKER_OPT_MTU=&quot;--mtu=1500&quot;</span><br><span class="line">DOCKER_NETWORK_OPTIONS=&quot; --bip=10.99.41.1/24 --ip-masq=true --mtu=1500&quot;</span><br></pre></td></tr></table></figure><h3 id="4-配置-docker-服务"><a href="#4-配置-docker-服务" class="headerlink" title="4. 配置 docker 服务"></a>4. 配置 docker 服务</h3><p>前面已经准备了 flannel 给集群中的 docker host 提供网络通信，现在需要配置 docker 服务把 flannel 的网络配置应用上</p><ul><li><code>--exec-opt</code> 选项指定了 cgroup 的驱动用 systemd ，和后面 kubelet 需要一致</li><li><code>$DOCKER_NETWORK_OPTIONS</code> 是在 <code>/var/run/flannel/docker</code> 文件中的配置</li><li>另外加了一个阿里云的加速地址 <code>--registry-mirror</code></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Docker Application Container Engine</span><br><span class="line"><span class="attr">Documentation</span>=https://docs.docker.com</span><br><span class="line"><span class="attr">BindsTo</span>=containerd.service</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target firewalld.service containerd.service</span><br><span class="line"><span class="attr">Wants</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"><span class="attr">Requires</span>=docker.socket</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=notify</span><br><span class="line"><span class="comment"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class="line"><span class="comment"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class="line"><span class="comment"># for containers run by docker</span></span><br><span class="line"><span class="attr">EnvironmentFile</span>=-/var/run/flannel/docker</span><br><span class="line"><span class="attr">EnvironmentFile</span>=-/var/run/flannel/subnet.env</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock \</span><br><span class="line">          $DOCKER_NETWORK_OPTIONS \</span><br><span class="line">          --exec-opt <span class="attr">native.cgroupdriver</span>=systemd \</span><br><span class="line">          <span class="attr">--registry-mirror</span>=https://<span class="number">1</span>u1w02a0.mirror.aliyuncs.com </span><br><span class="line"><span class="attr">ExecReload</span>=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line"><span class="attr">TimeoutSec</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"></span><br><span class="line"><span class="comment"># Note that StartLimit* options were moved from &quot;Service&quot; to &quot;Unit&quot; in systemd 229.</span></span><br><span class="line"><span class="comment"># Both the old, and new location are accepted by systemd 229 and up, so using the old location</span></span><br><span class="line"><span class="comment"># to make them work for either version of systemd.</span></span><br><span class="line"><span class="attr">StartLimitBurst</span>=<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.</span></span><br><span class="line"><span class="comment"># Both the old, and new name are accepted by systemd 230 and up, so using the old name to make</span></span><br><span class="line"><span class="comment"># this option work for either version of systemd.</span></span><br><span class="line"><span class="attr">StartLimitInterval</span>=<span class="number">60</span>s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class="line"><span class="comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span><br><span class="line"><span class="attr">LimitNOFILE</span>=infinity</span><br><span class="line"><span class="attr">LimitNPROC</span>=infinity</span><br><span class="line"><span class="attr">LimitCORE</span>=infinity</span><br><span class="line"></span><br><span class="line"><span class="comment"># Comment TasksMax if your systemd version does not supports it.</span></span><br><span class="line"><span class="comment"># Only systemd 226 and above support this option.</span></span><br><span class="line"><span class="attr">TasksMax</span>=infinity</span><br><span class="line"></span><br><span class="line"><span class="comment"># set delegate yes so that systemd does not reset the cgroups of docker containers</span></span><br><span class="line"><span class="attr">Delegate</span>=<span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kill only the docker process, not all processes in the cgroup</span></span><br><span class="line"><span class="attr">KillMode</span>=process</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>复制 systemd 文件到 worker 节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp /usr/lib/systemd/system/docker.service worker-01:/usr/lib/systemd/system/</span><br><span class="line">scp /usr/lib/systemd/system/docker.service worker-02:/usr/lib/systemd/system/</span><br></pre></td></tr></table></figure><p>启动 docker 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>以 master-01 为例，检查 docker 生成的网桥地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ip addr show docker0 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下</span></span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:d8:f9:f0:6b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.99.41.1/24 brd 10.99.41.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>可以看到 10.99.41.255 与 flannel 的子网一致，到这里 docker 与 flannel 就配置完了，docker 应用上了 flannel 生成的网络信息</p><h2 id="五、安装-master-节点"><a href="#五、安装-master-节点" class="headerlink" title="五、安装 master 节点"></a>五、安装 master 节点</h2><blockquote><p>操作将在 master-01 中执行</p></blockquote><p>在 kubernetes 中， master 节点包含组件：</p><ul><li>kube-apiserver</li><li>kube-scheduler</li><li>kube-controller-manager</li></ul><p>除apiserver外都可以集群模式运行，并且通过选举产生一个工作进程，其他进程阻塞</p><p>这里的环境 master 节点有计划安装 kubelet 这些 worker 节点的进程，参考配置worker 节点部分说明</p><h3 id="1-准备-2"><a href="#1-准备-2" class="headerlink" title="1. 准备"></a>1. 准备</h3><p>解压准备好的二进制包，复制到 <code>/usr/local/kubernetes/bin/</code> 下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd /repo</span><br><span class="line">tar xf kubernetes-server-linux-amd64.tar.gz </span><br><span class="line"></span><br><span class="line">cp kubernetes/server/bin/kubectl /usr/local/kubernetes/bin/</span><br><span class="line">cp kubernetes/server/bin/kube-apiserver /usr/local/kubernetes/bin/</span><br><span class="line">cp kubernetes/server/bin/kube-scheduler /usr/local/kubernetes/bin/</span><br><span class="line">cp kubernetes/server/bin/kube-controller-manager /usr/local/kubernetes/bin/</span><br><span class="line">cp kubernetes/server/bin/kubelet /usr/local/kubernetes/bin/                </span><br><span class="line">cp kubernetes/server/bin/kube-proxy /usr/local/kubernetes/bin/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制证书文件</span></span><br><span class="line">cp ~/ssl/k8s/*.pem /etc/kubernetes/ssl/</span><br></pre></td></tr></table></figure><h3 id="2-apiserver"><a href="#2-apiserver" class="headerlink" title="2. apiserver"></a>2. apiserver</h3><p>创建 <strong>TLS Bootstrap Token</strong>，用于 Token 认证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;$(head -c 16 /dev/urandom | od -An -t x | tr -d &#x27; &#x27;),kubelet-bootstrap,10001,system:kubelet-bootstrap&quot; &gt; /etc/kubernetes/token.csv</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件内容类似</span></span><br><span class="line">47ec1167391bc238ccdd44367465eb08,kubelet-bootstrap,10001,system:kubelet-bootstrap</span><br></pre></td></tr></table></figure><p>创建配置文件 <code>/etc/kubernetes/kube-apiserver </code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">KUBE_APISERVER_OPTS</span>=<span class="string">&quot;--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--etcd-servers=https://172.16.10.20:2379,https://172.16.10.25:2379,https://172.16.10.26:2379 \</span></span><br><span class="line"><span class="string">--bind-address=172.16.10.20 \</span></span><br><span class="line"><span class="string">--secure-port=6443 \</span></span><br><span class="line"><span class="string">--advertise-address=172.16.10.20 \</span></span><br><span class="line"><span class="string">--allow-privileged=true \</span></span><br><span class="line"><span class="string">--service-cluster-ip-range=10.66.0.0/24 \</span></span><br><span class="line"><span class="string">--enable-admission-plugins=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota,NodeRestriction \</span></span><br><span class="line"><span class="string">--authorization-mode=RBAC,Node \</span></span><br><span class="line"><span class="string">--enable-bootstrap-token-auth \</span></span><br><span class="line"><span class="string">--token-auth-file=/etc/kubernetes/token.csv \</span></span><br><span class="line"><span class="string">--service-node-port-range=30000-50000 \</span></span><br><span class="line"><span class="string">--tls-cert-file=/etc/kubernetes/ssl/server.pem \</span></span><br><span class="line"><span class="string">--tls-private-key-file=/etc/kubernetes/ssl/server-key.pem \</span></span><br><span class="line"><span class="string">--client-ca-file=/etc/kubernetes/ssl/ca.pem \</span></span><br><span class="line"><span class="string">--service-account-key-file=/etc/kubernetes/ssl/ca-key.pem \</span></span><br><span class="line"><span class="string">--etcd-cafile=/etc/etcd/ssl/ca.pem \</span></span><br><span class="line"><span class="string">--etcd-certfile=/etc/etcd/ssl/server.pem \</span></span><br><span class="line"><span class="string">--etcd-keyfile=/etc/etcd/ssl/server-key.pem \</span></span><br><span class="line"><span class="string">--kubelet-client-certificate=/etc/kubernetes/ssl/server.pem \</span></span><br><span class="line"><span class="string">--kubelet-client-key=/etc/kubernetes/ssl/server-key.pem&quot;</span></span><br></pre></td></tr></table></figure><p>创建 systemd 文件 <code>/usr/lib/systemd/system/kube-apiserver.service</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Kubernetes API Service</span><br><span class="line"><span class="attr">Documentation</span>=https://github.com/kubernetes/kubernetes</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"><span class="attr">After</span>=etcd.service</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">EnvironmentFile</span>=-/etc/kubernetes/kube-apiserver</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/kubernetes/bin/kube-apiserver <span class="variable">$KUBE_APISERVER_OPTS</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">Type</span>=notify</span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="number">65536</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>启动 apiserver ，注意看下状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kube-apiserver</span><br><span class="line">systemctl start kube-apiserver</span><br><span class="line">systemctl status kube-apiserver</span><br></pre></td></tr></table></figure><h3 id="3-scheduler"><a href="#3-scheduler" class="headerlink" title="3. scheduler"></a>3. scheduler</h3><p>创建配置文件 <code>/etc/kubernetes/kube-scheduler</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">KUBE_SCHEDULER_OPTS</span>=<span class="string">&quot;--logtostderr=true --v=4 --master=127.0.0.1:8080 --leader-elect&quot;</span></span><br></pre></td></tr></table></figure><p>创建 systemd 文件 <code>/usr/lib/systemd/system/kube-scheduler.service</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Kubernetes Scheduler Plugin</span><br><span class="line"><span class="attr">Documentation</span>=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">EnvironmentFile</span>=-/etc/kubernetes/config</span><br><span class="line"><span class="attr">EnvironmentFile</span>=-/etc/kubernetes/scheduler</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/kubernetes/bin/kube-scheduler <span class="variable">$KUBE_SCHEDULER_OPTS</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="number">65536</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>启动 scheduler 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start kube-scheduler</span><br><span class="line">systemctl enable kube-scheduler</span><br><span class="line">systemctl status kube-scheduler</span><br></pre></td></tr></table></figure><h3 id="4-controller-manager"><a href="#4-controller-manager" class="headerlink" title="4. controller-manager"></a>4. controller-manager</h3><p>创建配置文件 <code>/etc/kubernetes/kube-controller-manager </code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">KUBE_CONTROLLER_MANAGER_OPTS</span>=<span class="string">&quot;--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--master=127.0.0.1:8080 \</span></span><br><span class="line"><span class="string">--leader-elect=true \</span></span><br><span class="line"><span class="string">--address=127.0.0.1 \</span></span><br><span class="line"><span class="string">--service-cluster-ip-range=10.66.0.0/24 \</span></span><br><span class="line"><span class="string">--cluster-name=kubernetes \</span></span><br><span class="line"><span class="string">--cluster-signing-cert-file=/etc/kubernetes/ssl/ca.pem \</span></span><br><span class="line"><span class="string">--cluster-signing-key-file=/etc/kubernetes/ssl/ca-key.pem \</span></span><br><span class="line"><span class="string">--root-ca-file=/etc/kubernetes/ssl/ca.pem \</span></span><br><span class="line"><span class="string">--service-account-private-key-file=/etc/kubernetes/ssl/ca-key.pem&quot;</span></span><br></pre></td></tr></table></figure><p>创建 systemd 文件 <code>/usr/lib/systemd/system/kube-controller-manager.service</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Kubernetes Controller Manager</span><br><span class="line"><span class="attr">Documentation</span>=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">EnvironmentFile</span>=-/etc/kubernetes/kube-controller-manager</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/kubernetes/bin/kube-controller-manager <span class="variable">$KUBE_CONTROLLER_MANAGER_OPTS</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="number">65536</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start kube-controller-manager</span><br><span class="line">systemctl enable kube-controller-manager</span><br><span class="line">systemctl status kube-controller-manager</span><br></pre></td></tr></table></figure><h3 id="5-检查"><a href="#5-检查" class="headerlink" title="5. 检查"></a>5. 检查</h3><p>在 master 中用 kubectl 命令查看集群信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl cluster-info</span>    </span><br><span class="line">Kubernetes master is running at http://localhost:8080</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use &#x27;kubectl cluster-info dump&#x27;.</span><br></pre></td></tr></table></figure><p>查看集群的服务状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get cs</span>    </span><br><span class="line">NAME                 STATUS    MESSAGE             ERROR</span><br><span class="line">controller-manager   Healthy   ok                  </span><br><span class="line">scheduler            Healthy   ok                  </span><br><span class="line">etcd-0               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;   </span><br><span class="line">etcd-2               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;   </span><br><span class="line">etcd-1               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;   </span><br></pre></td></tr></table></figure><h3 id="6-其他"><a href="#6-其他" class="headerlink" title="6. 其他"></a>6. 其他</h3><ul><li><p>kubectl 命令补全，支持 zsh 和 bash，在bash中请先安装 bash-completion ，然后执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl completion bash &gt; /etc/bash_completion.d/kubectl.bash</span><br><span class="line">source /etc/bash_completion.d/kubectl.bash </span><br></pre></td></tr></table></figure></li><li><p>kubectl 常用的查看命令</p><ul><li>-n 指定命名空间</li><li>-o 指定输出，wide显示更多的信息，支持 json 和 yaml 输出</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">kubectl get namespaces</span> </span><br><span class="line">kubectl get nodes -o wide</span><br><span class="line">kubectl get nodes -n default</span><br><span class="line"></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get rs</span><br><span class="line">kubectl get deployments</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看详情，同样适用其他资源</span></span><br><span class="line">kubectl describe nodes NODE_NAME</span><br></pre></td></tr></table></figure></li></ul><h2 id="六、安装-worker-节点"><a href="#六、安装-worker-节点" class="headerlink" title="六、安装 worker 节点"></a>六、安装 worker 节点</h2><blockquote><p>在 worker-01 和 worker-02 中安装，二进制包资源挂载了 master-01 的共享在 &#x2F;repo 目录</p><p>master 节点也可以安装</p></blockquote><p>worker 节点运行 kubernetes 中的两个组件：</p><ul><li>kubelet</li><li>kube-proxy</li></ul><p>另外 worker 节点是集群工作的主力，所以之前也安装有 docker ，并且搭配了 flannel，现在准备开始安装上面两个未安装的组件</p><p>两个 worker 节点先复制组件的二进制文件到 <code>/usr/local/kubernetes/bin/</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -a /repo/kubernetes/server/bin/&#123;kubelet,kube-proxy,kubectl&#125; /usr/local/kubernetes/bin/</span><br></pre></td></tr></table></figure><h3 id="1-创建-kubelet-bootstrap-文件"><a href="#1-创建-kubelet-bootstrap-文件" class="headerlink" title="1. 创建 kubelet bootstrap 文件"></a>1. 创建 kubelet bootstrap 文件</h3><p>在 master 中执行，用到之前生成的 token ，再看一下它</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/kubernetes/token.csv</span><br><span class="line">47ec1167391bc238ccdd44367465eb08,kubelet-bootstrap,10001,system:kubelet-bootstrap</span><br></pre></td></tr></table></figure><p>下面命令有个 token 变量是上面文件的 token 部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">token.csv</span></span><br><span class="line">BOOTSTRAP_TOKEN=47ec1167391bc238ccdd44367465eb08</span><br><span class="line">KUBE_APISERVER=&quot;https://172.16.10.20:6443&quot;</span><br><span class="line"></span><br><span class="line">BOOTSTRAP_TOKEN=c2ea7340a258997471f1dba5c0cef395</span><br><span class="line">KUBE_APISERVER=&quot;https://172.16.10.20:6443&quot;</span><br><span class="line"></span><br><span class="line">cd /etc/kubernetes/ssl</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置集群参数</span></span><br><span class="line">kubectl config set-cluster kubernetes --certificate-authority=./ca.pem \</span><br><span class="line">    --embed-certs=true --server=$&#123;KUBE_APISERVER&#125; \</span><br><span class="line">    --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置客户端认证参数</span></span><br><span class="line">kubectl config set-credentials kubelet-bootstrap \</span><br><span class="line">    --token=$&#123;BOOTSTRAP_TOKEN&#125; \</span><br><span class="line">    --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置上下文参数</span></span><br><span class="line">kubectl config set-context default \</span><br><span class="line">    --cluster=kubernetes \</span><br><span class="line">    --user=kubelet-bootstrap \</span><br><span class="line">    --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认上下文</span></span><br><span class="line">kubectl config use-context default --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建kube-proxy kubeconfig文件</span></span><br><span class="line">kubectl config set-cluster kubernetes \</span><br><span class="line">    --certificate-authority=./ca.pem \</span><br><span class="line">    --embed-certs=true \</span><br><span class="line">    --server=$&#123;KUBE_APISERVER&#125; \</span><br><span class="line">    --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">kubectl config set-credentials kube-proxy \</span><br><span class="line">    --client-certificate=./kube-proxy.pem \</span><br><span class="line">    --client-key=./kube-proxy-key.pem \</span><br><span class="line">    --embed-certs=true \</span><br><span class="line">    --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">kubectl config set-context default \</span><br><span class="line">    --cluster=kubernetes \</span><br><span class="line">    --user=kube-proxy \</span><br><span class="line">    --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig</span><br></pre></td></tr></table></figure><p>将 kubelet-bootstrap 用户绑定到系统集群角色</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrolebinding kubelet-bootstrap \</span><br><span class="line">  --clusterrole=system:node-bootstrapper \</span><br><span class="line">  --user=kubelet-bootstrap</span><br></pre></td></tr></table></figure><p>将 master-01 中的 <code>/etc/kubernetes/ssl</code> 复制到 worker 节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /etc/kubernetes/ssl/ worker-01:/etc/kubernetes/</span><br><span class="line">scp -r /etc/kubernetes/ssl/ worker-02:/etc/kubernetes/</span><br></pre></td></tr></table></figure><h3 id="2-配置-kubelet"><a href="#2-配置-kubelet" class="headerlink" title="2. 配置 kubelet"></a>2. 配置 kubelet</h3><blockquote><p>未说明将是在 worker 节点执行命令，两个 worker 节点都要改的喔，这里以 worker-01 为例</p></blockquote><p>创建 kubelet 参数配置文件 <code>/etc/kubernetes/kubelet.config</code> 另外的机器修改 <code>address</code> 为自己 IP，其他一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">YAML</span></span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">address: 172.16.10.25</span><br><span class="line">port: 10250</span><br><span class="line">readOnlyPort: 10255</span><br><span class="line">cgroupDriver: cgroupfs</span><br><span class="line">clusterDNS: [&quot;10.66.0.2&quot;]</span><br><span class="line">clusterDomain: cluster.local.</span><br><span class="line">failSwapOn: false</span><br><span class="line">authentication:</span><br><span class="line">  anonymous:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure><p>创建配置文件 <code>/etc/kubernetes/kubelet</code> ，<code>hostname-override</code> 修改成本机 IP</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">KUBELET_OPTS</span>=<span class="string">&quot;--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--hostname-override=172.16.10.25 \</span></span><br><span class="line"><span class="string">--kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span></span><br><span class="line"><span class="string">--bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</span></span><br><span class="line"><span class="string">--config=/etc/kubernetes/kubelet.config \</span></span><br><span class="line"><span class="string">--cert-dir=/etc/kubernetes/ssl \</span></span><br><span class="line"><span class="string">--pod-infra-container-image=k8s.gcr.io/pause-amd64:3.1 \</span></span><br><span class="line"><span class="string">--client-ca-file=/etc/kubernetes/ssl/ca.pem&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>/etc/kubernetes/kubelet.kubeconfig</code> 文件开始是不存在的，等后面 master 通过 CSR 后，会产生它和 ssl 目录下的一些证书</li><li><code>k8s.gcr.io/pause-amd64:3.1</code> 是 Pod 的基础镜像，在谷歌的 gcr 仓库，在 kubelet 启动的时候会从镜像仓库拉取，正常应该无法拉取到。这里同步了一份，可以去这里下载 <a class="link"   href="https://kubernets-1256221910.cos.ap-chengdu.myqcloud.com/k8s.gcr.io_pause-amd64_3.1.tgz" >k8s.gcr.io_pause-amd64_3.1.tgz<i class="fas fa-external-link-alt"></i></a> ，下载后<strong>先</strong> <code>docker load -i k8s.gcr.io_pause-amd64_3.1.tgz</code> 导入节点的 docker 中，<strong>再</strong>启动 kubelet 。</li></ul><ul><li><code>--pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google-containers/pause-amd64:3.0</code> 阿里云的镜像</li></ul><p>创建 systemd 文件 <code>/usr/lib/systemd/system/kubelet.service</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Kubernetes Kubelet Server</span><br><span class="line"><span class="attr">Documentation</span>=https://github.com/kubernetes/kubernetes</span><br><span class="line"><span class="attr">After</span>=docker.service</span><br><span class="line"><span class="attr">Requires</span>=docker.service</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">EnvironmentFile</span>=/etc/kubernetes/kubelet</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/kubernetes/bin/kubelet <span class="variable">$KUBELET_OPTS</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">KillMode</span>=process</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kubelet</span><br><span class="line">systemctl start kubelet</span><br><span class="line">systemctl status kubelet</span><br></pre></td></tr></table></figure><h3 id="3-通过-kubelet-CSR-请求"><a href="#3-通过-kubelet-CSR-请求" class="headerlink" title="3. 通过 kubelet CSR 请求"></a>3. 通过 kubelet CSR 请求</h3><p>如果无异常，现在 kubelet 已经运行起来了，kubelet 通过 <code>/etc/kubernetes/ssl/bootstrap.kubeconfig</code> 知道怎么去连集群 master 上的 apiserver ，这时候它就会请求加入集群</p><p>查看并批准 kubelet 的 CSR 请求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get csr</span></span><br><span class="line">NAME                                                   AGE     REQUESTOR           CONDITION</span><br><span class="line">node-csr-73s9OQf5HNcjoD7RPIJsrwXsrx4VPC89lKZdhK5i_Mk   11m     kubelet-bootstrap   Pending</span><br><span class="line">node-csr-U5TpUTOu5nR_L-8Ooccbv5hj4LKEeLsMzpFkbvC8UII   5m41s   kubelet-bootstrap   Pending</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">批准对应NAME的CSR</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl certificate approve node-csr-73s9OQf5HNcjoD7RPIJsrwXsrx4VPC89lKZdhK5i_Mk</span></span><br><span class="line">certificatesigningrequest.certificates.k8s.io/node-csr-73s9OQf5HNcjoD7RPIJsrwXsrx4VPC89lKZdhK5i_Mk approved</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl certificate approve node-csr-U5TpUTOu5nR_L-8Ooccbv5hj4LKEeLsMzpFkbvC8UII</span></span><br><span class="line">certificatesigningrequest.certificates.k8s.io/node-csr-U5TpUTOu5nR_L-8Ooccbv5hj4LKEeLsMzpFkbvC8UII approved</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次查看CSR已经通过了</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get csr</span></span><br><span class="line">NAME                                                   AGE     REQUESTOR           CONDITION</span><br><span class="line">node-csr-73s9OQf5HNcjoD7RPIJsrwXsrx4VPC89lKZdhK5i_Mk   13m     kubelet-bootstrap   Approved,Issued</span><br><span class="line">node-csr-U5TpUTOu5nR_L-8Ooccbv5hj4LKEeLsMzpFkbvC8UII   7m31s   kubelet-bootstrap   Approved,Issued</span><br></pre></td></tr></table></figure><p>查看集群中的节点，发现无法看出哪个是 master 哪个是 worker 节点，<code>ROLES</code> 都是 <code>none</code>（据说是手动安装的问题，kubeadm会有 master 的角色标记）</p><p>其实 <code>ROLES</code> 也是一个 LABEL 不过是一个特殊的 LABEL，看下如何添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get nodes</span> </span><br><span class="line">NAME           STATUS   ROLES    AGE   VERSION</span><br><span class="line">172.16.10.20   Ready    &lt;none&gt;   58m   v1.15.3</span><br><span class="line">172.16.10.25   Ready    &lt;none&gt;   62m   v1.15.3</span><br><span class="line">172.16.10.26   Ready    &lt;none&gt;   62m   v1.15.3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">尝试将 worker-01 的 roles 改成 worker</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl label node 172.16.10.25 node-role.kubernetes.io/worker=worker</span></span><br><span class="line">node/172.16.10.25 labeled</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get nodes</span> </span><br><span class="line">NAME           STATUS   ROLES    AGE   VERSION</span><br><span class="line">172.16.10.20   Ready    &lt;none&gt;   63m   v1.15.3</span><br><span class="line">172.16.10.25   Ready    worker   67m   v1.15.3</span><br><span class="line">172.16.10.26   Ready    &lt;none&gt;   67m   v1.15.3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">另外的节点也改一下</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl label node 172.16.10.26 node-role.kubernetes.io/worker=worker</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl label node 172.16.10.20 node-role.kubernetes.io/master=master</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get nodes</span> </span><br><span class="line">NAME           STATUS   ROLES    AGE   VERSION</span><br><span class="line">172.16.10.20   Ready    master   65m   v1.15.3</span><br><span class="line">172.16.10.25   Ready    worker   69m   v1.15.3</span><br><span class="line">172.16.10.26   Ready    worker   69m   v1.15.3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果配置错了，比如把worker-02 26这个节点误操作标记成了 master，可以如下操作清除，再重新标记</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl label node 172.16.10.26 node-role.kubernetes.io/master-</span></span><br></pre></td></tr></table></figure><h3 id="4-配置-kube-proxy"><a href="#4-配置-kube-proxy" class="headerlink" title="4. 配置 kube-proxy"></a>4. 配置 kube-proxy</h3><blockquote><p>worker 节点安装</p></blockquote><p>创建配置文件 <code>/etc/kubernetes/kube-proxy </code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">KUBE_PROXY_OPTS</span>=<span class="string">&quot;--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--hostname-override=172.16.10.25 \</span></span><br><span class="line"><span class="string">--cluster-cidr=10.66.0.0/24 \</span></span><br><span class="line"><span class="string">--kubeconfig=/etc/kubernetes/ssl/kube-proxy.kubeconfig&quot;</span></span><br></pre></td></tr></table></figure><p>创建systemd 文件 <code>/usr/lib/systemd/system/kube-proxy.service</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Kubernetes Kube-Proxy Server</span><br><span class="line"><span class="attr">Documentation</span>=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">EnvironmentFile</span>=-/etc/kubernetes/kube-proxy</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/kubernetes/bin/kube-proxy <span class="variable">$KUBE_PROXY_OPTS</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="number">65536</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kube-proxy</span><br><span class="line">systemctl start kube-proxy</span><br><span class="line">systemctl status kube-proxy</span><br></pre></td></tr></table></figure><h2 id="七、测试集群"><a href="#七、测试集群" class="headerlink" title="七、测试集群"></a>七、测试集群</h2><blockquote><p>一般主节点的 kubectl 会配置可以连接集群，下面在执行 kubectl 命令时，默认是 master 节点</p></blockquote><h3 id="1-创建-kubectl-kubeconfig-文件"><a href="#1-创建-kubectl-kubeconfig-文件" class="headerlink" title="1. 创建 kubectl kubeconfig 文件"></a>1. 创建 kubectl kubeconfig 文件</h3><blockquote><p>这个没发现具体啥用处</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">export KUBE_APISERVER=&quot;https://172.16.10.20:6443&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置集群参数</span></span><br><span class="line">kubectl config set-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=true \</span><br><span class="line">  --server=$&#123;KUBE_APISERVER&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置客户端认证参数</span></span><br><span class="line">kubectl config set-credentials admin \</span><br><span class="line">  --client-certificate=/etc/kubernetes/ssl/admin.pem \</span><br><span class="line">  --embed-certs=true \</span><br><span class="line">  --client-key=/etc/kubernetes/ssl/admin-key.pem</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置上下文参数</span></span><br><span class="line">kubectl config set-context kubernetes \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=admin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认上下文</span></span><br><span class="line">kubectl config use-context kubernetes</span><br></pre></td></tr></table></figure><h3 id="2-创建资源"><a href="#2-创建资源" class="headerlink" title="2. 创建资源"></a>2. 创建资源</h3><p>测试 kubernetes 的方式可以是创建一个资源观察一下，在 master-01 中操作，创建一个运行 nginx 的  <code>deployment</code> 资源，worker 节点会去拉取 nginx 镜像运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl run nginx --replicas=2 --labels=<span class="string">&quot;run=load-balancer-example&quot;</span> --image=nginx  --port=80</span></span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed in a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">deployment.apps/nginx created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get deployments</span></span><br><span class="line">NAME    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx   0/2     2            0           2m14s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get pods</span>       </span><br><span class="line">NAME                     READY   STATUS              RESTARTS   AGE</span><br><span class="line">nginx-5c47ff5dd6-98qbn   0/1     ContainerCreating   0          2m56s</span><br><span class="line">nginx-5c47ff5dd6-lgjjv   0/1     ContainerCreating   0          2m56s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">已经运行在集群中了</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get pods -o wide</span></span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP           NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-5c47ff5dd6-98qbn   1/1     Running   0          5m37s   10.99.41.2   172.16.10.20   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-5c47ff5dd6-lgjjv   1/1     Running   0          5m37s   10.99.76.2   172.16.10.26   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="3-安装-dashboard"><a href="#3-安装-dashboard" class="headerlink" title="3. 安装 dashboard"></a>3. 安装 dashboard</h3><blockquote><p><a class="link"   href="https://github.com/kubernetes/dashboard" >dashboard 项目地址<i class="fas fa-external-link-alt"></i></a></p><p>在 master-01 中安装</p></blockquote><p>kubernetes 的 addons 中包含一个 dashboard ，它是一个 web 页面，为集群提供了一些基础的资源可视化、状态查看等功能，现在，在集群中安装它。</p><h4 id="3-1-创建资源"><a href="#3-1-创建资源" class="headerlink" title="3.1 创建资源"></a>3.1 创建资源</h4><p>在项目中，有说明安装方式，提供了一个 yaml 文件，在集群中用 <code>kubectl apply</code>  就算是安装完了。需要注意的是，在这个资源文件里面 dashboard 镜像，指定的是位于 gcr 中的镜像，如果访问 google 的镜像站有问题，可以把这个文件中的 dashboard 镜像地址改一下，国内的镜像站有转存，比如阿里云就有</p><p>先看安装的方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果网络正常，可按官网的来，一步到位</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span></span><br></pre></td></tr></table></figure><p>如果访问google镜像站网络不好，我们改用国内镜像站后创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/k8s/dashboard</span><br><span class="line">cd ~/k8s/dashboard</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 k8s.gcr.io 为阿里云中 google 容器地址</span></span><br><span class="line">curl https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml &gt; dashboard.yaml</span><br><span class="line"></span><br><span class="line">sed -i &quot;s#k8s.gcr.io#registry.cn-hangzhou.aliyuncs.com/google_containers#gp&quot; ./dashboard.yaml</span><br><span class="line"></span><br><span class="line">kubectl apply -f dashboard.yaml </span><br></pre></td></tr></table></figure><p>创建后查看一下，该资源创建的时候指定了 namespace ，我们通过它指定的 kube-system 命名空间可以看到资源情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployments -n kube-system</span><br><span class="line">kubectl get service -n kube-system</span><br><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><h4 id="3-2-创建账号和集群关系绑定"><a href="#3-2-创建账号和集群关系绑定" class="headerlink" title="3.2 创建账号和集群关系绑定"></a>3.2 创建账号和集群关系绑定</h4><p>为 dashboard 创建账号，和角色绑定关系，我们需要 账号的 token 来登陆 dashboard 页面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建service account</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl create sa dashboard-admin -n kube-system</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看token，先找到资源文件中定义生成的 secrets 名称</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get secrets -n kube-system |grep <span class="string">&quot;dashboard-admin&quot;</span> |awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span></span><br><span class="line">dashboard-admin-token-686fq    # 我这里的名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过名称获得 token，最长那一串字符</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl describe secrets -n kube-system dashboard-admin-token-686fq</span></span><br><span class="line">Name:         dashboard-admin-token-686fq</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: dashboard-admin</span><br><span class="line">              kubernetes.io/service-account.uid: a86541c1-5f1c-4b07-b84b-f9504727c203</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1371 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tNjg2ZnEiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYTg2NTQxYzEtNWYxYy00YjA3LWI4NGItZjk1MDQ3MjdjMjAzIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.JtNwe-9Gfqo9-gS1vvf8AMLzXq8y6EPuxPSIO1uGZulJMQ3soFCwCji-HILhJ8L8hwbx4_sCoThcCDIMuiWgRxcFh_4zlcxnnjEfquYinKnVVCw_jovth2EIt9CXhmV_DLjOJcNaLXzCRDvi3usLA_QjT3uTLhoyTpLKpgxNL1XsMeE12ZJIe4iOpvvS-IQ_w89fqH6zhnfsVYQS1lYabNGkpKxMLyGFY9c76NUhbZxjEYP_jan2yawLXdJnJvOrS-HCRQaU01kikZ9wk38FRzrDU4Ya1O0Vw-tMhF91_v-uJI-XC-VVRw4yG6iZWokmVi28vtcEo-srBDmOp0NPGw</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-4-创建和安装访问证书"><a href="#3-4-创建和安装访问证书" class="headerlink" title="3.4 创建和安装访问证书"></a>3.4 创建和安装访问证书</h4><p>创建证书，让浏览器登陆，最后生成 p12 文件时需要输入并重复一次密码，密码需要记住。生成后下载 p12 证书到本机，安装它，密码是刚刚设置的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep &#x27;client-certificate-data&#x27; ~/.kube/config | head -n 1 | awk &#x27;&#123;print $2&#125;&#x27; | base64 -d &gt;&gt; kubecfg.crt</span><br><span class="line">grep &#x27;client-key-data&#x27; ~/.kube/config | head -n 1 | awk &#x27;&#123;print $2&#125;&#x27; | base64 -d &gt;&gt; kubecfg.key</span><br><span class="line">openssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name &quot;kubernetes-web-client&quot;</span><br></pre></td></tr></table></figure><p>最后访问 <code>https://172.16.10.20:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/</code> 打开（把 172.16.10.20 替换成自己的 master ip）</p><p>打开浏览器时，将提示是否使用证书，我们点确认后，提示选择<strong>令牌</strong>还是<strong>Kubeconfig</strong>来登陆，我们选择<strong>令牌</strong>，在输入框中输入上面 <code>kubectl describe secrets -n kube-system dashboard-admin-token-686fq</code> 输出的 token 字符串，即可登陆</p><p>在页面中可以看到所有命名空间中的资源，并且可以对容器执行命令</p><h2 id="八、问题记录"><a href="#八、问题记录" class="headerlink" title="八、问题记录"></a>八、问题记录</h2><ol><li><p>执行exec时报错如下，按<a class="link"   href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-authentication-authorization/" >官网文档<i class="fas fa-external-link-alt"></i></a>的说法是需要给 APIServer 和 kubelet 指定认证的 key 再启动，上面配置文件已经改过这个问题，另外可以参考<a class="link"   href="https://github.com/opsnull/follow-me-install-kubernetes-cluster/issues/221" >这个地址<i class="fas fa-external-link-alt"></i></a></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unable to upgrade connection: forbidden (user-system:anonymous, verb=create, re...</span><br></pre></td></tr></table></figure></li><li><p>执行命令报错如下，需要创建 RBAC 规则（在 dashboard 中的容器组执行命令中碰到这个报错）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">报错</span></span><br><span class="line">unable to upgrade connection: forbidden (user=kubernetes, verb=create, r...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">措施，创建规则文件</span></span><br><span class="line">cat &gt; apiserver-to-kubelet.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    rbac.authorization.kubernetes.io/autoupdate: &quot;true&quot;</span><br><span class="line">  labels:</span><br><span class="line">    kubernetes.io/bootstrapping: rbac-defaults</span><br><span class="line">  name: system:kubernetes-to-kubelet</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - &quot;&quot;</span><br><span class="line">    resources:</span><br><span class="line">      - nodes/proxy</span><br><span class="line">      - nodes/stats</span><br><span class="line">      - nodes/log</span><br><span class="line">      - nodes/spec</span><br><span class="line">      - nodes/metrics</span><br><span class="line">    verbs:</span><br><span class="line">      - &quot;*&quot;</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: system:kubernetes</span><br><span class="line">  namespace: &quot;&quot;</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: system:kubernetes-to-kubelet</span><br><span class="line">subjects:</span><br><span class="line">  - apiGroup: rbac.authorization.k8s.io</span><br><span class="line">    kind: User</span><br><span class="line">    name: kubernetes</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建规则</span></span><br><span class="line">kubectl create -f apiserver-to-kubelet.yaml </span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、环境准备&quot;&gt;&lt;a href=&quot;#一、环境准备&quot; class=&quot;headerlink&quot; title=&quot;一、环境准备&quot;&gt;&lt;/a&gt;一、环境准备&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;kubernetes 二进制安装&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-集群信息&quot;&gt;&lt;a href=&quot;#1-集群信息&quot; class=&quot;headerlink&quot; title=&quot;1. 集群信息&quot;&gt;&lt;/a&gt;1. 集群信息&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;系统：CentOS Linux release 7.6.1810 (Core) &lt;/p&gt;
&lt;p&gt;内核：3.10.0-957.27.2.el7.x86_64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;机器和服务分部，master 也计划安装上 kubelet、kube-proxy、docker、flannel 这些&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://blog.an00.cn/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://blog.an00.cn/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>网宿 CDN 刷新</title>
    <link href="https://blog.an00.cn/2019/04/08/%E7%BD%91%E5%AE%BF-CDN-%E5%88%B7%E6%96%B0/"/>
    <id>https://blog.an00.cn/2019/04/08/%E7%BD%91%E5%AE%BF-CDN-%E5%88%B7%E6%96%B0/</id>
    <published>2019-04-08T08:45:54.000Z</published>
    <updated>2023-10-29T07:06:33.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网宿-CDN-刷新"><a href="#网宿-CDN-刷新" class="headerlink" title="网宿 CDN 刷新"></a>网宿 CDN 刷新</h1><p>适用网宿 CDN 刷新，封装了签名，执行 <code>sendRequest</code> 调用服务商接口</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WangsuApi</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :func: 网速CDN访问API刷新缓存的工具类</span></span><br><span class="line"><span class="string">    :create on: 2019-04-08</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, userName, apiKey</span>):</span><br><span class="line">        self.date = datetime.datetime.utcnow().strftime(<span class="string">&#x27;%a, %d %b %Y %H:%M:%S GMT&#x27;</span>)</span><br><span class="line">        self.apiAddress = <span class="string">&quot;https://open.chinanetcenter.com/&quot;</span></span><br><span class="line">        self.authStr = self.getAuth(userName, apiKey)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getAuth</span>(<span class="params">self, userName, apikey</span>):</span><br><span class="line">        signed_apikey = hmac.new(apikey.encode(<span class="string">&#x27;utf-8&#x27;</span>), self.date.encode(<span class="string">&#x27;utf-8&#x27;</span>), hashlib.sha256).digest()</span><br><span class="line">        signed_apikey = base64.b64encode(signed_apikey)</span><br><span class="line">        signed_apikey = userName + <span class="string">&quot;:&quot;</span> + signed_apikey.decode()</span><br><span class="line">        signed_apikey = base64.b64encode(signed_apikey.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> signed_apikey</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createHeader</span>(<span class="params">self</span>):</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Date&#x27;</span>: self.date,</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Basic &#x27;</span> + self.authStr.decode()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> headers</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendRequest</span>(<span class="params">self, apiUrl, httpBodyParams,  method=<span class="string">&quot;POST&quot;</span></span>):</span><br><span class="line">        httpUrl = self.apiAddress + apiUrl</span><br><span class="line">        headers = self.createHeader()</span><br><span class="line">        <span class="keyword">if</span> method.upper() == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            resp = requests.post(httpUrl, data=json.dumps(httpBodyParams), headers=headers)</span><br><span class="line">        <span class="keyword">elif</span> method.upper() == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            resp = requests.get(httpUrl, headers=headers)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># self.printResp(resp)</span></span><br><span class="line">        <span class="keyword">return</span> resp.json()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printResp</span>(<span class="params">resp</span>):</span><br><span class="line">        headers_post = <span class="built_in">dict</span>(resp.headers)</span><br><span class="line">        tmp_str = <span class="string">&quot;statusCode:&#123;&#125;\nDate:&#123;&#125;\nContent-Length:&#123;&#125;\nConnection:&#123;&#125;\nx-cnc-request-id:&#123;&#125;\n\n&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            resp.status_code,</span><br><span class="line">            headers_post.get(<span class="string">&#x27;Date&#x27;</span>),</span><br><span class="line">            headers_post.get(<span class="string">&#x27;Content-Length&#x27;</span>),</span><br><span class="line">            headers_post.get(<span class="string">&#x27;Connection&#x27;</span>),</span><br><span class="line">            headers_post.get(<span class="string">&#x27;x-cnc-request-id&#x27;</span>),</span><br><span class="line">            resp.text)</span><br><span class="line">        <span class="built_in">print</span>(tmp_str)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;网宿-CDN-刷新&quot;&gt;&lt;a href=&quot;#网宿-CDN-刷新&quot; class=&quot;headerlink&quot; title=&quot;网宿 CDN 刷新&quot;&gt;&lt;/a&gt;网宿 CDN 刷新&lt;/h1&gt;&lt;p&gt;适用网宿 CDN 刷新，封装了签名，执行 &lt;code&gt;sendRequest&lt;/code&gt; 调用服务商接口&lt;/p&gt;</summary>
    
    
    
    <category term="运维" scheme="https://blog.an00.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="CDN" scheme="https://blog.an00.cn/tags/CDN/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 上手简记</title>
    <link href="https://blog.an00.cn/2018/10/11/MongoDB-%E4%B8%8A%E6%89%8B%E7%AE%80%E8%AE%B0/"/>
    <id>https://blog.an00.cn/2018/10/11/MongoDB-%E4%B8%8A%E6%89%8B%E7%AE%80%E8%AE%B0/</id>
    <published>2018-10-11T06:11:20.000Z</published>
    <updated>2023-10-29T07:04:34.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><blockquote><p>官网获取当前稳定版本 <code>4.0.3</code> </p></blockquote><p>配置文件示例</p><span id="more"></span><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span> <span class="comment"># 日志文件路径</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/usr/local/mongodb/logs/mongodb.log</span></span><br><span class="line"></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="comment"># 数据文件路径</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">/usr/local/mongodb/data/</span></span><br><span class="line">  <span class="attr">journal:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">  <span class="comment"># 执行mongod启动后在后台创建守护进程运行mongo</span></span><br><span class="line">  <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># pid文件路径</span></span><br><span class="line">  <span class="attr">pidFilePath:</span> <span class="string">/usr/local/mongodb/logs/mongod.pid</span></span><br><span class="line"></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="comment"># 监听地址</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment">#security:  # 创建管理用户后开启</span></span><br><span class="line"><span class="comment">#  authorization: enabled  # 登陆认证</span></span><br><span class="line"><span class="comment">#  # 多用于replication时节点间的认证`openssl rand -base64 756`生成</span></span><br><span class="line"><span class="comment">#  keyFile: /usr/local/mongodb/etc/security.key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#replication:  # 开启复制集功能</span></span><br><span class="line"><span class="comment">#    replSetName: rs0  # 设置复制名称</span></span><br></pre></td></tr></table></figure><p>启动mongo服务，这里第一次启动没加认证，创建用户后加上 <code>--auth</code> 启动用户认证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash"><span class="built_in">cd</span> /usr/local/mongodb</span></span><br><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">./bin/mongod -f mongod.yml</span> </span><br><span class="line">about to fork child process, waiting until server is ready for connections.</span><br><span class="line">forked process: 16090 # fork子进程为mongo的守护进程</span><br><span class="line"></span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure><p>停止 mongo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash"><span class="built_in">cd</span> /usr/local/mongodb</span></span><br><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">./bin/mongod -f mongod.yml --shutdown</span></span><br></pre></td></tr></table></figure><p>mongo 的日志轮转，旧的日志会重命名成日志名加时间的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统命令方式</span></span><br><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash"><span class="built_in">kill</span> –SIGUSR1 [PID]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mongo shell命令方式</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.runCommand(&#123;logRotate:1&#125;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Mongo的使用"><a href="#Mongo的使用" class="headerlink" title="Mongo的使用"></a>Mongo的使用</h2><h3 id="连接mongo"><a href="#连接mongo" class="headerlink" title="连接mongo"></a>连接mongo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接单节点</span></span><br><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">mongo 127.0.0.1:28001/admin -u admin -p 111111 --authenticationDatabase admin</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接副本集，需要用mogno url字符串的方式，可以带上用户名密码，不带将提示输入密码</span></span><br><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">mongo mongodb://user:password@10.10.10.15:27001,10.10.10.16:27002,10.10.10.17:27000/mydbname?replicaSet=replicaSet1</span></span><br></pre></td></tr></table></figure><h3 id="CUDR操作"><a href="#CUDR操作" class="headerlink" title="CUDR操作"></a>CUDR操作</h3><p>创建 db 和 collection 并插入数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入mongo终端</span></span><br><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">mongo</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">show dbs</span></span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个db，直接use即可</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">use ac</span></span><br><span class="line">switched to db ac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">use之后若没存储数据，是不会保存的</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">show dbs</span></span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在当前db创建一个me的collection（类似于关系型数据库的表的意思）</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.me.insert(&#123;name: <span class="string">&#x27;abc&#x27;</span>&#125;)</span></span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.me.insert(&#123;name: <span class="string">&#x27;EFG&#x27;</span>&#125;)</span></span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存后有db已经可以show出来</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">show dbs</span></span><br><span class="line">ac      0.000GB</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前db的collection</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">show collections</span></span><br><span class="line">me</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多条插入</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.me.insertMany([&#123;name: <span class="string">&#x27;hij&#x27;</span>&#125;,&#123;name: <span class="string">&#x27;lmn&#x27;</span>&#125;])</span></span><br><span class="line">&#123;</span><br><span class="line">        &quot;acknowledged&quot; : true,</span><br><span class="line">        &quot;insertedIds&quot; : [</span><br><span class="line">                ObjectId(&quot;5bbd5c530c08adaa73c5d5ef&quot;),</span><br><span class="line">                ObjectId(&quot;5bbd5c530c08adaa73c5d5f0&quot;)</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看collection me中的数据，若只取一条可db.me.find().<span class="built_in">limit</span>(1)</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.me.find()</span></span><br><span class="line">db.me.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bbd55750c08adaa73c5d5ed&quot;), &quot;name&quot; : &quot;abc&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bbd5c030c08adaa73c5d5ee&quot;), &quot;name&quot; : &quot;EFG&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bbd5c530c08adaa73c5d5ef&quot;), &quot;name&quot; : &quot;hij&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bbd5c530c08adaa73c5d5f0&quot;), &quot;name&quot; : &quot;lmn&quot; &#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">过滤name=<span class="string">&#x27;abc&#x27;</span>的数据</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.me.find(&#123;name: <span class="string">&#x27;abc&#x27;</span>&#125;)</span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bbd55750c08adaa73c5d5ed&quot;), &quot;name&quot; : &quot;abc&quot; &#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新数据，第一个参数是filter条件，第二个为更新动作的内容，也有Many操作。</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.me.update(&#123;name:<span class="string">&#x27;abc&#x27;</span>&#125;, &#123;<span class="variable">$set</span>: &#123; age: 20&#125;&#125;)</span></span><br><span class="line">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.me.find(&#123;name:<span class="string">&#x27;abc&#x27;</span>&#125;)</span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bbd55750c08adaa73c5d5ed&quot;), &quot;name&quot; : &quot;abc&quot;, &quot;age&quot; : 20 &#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除记录，传入过滤条件</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.me.deleteOne(&#123;age: 20&#125;)</span></span><br><span class="line">&#123; &quot;acknowledged&quot; : true, &quot;deletedCount&quot; : 1 &#125;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.me.find()</span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bbd5c030c08adaa73c5d5ee&quot;), &quot;name&quot; : &quot;EFG&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bbd5c530c08adaa73c5d5ef&quot;), &quot;name&quot; : &quot;hij&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bbd5c530c08adaa73c5d5f0&quot;), &quot;name&quot; : &quot;lmn&quot; &#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除collection me</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.me.drop()</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除当前库ac，因为之前已经use进了ac才可以这样删除ac</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.dropDatabase()</span></span><br></pre></td></tr></table></figure><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>内置角色说明 <a class="link"   href="https://docs.mongodb.com/manual/core/security-built-in-roles/" >参考官档<i class="fas fa-external-link-alt"></i></a></p><ul><li><p>数据库用户角色（Database User Roles）：</p><ul><li>read：授予 User 只读数据的权限</li><li>readWrite：授予 User 读写数据的权限</li></ul></li><li><p>数据库管理角色（Database Administration Roles）：</p><ul><li>dbAdmin：在当前 DB 中执行管理操作</li><li>dbOwner：在当前 DB 中执行任意操作</li><li>userAdmin：在当前 DB 中管理 User</li></ul></li><li><p>备份和还原角色（Backup and Restoration Roles）：</p><ul><li>backup</li><li>restore</li></ul></li><li><p>跨库角色（All-Database Roles）：</p><ul><li>readAnyDatabase：授予在所有数据库上读取数据的权限</li><li>readWriteAnyDatabase：授予在所有数据库上读写数据的权限</li><li>userAdminAnyDatabase：授予在所有数据库上管理User的权限</li><li>dbAdminAnyDatabase：授予管理所有数据库的权限</li></ul></li><li><p>集群管理角色（Cluster Administration Roles）：</p><ul><li>clusterAdmin：授予管理集群的最高权限</li><li>clusterManager：授予管理和监控集群的权限，A user with this role can access the config and local databases, which are used in sharding and replication, respectively.</li><li>clusterMonitor：授予监控集群的权限，对监控工具具有readonly的权限</li><li>hostManager：管理 Server</li></ul></li><li><p>超级用户角色</p><ul><li>root：提供对 readWriteAnyDatabase、dbAdminAnyDatabase、userAdminAnyDatabase、clusterAdmin、restore 和 backup 组合的操作和所有资源的访问。</li></ul></li></ul><p>操作示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建管理用户，对所有db有管理权限（按角色分配，userAdminAnyDatabase有所有库的userAdmin权限，也就是可以给其他用户授权）</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">use admin;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.createUser(&#123;user: <span class="string">&#x27;admin&#x27;</span>, <span class="built_in">pwd</span>:<span class="string">&#x27;111111&#x27;</span>, roles: [&#123;role: <span class="string">&quot;userAdminAnyDatabase&quot;</span>, db: <span class="string">&quot;admin&quot;</span>&#125;]&#125;)</span></span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">        &quot;user&quot; : &quot;admin&quot;,</span><br><span class="line">        &quot;roles&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">                        &quot;db&quot; : &quot;admin&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看用户集合</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.system.users.find().pretty()</span></span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : &quot;admin.admin&quot;,</span><br><span class="line">        &quot;user&quot; : &quot;admin&quot;,</span><br><span class="line">        &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">        &quot;credentials&quot; : &#123;</span><br><span class="line">                &quot;SCRAM-SHA-1&quot; : &#123;</span><br><span class="line">                        &quot;iterationCount&quot; : 10000,</span><br><span class="line">                        &quot;salt&quot; : &quot;nf7YX8afzXgn/tbDKW6Pig==&quot;,</span><br><span class="line">                        &quot;storedKey&quot; : &quot;2k9Lf+yv77NuKMZkVCahgPBrI4M=&quot;,</span><br><span class="line">                        &quot;serverKey&quot; : &quot;DKuwSPYry4sqDtano2o+ttVVRJE=&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;SCRAM-SHA-256&quot; : &#123;</span><br><span class="line">                        &quot;iterationCount&quot; : 15000,</span><br><span class="line">                        &quot;salt&quot; : &quot;MmKYC+wSetKmZXTYt5DH4nx9ncyDei6obz/xzA==&quot;,</span><br><span class="line">                        &quot;storedKey&quot; : &quot;GnlHlaE2mHt5HjyLjv3oMvtSEuzt7MYqD3LTmV03f7c=&quot;,</span><br><span class="line">                        &quot;serverKey&quot; : &quot;jrfiEghGv44JdRyc0LRgQaCV05WQiNdtA7fiGHVH9VQ=&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;roles&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">                        &quot;db&quot; : &quot;admin&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启mongod，配置文件开启authentication，换admin用户登录</span></span><br><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">./bin/mongo -u admin -p 111111 --authenticationDatabase admin</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">use ac</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.me.find()   <span class="comment"># 这里admin用户对ac库没有权限，需要创建</span></span></span><br><span class="line">Error: error: &#123;</span><br><span class="line">        &quot;ok&quot; : 0,</span><br><span class="line">        &quot;errmsg&quot; : &quot;not authorized on ac to execute command &#123; find: \&quot;me\&quot;, filter: &#123;&#125;, lsid: &#123; id: UUID(\&quot;aa798cc9-a036-4733-adbf-861e9c51a446\&quot;) &#125;, $db: \&quot;ac\&quot; &#125;&quot;,</span><br><span class="line">        &quot;code&quot; : 13,</span><br><span class="line">        &quot;codeName&quot; : &quot;Unauthorized&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建在ac库下创建an00用户，角色是ac的属主</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.createUser(&#123;user: <span class="string">&#x27;an00&#x27;</span>, <span class="built_in">pwd</span>:<span class="string">&#x27;111111&#x27;</span>, roles: [&#123;role: <span class="string">&#x27;dbOwner&#x27;</span>, db: <span class="string">&#x27;ac&#x27;</span>&#125;]&#125;)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">换an00用户登录ac库，查看me集合的内容</span></span><br><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">./bin/mongo -u an00 -p 111111 --authenticationDatabase ac</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">show dbs</span></span><br><span class="line">ac  0.000GB</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">use ac</span></span><br><span class="line">switched to db ac</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">show collections</span></span><br><span class="line">me</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.me.find()</span></span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bbd5c030c08adaa73c5d5ee&quot;), &quot;name&quot; : &quot;EFG&quot;, &quot;age&quot; : 20 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bbd5c530c08adaa73c5d5ef&quot;), &quot;name&quot; : &quot;hij&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bbd5c530c08adaa73c5d5f0&quot;), &quot;name&quot; : &quot;lmn&quot; &#125;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">show <span class="built_in">users</span></span></span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : &quot;ac.an00&quot;,</span><br><span class="line">        &quot;user&quot; : &quot;an00&quot;,</span><br><span class="line">        &quot;db&quot; : &quot;ac&quot;,</span><br><span class="line">        &quot;roles&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;role&quot; : &quot;dbOwner&quot;,</span><br><span class="line">                        &quot;db&quot; : &quot;ac&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;mechanisms&quot; : [</span><br><span class="line">                &quot;SCRAM-SHA-1&quot;,</span><br><span class="line">                &quot;SCRAM-SHA-256&quot;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建root用户，使用内置的root角色</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">use admin</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.createUser(&#123;user: <span class="string">&#x27;root&#x27;</span>, <span class="built_in">pwd</span>:<span class="string">&#x27;111111&#x27;</span>, roles: [&#123;role: <span class="string">&quot;root&quot;</span>, db: <span class="string">&quot;admin&quot;</span>&#125;]&#125;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h2><p>mongodump备份，-h 指定主机地址，-d 指定 database，-c 指定 collection，-o 指定备份文件保存路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mongodump -u an00 -p &#x27;111111&#x27; --authenticationDatabase ac -h 127.0.0.1:27017 -d ac -o dump/</span><br></pre></td></tr></table></figure><p>恢复备份，–drop 表示先删除数据，然后恢复备份，慎用。-d 指定 database，最后跟上有 bson、json 备份数据的路径<br>（有副本集时指定PRIMARY节点）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mongorestore -u an00 -p &#x27;111111&#x27; --authenticationDatabase ac -h 127.0.0.1:27018 -d ac dump/ac/</span><br></pre></td></tr></table></figure><h2 id="副本集"><a href="#副本集" class="headerlink" title="副本集"></a>副本集</h2><blockquote><p>若 mongo 提供给非本机连接，副本集的成员 IP 不应该设成 127.0.0.1，当客户端连接副本集时，使用的是副本集中配置的 IP，127.0.0.1 会导致客户端连接自己本地的端口</p><p>使用文章最开始的配置文件，打开注释</p></blockquote><p>副本集成员配置可以用 <code>rs.config()</code> 查看，配置中的 members 是一个列表，可以包含多个成员。<br>副本集成员常用的配置选项如下，<a class="link"   href="https://docs.mongodb.com/manual/reference/replica-configuration/" >参考官档<i class="fas fa-external-link-alt"></i></a> </p><ul><li><p><strong>_id</strong> 数值，0-255之间，副本集中每个成员的标识符，不可重复，设置后不可修改</p></li><li><p><strong>host</strong> 字符串，通常是 IP 或 IP 加指定端口的形式，如：”192.168.1.2:28011”</p></li><li><p><strong>priority</strong> 数值，选举 primary 时的优先级，值为0时该成员不会被选举成 primary 节点</p></li><li><p><strong>hidden</strong> 布尔值，对客户端隐藏，通常给延时节点和仲裁节点配上</p></li><li><p><strong>slaveDelay</strong> 数值，设置此成员落后 primary 的秒数，成员成为延时节点</p></li><li><p><strong>arbiterOnly</strong> 布尔值，为 true 时，节点将不存数据，只用于选举时投票用</p></li><li><p><strong>votes</strong> 数值，表示成员选举时的票数，通常是 0 或 1，当为 0 时不具备选举权（无选举权的成员必须priority&#x3D;0），一个副本集最多有 7 个投票选举的成员，如果超过 7 个可以将部分成员此值设为 0</p></li></ul><p>配置示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">cfg = rs.conf()   // 获取当前配置对象，修改成员ip，重设成员列表</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">cfg.members = [&#123;<span class="string">&quot;_id&quot;</span>:2,<span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.10.234:27017&quot;</span>&#125;, &#123;<span class="string">&quot;_id&quot;</span>: 3,<span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.10.234:27018&quot;</span>&#125;, &#123;<span class="string">&quot;_id&quot;</span>: 4,<span class="string">&quot;host&quot;</span> : <span class="string">&quot;192.168.10.234:27019&quot;</span>&#125;]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">rs.reconfig(cfg, &#123;force: <span class="literal">true</span>&#125;)   // 修改后重设副本集</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者使用 rs.add 增加成员，</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">rs.add(&#123;<span class="string">&#x27;_id&#x27;</span> : 10, <span class="string">&#x27;priority&#x27;</span>:2, <span class="string">&#x27;host&#x27;</span> : <span class="string">&#x27;192.168.10.235:27017&#x27;</span>&#125;)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加仲裁节点</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">rs.addArb(<span class="string">&#x27;11.22.33.44:27017&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">rs.status()  // 查看副本集状态，状态正常客户端重新连接即可正常</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">rs.config()  // 再次查看配置</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装和配置&quot;&gt;&lt;a href=&quot;#安装和配置&quot; class=&quot;headerlink&quot; title=&quot;安装和配置&quot;&gt;&lt;/a&gt;安装和配置&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;官网获取当前稳定版本 &lt;code&gt;4.0.3&lt;/code&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;配置文件示例&lt;/p&gt;</summary>
    
    
    
    <category term="MongoDB" scheme="https://blog.an00.cn/categories/MongoDB/"/>
    
    
    <category term="MongoDB" scheme="https://blog.an00.cn/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>k8s 测试环境问题记录</title>
    <link href="https://blog.an00.cn/2018/06/29/k8s%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://blog.an00.cn/2018/06/29/k8s%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2018-06-29T07:53:23.000Z</published>
    <updated>2023-10-29T07:04:10.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s测试环境问题记录"><a href="#k8s测试环境问题记录" class="headerlink" title="k8s测试环境问题记录"></a>k8s测试环境问题记录</h1><blockquote><p>在公司准备测试环境，记录一些过程中碰到的问题</p></blockquote><h2 id="dashboard认证"><a href="#dashboard认证" class="headerlink" title="dashboard认证"></a>dashboard认证</h2><blockquote><p>dashboard 大概就发现一个比较明显的好处，用来执行容器命令比较方便 : )</p></blockquote><p>安装 dashboard 先去 github获取 <a class="link"   href="https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml" >kubernetes-dashboard.yaml<i class="fas fa-external-link-alt"></i></a></p><p>最后 Service 部分添加 NodePort 映射。</p><span id="more"></span><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...省略前面内容...</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">9000</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure><p>打开 kube-proxy 节点的9000端口，提示认证使用 token，通过下面的命令获取。复制整个长串的 token 到页面登陆 dashboard。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl -n kube-system get secret</span> </span><br><span class="line">NAME                                TYPE                                  DATA      AGE</span><br><span class="line">an00-token-brpds                    kubernetes.io/service-account-token   3         14d</span><br><span class="line">default-token-jct5w                 kubernetes.io/service-account-token   3         22d</span><br><span class="line">elasticsearch-logging-token-zwr2b   kubernetes.io/service-account-token   3         14d</span><br><span class="line">fluentd-es-token-rxrxc              kubernetes.io/service-account-token   3         44m</span><br><span class="line">heapster-token-qk4m9                kubernetes.io/service-account-token   3         14d</span><br><span class="line">kube-dns-autoscaler-token-nmgjs     kubernetes.io/service-account-token   3         16d</span><br><span class="line">kube-dns-token-s5hkb                kubernetes.io/service-account-token   3         16d</span><br><span class="line">kubernetes-dashboard-certs          Opaque                                0         14d</span><br><span class="line">kubernetes-dashboard-key-holder     Opaque                                2         21d</span><br><span class="line">kubernetes-dashboard-token-7nt98    kubernetes.io/service-account-token   3         14d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找token关键字的secret，获取到最后的token字段内容粘贴到页面登陆。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl -n kube-system describe secret kubernetes-dashboard-token-7nt98</span></span><br><span class="line">Name:         kubernetes-dashboard-token-7nt98</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name=kubernetes-dashboard</span><br><span class="line">              kubernetes.io/service-account.uid=54c71522-6f80-11e8-bc0b-525400eac085</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1107 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZC10b2tlbi03bnQ5OCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjU0YzcxNTIyLTZmODAtMTFlOC1iYzBiLTUyNTQwMGVhYzA4NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLXN5c3RlbTprdWJlcm5ldGVzLWRhc2hib2FyZCJ9.leD2gC5FkkN1_0mt5_AwveStC6vh5H8-UL1LqwF7N07xQ2ZKSh1matYyWyv-buMflrks1-my88MKwaYNmMaNRk2-WrlybNLJKrf-QLpmGLdCB3IHBuSViuHHQwPS4g7CD5GNAsuPZF3GAszuBamBD3HJT1okrrH8J3KlstqMpYsEbwullLfgQaznfd02YjrR6izC3sneJpj0vTKSrY8LxweI2xcYVNshZHRacEgdNzwBTe48dU_9pCqyUWOSS2J2Y4EimAMyPQlwDbazgGuHn027neIosxO0ooSbEeiqaEnu9-ATpyJCCWW4ukOxt_PG8VJsNzmZuG18LIA_KImd6A</span><br></pre></td></tr></table></figure><h2 id="kube-dns"><a href="#kube-dns" class="headerlink" title="kube-dns"></a>kube-dns</h2><p>为k8s中的pod增加service名字解析和自动发现，通过api监控service变动，可以将service名字解析到对应的VIP中。</p><p>kube-dns包含三个镜像（谷歌gcr的仓库，若服务器环境没外网需要先准备）</p><ul><li>kube-dns：通过k8s api监控service和ip变动以及它们的对应关系，保存到内存中后就是dns记录了。</li><li>dnsmasq-nanny：通过kube-dns容器获取dns规则，在集群中相当于dns服务器，减轻kube-dns压力，提高稳定性和查询性能</li><li>sidecar：</li></ul><p>使用官方的YAML文件创建，在源码的”kubernetes&#x2F;cluster&#x2F;addons&#x2F;“目录下，关于kube-dns主要有两个文件：</p><p>dns服务定义文件，包含Service、ServiceAccount、Deployment等。需要将文件中的 <code>__PILLAR__DNS__SERVER__</code> 修改成一个clusterip，将 <code>__PILLAR__DNS__DOMAIN__</code> 修改成 <code>cluster.local</code>（注意保留后面的点）。</p><ul><li>dns&#x2F;kube-dns.yaml.base</li></ul><p>dns在编排的服务通信和发现中有很大的作用，所以它不能有闪失。官方提供了一个为kube-dns自动scale的配置，文件可以直接创建</p><ul><li>dns-horizontal-autoscaler&#x2F;dns-horizontal-autoscaler.yaml</li></ul><p>在创建了kube-dns服务后，需要修改pod默认的dns服务器配置。pod被kubelet创建，找到kubelet的配置文件，添加dns配置内容，注意 <code>kubelet.service</code> 启动文件也添加新增的配置选项名，刷新配置后重启 <code>kubelet</code> 。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/kubelet.conf </span></span><br><span class="line"><span class="attr">KUBE_LOGTOSTDERR</span>=<span class="string">&quot;--logtostderr=true&quot;</span></span><br><span class="line"><span class="attr">KUBE_LOG_LEVEL</span>=<span class="string">&quot;--v=2&quot;</span></span><br><span class="line"><span class="attr">NODE_ADDRESS</span>=<span class="string">&quot;--address=0.0.0.0&quot;</span></span><br><span class="line"><span class="attr">NODE_HOSTNAME</span>=<span class="string">&quot;--hostname-override=debian-70&quot;</span></span><br><span class="line"><span class="attr">KUBE_ALLOW_PRIV</span>=<span class="string">&quot;--allow-privileged=false&quot;</span></span><br><span class="line"><span class="attr">KUBE_POD_INFRA_CONTAINER_IMAGE</span>=<span class="string">&quot;--pod-infra-container-image=k8s.gcr.io/pause-amd64:3.1&quot;</span></span><br><span class="line"><span class="attr">KUBE_RUNTIME_CGROUPS</span>=<span class="string">&quot;--runtime-cgroups=/systemd/system.slice&quot;</span></span><br><span class="line"><span class="attr">KUBE_CGROUPS</span>=<span class="string">&quot;--kubelet-cgroups=/systemd/system.slice&quot;</span></span><br><span class="line"><span class="attr">KUBE_FAIL_SWAP_ON</span>=<span class="string">&quot;--fail-swap-on=false&quot;</span></span><br><span class="line"><span class="attr">KUBE_CONFIG</span>=<span class="string">&quot;--kubeconfig=/etc/kubernetes/kubeconfig.yml&quot;</span></span><br><span class="line"><span class="attr">KUBELET_DNS_IP</span>=<span class="string">&quot;--cluster-dns=10.66.77.2&quot;</span>  <span class="comment"># 修改成__PILLAR__DNS__SERVER__替换的clusterip</span></span><br><span class="line"><span class="attr">KUBELET_DNS_DOMAIN</span>=<span class="string">&quot;--cluster-domain=cluster.local&quot;</span>  <span class="comment"># 修改成__PILLAR__DNS__DOMAIN__的内容</span></span><br></pre></td></tr></table></figure><p>可以创建简单的busybox应用，查看它的 <code>/etc/resolv.conf</code> 文件，默认有 <code>kubernetes.default</code> 指向apiserver。<strong>解析得到的是service的clusterIP，不能被ping通</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl <span class="built_in">exec</span> -it busybox sh</span></span><br><span class="line">/ # nslookup kubernetes.default</span><br><span class="line">Server:    10.66.77.2</span><br><span class="line">Address 1: 10.66.77.2 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      kubernetes.default</span><br><span class="line">Address 1: 10.66.77.1 kubernetes.default.svc.cluster.local</span><br><span class="line">/ # </span><br><span class="line">/ # </span><br><span class="line">/ # nslookup nginx-service</span><br><span class="line">Server:    10.66.77.2</span><br><span class="line">Address 1: 10.66.77.2 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      nginx-service</span><br><span class="line">Address 1: 10.66.77.225 nginx-service.default.svc.cluster.local</span><br><span class="line">/ # exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当前的service，和上面解析的ip是一致的</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get svc</span>            </span><br><span class="line">NAME                TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)       AGE</span><br><span class="line">kubernetes          ClusterIP   10.66.77.1     &lt;none&gt;        443/TCP       6d</span><br><span class="line">nginx-service       ClusterIP   10.66.77.225   &lt;none&gt;        80/TCP        5h</span><br></pre></td></tr></table></figure><h2 id="elasticsearch-fluentd-kibana"><a href="#elasticsearch-fluentd-kibana" class="headerlink" title="elasticsearch fluentd kibana"></a>elasticsearch fluentd kibana</h2><p>官方提供了日志监控方案，资源定义文件在源码的 <a class="link"   href="https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/fluentd-elasticsearch" >kubernetes&#x2F;cluster&#x2F;addons&#x2F;fluentd-elasticsearch<i class="fas fa-external-link-alt"></i></a> 目录，获取YAML文件可以创建和运行EFK。</p><p>依赖镜像：( elasticsearch 和 kibana 非常大…)</p><ul><li>k8s.gcr.io&#x2F;elasticsearch:v5.6.4</li><li>alpine:3.6</li><li>k8s.gcr.io&#x2F;fluentd-elasticsearch:v2.0.4</li><li>docker.elastic.co&#x2F;kibana&#x2F;kibana:5.6.4</li></ul><p>elasticsearch 是一个搜索引擎和日志存储的数据库<br>flunetd 会将节点中保存的其他 pod 输出的日志流收集到 elasticsearch 中<br>kibana 展示日志，提供人性化搜索界面和图表等功能，需要访问可以改 <code>kibana-service.yaml</code> 映射 <code>NodePort</code> 。</p><p>从源码中获取定义资源的 YAML 文件，创建前注释一下 <code>kibana-deployment.yaml</code> 中 env 的 <code>SERVER_BASEPATH</code> 变量和 <code>value</code> 保存，开始创建。<br>kibana 启动有点久，如果 pod 日志没异常的情况，需要耐心等几分钟。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span> -l</span></span><br><span class="line">total 36</span><br><span class="line">-rw-r--r-- 1 root root   382 Jun 13 11:34 es-service.yaml</span><br><span class="line">-rw-r--r-- 1 root root  2820 Jun 13 11:34 es-statefulset.yaml</span><br><span class="line">-rw-r--r-- 1 root root 15648 Jun 13 11:34 fluentd-es-configmap.yaml</span><br><span class="line">-rw-r--r-- 1 root root  2774 Jun 13 11:34 fluentd-es-ds.yaml</span><br><span class="line">-rw-r--r-- 1 root root  1186 Jun 13 11:34 kibana-deployment.yaml</span><br><span class="line">-rw-r--r-- 1 root root   354 Jun 13 11:34 kibana-service.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl create -f .</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看部分资源情况</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get statefulset,pod,daemonset -n kube-system</span>  </span><br><span class="line">NAME                                     DESIRED   CURRENT   AGE</span><br><span class="line">statefulset.apps/elasticsearch-logging   2         2         11m</span><br><span class="line"></span><br><span class="line">NAME                                        READY     STATUS              RESTARTS   AGE</span><br><span class="line">pod/elasticsearch-logging-0                 1/1       Running             0          6m</span><br><span class="line">pod/elasticsearch-logging-1                 1/1       Unknown             0          6m</span><br><span class="line">pod/kibana-logging-bc776986-7vtf7           1/1       Unknown             0          11m</span><br><span class="line">pod/kibana-logging-bc776986-cm69s           0/1       ContainerCreating   0          34s</span><br><span class="line">pod/kube-dns-659bc9899c-ghj2n               0/3       ContainerCreating   0          20s</span><br><span class="line">pod/kube-dns-659bc9899c-lm4pd               3/3       Running             0          1d</span><br><span class="line">pod/kube-dns-659bc9899c-r655f               3/3       Unknown             0          1d</span><br><span class="line">pod/kube-dns-autoscaler-79b4b844b9-6v856    1/1       Running             0          1d</span><br><span class="line">pod/kubernetes-dashboard-5c469b58b8-pf7cg   0/1       ContainerCreating   0          16s</span><br><span class="line">pod/kubernetes-dashboard-5c469b58b8-pkttx   1/1       Unknown             2          5d</span><br><span class="line"></span><br><span class="line">NAME                                     DESIRED   CURRENT   READY     UP-TO-DATE   AVAILABLE   NODE SELECTOR                              AGE</span><br><span class="line">daemonset.extensions/fluentd-es-v2.0.4   0         0         0         0            0           beta.kubernetes.io/fluentd-ds-ready=true   11m</span><br></pre></td></tr></table></figure><h3 id="1-elasticsearch-statefulset启动和删除可能的错误"><a href="#1-elasticsearch-statefulset启动和删除可能的错误" class="headerlink" title="1. elasticsearch statefulset启动和删除可能的错误"></a>1. elasticsearch statefulset启动和删除可能的错误</h3><p>若是启动 <code>elasticsearch-logging</code> 碰到如下错误，请为 <code>apiserver</code> 和所有 <code>kubelet</code> 添加启动参数 <code>--allow-privileged</code> （默认为 <code>flase</code> ），重载配置文件后重新启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># kubectl describe statefulset -n kube-system </span><br><span class="line">  ...</span><br><span class="line">  Type     Reason            Age               From                    Message</span><br><span class="line">  ----     ------            ----              ----                    -------</span><br><span class="line">  Warning  FailedCreate      1m (x24 over 6m)  statefulset-controller  create Pod elasticsearch-logging-0 in StatefulSet elasticsearch-logging failed error: Pod &quot;elasticsearch-logging-0&quot; is invalid: spec.initContainers[0].securityContext.privileged: Forbidden: disallowed by cluster policy</span><br><span class="line">  </span><br><span class="line"># 重启后启动成功</span><br><span class="line"># kubectl describe statefulset -n kube-system </span><br><span class="line">    Type     Reason            Age               From                    Message</span><br><span class="line">  ----     ------            ----              ----                    -------</span><br><span class="line">  Warning  FailedCreate      1m (x24 over 6m)  statefulset-controller  create Pod elasticsearch-logging-0 in StatefulSet elasticsearch-logging failed error: Pod &quot;elasticsearch-logging-0&quot; is invalid: spec.initContainers[0].securityContext.privileged: Forbidden: disallowed by cluster policy</span><br><span class="line">  Normal   SuccessfulCreate  49s               statefulset-controller  create Pod elasticsearch-logging-0 in StatefulSet elasticsearch-logging successful</span><br><span class="line">  Normal   SuccessfulCreate  42s               statefulset-controller  create Pod elasticsearch-logging-1 in StatefulSet elasticsearch-logging successful</span><br></pre></td></tr></table></figure><p>另外在删除资源时我面临一个问题，其他的资源都删除了，但是 <code>elasticsearch-logging</code> 总是不能删除成功，即使是强制 <code>--force</code> ，提示我超时了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># kubectl delete -f .</span><br><span class="line"></span><br><span class="line"># 还存在elasticsearch-logging这个statefulset</span><br><span class="line"># kubectl get -f .</span><br><span class="line">NAME                    DESIRED   CURRENT   AGE</span><br><span class="line">elasticsearch-logging   0         2         2h</span><br><span class="line">Error from server (NotFound): services &quot;elasticsearch-logging&quot; not found</span><br><span class="line">Error from server (NotFound): serviceaccounts &quot;elasticsearch-logging&quot; not found</span><br><span class="line">Error from server (NotFound): clusterroles.rbac.authorization.k8s.io &quot;elasticsearch-logging&quot; not found</span><br><span class="line">Error from server (NotFound): clusterrolebindings.rbac.authorization.k8s.io &quot;elasticsearch-logging&quot; not found</span><br><span class="line">Error from server (NotFound): configmaps &quot;fluentd-es-config-v0.1.4&quot; not found</span><br><span class="line">Error from server (NotFound): serviceaccounts &quot;fluentd-es&quot; not found</span><br><span class="line">Error from server (NotFound): clusterroles.rbac.authorization.k8s.io &quot;fluentd-es&quot; not found</span><br><span class="line">Error from server (NotFound): clusterrolebindings.rbac.authorization.k8s.io &quot;fluentd-es&quot; not found</span><br><span class="line">Error from server (NotFound): daemonsets.apps &quot;fluentd-es-v2.0.4&quot; not found</span><br><span class="line">Error from server (NotFound): deployments.apps &quot;kibana-logging&quot; not found</span><br><span class="line">Error from server (NotFound): services &quot;kibana-logging&quot; not found</span><br><span class="line"></span><br><span class="line"># kubectl delete statefulset elasticsearch-logging -n kube-system --force</span><br><span class="line">timed out waiting for &quot;elasticsearch-logging&quot; to be synced</span><br></pre></td></tr></table></figure><p>后面在google找到一个方法，删除失败的资源，指定 <code>--cascade=false</code> ，解决了我的问题。若删除后还可以看到被删除资源定义的pod，可以指定 <code>--grace-period=0</code> 删除它。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># kubectl delete -f es-statefulset.yaml --cascade=false</span><br><span class="line"></span><br><span class="line"># 如果删除了定义elastic的stateful，但是get pod发现还有stateful定义的pod没删除，可以执行下面命令强制删除</span><br><span class="line"># kubectl --namespace=kube-system delete pods elasticsearch-logging-0 --grace-period=0 --force </span><br><span class="line"># kubectl --namespace=kube-system delete pods elasticsearch-logging-1 --grace-period=0 --force </span><br></pre></td></tr></table></figure><h3 id="2-fluentd-daemonset启动问题"><a href="#2-fluentd-daemonset启动问题" class="headerlink" title="2. fluentd daemonset启动问题"></a>2. fluentd daemonset启动问题</h3><p>另外一个 fluentd 问题，get 发现 <code>daemonset fluentd-es-v2.0.4</code> 运行0个，这里需要为所有 node 添加一个label，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># kubectl get daemonset fluentd-es-v2.0.4 -n kube-system </span><br><span class="line">NAME                DESIRED   CURRENT   READY     UP-TO-DATE   AVAILABLE   NODE SELECTOR                              AGE</span><br><span class="line">fluentd-es-v2.0.4   0         0         0         0            0           beta.kubernetes.io/fluentd-ds-ready=true   32s</span><br><span class="line"></span><br><span class="line"># 为所有node添加一个label，有此label的node才会运行fluentd</span><br><span class="line"># kubectl label node debian-70 beta.kubernetes.io/fluentd-ds-ready=true</span><br><span class="line"># kubectl label node sl-80 beta.kubernetes.io/fluentd-ds-ready=true</span><br><span class="line"></span><br><span class="line"># 再次get，已经有在运行了</span><br><span class="line"># kubectl get daemonset fluentd-es-v2.0.4 -n kube-system </span><br><span class="line">NAME                DESIRED   CURRENT   READY     UP-TO-DATE   AVAILABLE   NODE SELECTOR                              AGE</span><br><span class="line">fluentd-es-v2.0.4   2         2         2         2            2           beta.kubernetes.io/fluentd-ds-ready=true   4m</span><br></pre></td></tr></table></figure><p>一次偶然，公司测试机房断电了（我猜测与这个有关系），再启动集群的时候有一台节点的 <code>fluentd</code> 无法启动，如下体现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pod状态一直是CrashLoopBackOff，describe查看到的信息也有限，重启也不能正常</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl get -n kube-system pods</span></span><br><span class="line">NAME                                    READY     STATUS             RESTARTS   AGE</span><br><span class="line">elasticsearch-logging-0                 1/1       Running            3          14d</span><br><span class="line">elasticsearch-logging-1                 1/1       Running            3          14d</span><br><span class="line">fluentd-es-v2.0.4-4lthw                 1/1       Running            0          16h</span><br><span class="line">fluentd-es-v2.0.4-lvmj7                 0/1       CrashLoopBackOff   4          16h</span><br><span class="line">heapster-69b5d4974d-4dzm8               1/1       Running            3          14d</span><br><span class="line">kibana-logging-799d8b46db-rn6fq         1/1       Running            3          14d</span><br><span class="line">kube-dns-659bc9899c-ghj2n               3/3       Running            9          15d</span><br><span class="line">kube-dns-659bc9899c-lm4pd               3/3       Running            12         16d</span><br><span class="line">kube-dns-autoscaler-79b4b844b9-6v856    1/1       Running            4          16d</span><br><span class="line">kubernetes-dashboard-7d5dcdb6d9-f4j6n   1/1       Running            3          14d</span><br><span class="line">monitoring-grafana-69df66f668-gg9kl     1/1       Running            3          14d</span><br><span class="line">monitoring-influxdb-78d4c6f5b6-2phht    1/1       Running            3          14d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">另外看一下pod日志，这个帮助很大</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kubectl logs -n kube-system fluentd-es-v2.0.4-lvmj7</span> </span><br><span class="line">2018-06-29 01:21:19 +0000 [warn]: parameter &#x27;time_format&#x27; in &lt;source&gt;</span><br><span class="line">  @id fluentd-containers.log</span><br><span class="line">  @type tail</span><br><span class="line">  path &quot;/var/log/containers/*.log&quot;</span><br><span class="line">  pos_file &quot;/var/log/es-containers.log.pos&quot;</span><br><span class="line">  time_format %Y-%m-%dT%H:%M:%S.%NZ</span><br><span class="line">  tag &quot;raw.kubernetes.*&quot;</span><br><span class="line">  read_from_head true</span><br><span class="line">  &lt;parse&gt;</span><br><span class="line">    @type &quot;multi_format&quot;</span><br><span class="line">    &lt;pattern&gt;</span><br><span class="line">      format json</span><br><span class="line">      time_key &quot;time&quot;</span><br><span class="line">      time_format &quot;%Y-%m-%dT%H:%M:%S.%NZ&quot;</span><br><span class="line">      time_type string</span><br><span class="line">    &lt;/pattern&gt;</span><br><span class="line">    &lt;pattern&gt;</span><br><span class="line">      format /^(?&lt;time&gt;.+) (?&lt;stream&gt;stdout|stderr) [^ ]* (?&lt;log&gt;.*)$/</span><br><span class="line">      time_format &quot;%Y-%m-%dT%H:%M:%S.%N%:z&quot;</span><br><span class="line">      expression &quot;^(?&lt;time&gt;.+) (?&lt;stream&gt;stdout|stderr) [^ ]* (?&lt;log&gt;.*)$&quot;</span><br><span class="line">      ignorecase false</span><br><span class="line">      multiline false</span><br><span class="line">    &lt;/pattern&gt;</span><br><span class="line">  &lt;/parse&gt;</span><br><span class="line">&lt;/source&gt; is not used.  # 下面开始error，而另外正常的pod下面是传输到elastic的info日志了</span><br><span class="line">2018-06-29 01:21:19 +0000 [error]: unexpected error error_class=TypeError error=&quot;no implicit conversion of Symbol into Integer&quot;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/plugin/buffer/file_chunk.rb:219:in `[]&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/plugin/buffer/file_chunk.rb:219:in `restore_metadata&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/plugin/buffer/file_chunk.rb:322:in `load_existing_staged_chunk&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/plugin/buffer/file_chunk.rb:51:in `initialize&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/plugin/buf_file.rb:144:in `new&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/plugin/buf_file.rb:144:in `block in resume&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/plugin/buf_file.rb:133:in `glob&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/plugin/buf_file.rb:133:in `resume&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/plugin/buffer.rb:171:in `start&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/plugin/buf_file.rb:120:in `start&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/plugin/output.rb:415:in `start&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/root_agent.rb:165:in `block in start&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/root_agent.rb:154:in `block (2 levels) in lifecycle&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/root_agent.rb:153:in `each&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/root_agent.rb:153:in `block in lifecycle&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/root_agent.rb:140:in `each&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/root_agent.rb:140:in `lifecycle&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/root_agent.rb:164:in `start&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/engine.rb:274:in `start&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/engine.rb:219:in `run&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/supervisor.rb:774:in `run_engine&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/supervisor.rb:523:in `block in run_worker&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/supervisor.rb:699:in `main_process&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/supervisor.rb:518:in `run_worker&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/lib/fluent/command/fluentd.rb:316:in `&lt;top (required)&gt;&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /var/lib/gems/2.3.0/gems/fluentd-1.1.0/bin/fluentd:8:in `&lt;top (required)&gt;&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /usr/local/bin/fluentd:22:in `load&#x27;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: /usr/local/bin/fluentd:22:in `&lt;main&gt;&#x27;</span><br><span class="line">2018-06-29 01:21:19 +0000 [error]: unexpected error error_class=TypeError error=&quot;no implicit conversion of Symbol into Integer&quot;</span><br><span class="line">  2018-06-29 01:21:19 +0000 [error]: suppressed same stacktrace</span><br></pre></td></tr></table></figure><p>在 google 找到一个 GitHub 的 <a class="link"   href="https://github.com/fluent/fluentd/issues/1760" >fluentd&#x2F;issues&#x2F;#1760<i class="fas fa-external-link-alt"></i></a>，发现和缓存的元数据损坏有关系。不同的是这里 2.0.4 版本 buffer 存放位置变了，映射在宿主机的 <code>/var/log/fluentd-buffers/kubernetes.system.buffer</code> 目录。我将 <code>*.meta</code> 删除后节点的 <code>fluentd</code> 启动正常（可以删除 pod 会自动创建，或者等它重启）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /var/log/fluentd-buffers/kubernetes.system.buffer/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">buffer.b56efd1a03768b2f7eabddf200cf50b79.log       buffer.b56efd1a03ad20d927856cabfb9e0b1d7.log.meta</span><br><span class="line">buffer.b56efd1a03768b2f7eabddf200cf50b79.log.meta  buffer.b56efd1a1f72114c77ad018dec6591873.log</span><br><span class="line">buffer.b56efd1a03ad20d927856cabfb9e0b1d7.log       buffer.b56efd1a1f72114c77ad018dec6591873.log.meta</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">rm</span> -rf *.meta</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="关于监控heapster-influxdb-grafana"><a href="#关于监控heapster-influxdb-grafana" class="headerlink" title="关于监控heapster influxdb grafana"></a>关于监控heapster influxdb grafana</h2><p>官方提供了监控方案<a class="link"   href="https://github.com/kubernetes/heapster" >heapster<i class="fas fa-external-link-alt"></i></a></p><p>获取 YAML 文件在项目的 <a class="link"   href="https://github.com/kubernetes/heapster/tree/master/deploy/kube-config/influxdb" >deploy&#x2F;kube-config&#x2F;influxdb <i class="fas fa-external-link-alt"></i></a>路径下，获取后直接可以创建。镜像请先获取，过滤文件的image字段，拉取这些再创建比较妥。</p><p>启动了这些资源后，若 heapster 日志无异常，dashboard 过一会就有关于容器组 CPU 内存等监控状态。可以修改 grafana 的 service 映射成 NodePort，配置图形展示（admin&#x2F;admin）。</p><h2 id="关于自动水平扩展HPA"><a href="#关于自动水平扩展HPA" class="headerlink" title="关于自动水平扩展HPA"></a>关于自动水平扩展HPA</h2><p>参考官方 <a class="link"   href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/" >https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;k8s测试环境问题记录&quot;&gt;&lt;a href=&quot;#k8s测试环境问题记录&quot; class=&quot;headerlink&quot; title=&quot;k8s测试环境问题记录&quot;&gt;&lt;/a&gt;k8s测试环境问题记录&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在公司准备测试环境，记录一些过程中碰到的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;dashboard认证&quot;&gt;&lt;a href=&quot;#dashboard认证&quot; class=&quot;headerlink&quot; title=&quot;dashboard认证&quot;&gt;&lt;/a&gt;dashboard认证&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;dashboard 大概就发现一个比较明显的好处，用来执行容器命令比较方便 : )&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装 dashboard 先去 github获取 &lt;a class=&quot;link&quot;   href=&quot;https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml&quot; &gt;kubernetes-dashboard.yaml&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后 Service 部分添加 NodePort 映射。&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://blog.an00.cn/categories/kubernetes/"/>
    
    
  </entry>
  
  <entry>
    <title>sysbench 压测工具</title>
    <link href="https://blog.an00.cn/2018/05/17/sysbench-%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7/"/>
    <id>https://blog.an00.cn/2018/05/17/sysbench-%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7/</id>
    <published>2018-05-17T11:12:32.000Z</published>
    <updated>2023-10-29T07:05:46.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sysbench"><a href="#sysbench" class="headerlink" title="sysbench"></a>sysbench</h2><blockquote><p>1.x版本和0.x操作选项有区别，注意看help</p></blockquote><p>sysbench 是一个比较通用的压测工具，可以用来做一些基准测试，看 <code>help</code> 中有说明提供了如下测试选项，另外在源码中提供了数据库 OLTP 场景的测试脚本，调整参数配置后，通过反复基准测试验证调优效果。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fileio  - File I/O test</span><br><span class="line">cpu - CPU performance test</span><br><span class="line">memory  - Memory functions speed test</span><br><span class="line">threads - Threads subsystem performance test</span><br><span class="line">mutex   - Mutex performance test</span><br><span class="line"></span><br><span class="line">OLTP    - 通过脚本可以测试OLTP场景下数据库的能力，脚本在源码`src/lua`目录</span><br></pre></td></tr></table></figure><p>这里简单记录下 <code>fileio</code> 和 <code>MySQL OLTP</code> 的测试</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install -y autoconf automake libtool \</span><br><span class="line">    perl-ExtUtils-Embed perl-devel</span><br><span class="line">git clone https://github.com/akopytov/sysbench</span><br><span class="line">cd sysbench</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make -j 4 &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="测试文件IO"><a href="#测试文件IO" class="headerlink" title="测试文件IO"></a>测试文件IO</h3><ol><li>sysbench-1.1 的 IO 测试示例 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成数据文件</span></span><br><span class="line">sysbench fileio --file-num=4  \</span><br><span class="line">    --file-block-size=16384 \</span><br><span class="line">    --file-total-size=20G \</span><br><span class="line">    prepare</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">三秒输出一次状态</span></span><br><span class="line">sysbench fileio --file-num=4  \</span><br><span class="line">    --file-block-size=16384 \</span><br><span class="line">    --file-total-size=20G \</span><br><span class="line">    --file-test-mode=rndrd \</span><br><span class="line">    --file-extra-flags=direct \</span><br><span class="line">    --max-requests=0 \</span><br><span class="line">    --max-time=1200 --num-threads=16 \</span><br><span class="line">    --report-interval=3  \</span><br><span class="line">    run</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新版本</span></span><br><span class="line">sysbench fileio --file-num=4  --file-block-size=16384 --file-total-size=8G --file-test-mode=rndrd --file-extra-flags=direct --time=1200 --threads=16  --report-interval=1   run | tee -a sysbench.out</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清除测试文件</span></span><br><span class="line">sysbench fileio --file-num=4  \</span><br><span class="line">    --file-block-size=16384 \</span><br><span class="line">    --file-total-size=20G \</span><br><span class="line">    cleanup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">简单测试</span></span><br><span class="line">mkdir fileio_bench</span><br><span class="line">cd fileio_bench</span><br><span class="line">sysbench fileio --file-num=1 --file-block-size=4096 --file-total-size=2G prepare</span><br><span class="line">sysbench fileio --file-num=1 --file-block-size=4096 --file-total-size=2G --file-test-mode=rndrd --file-extra-flags=direct --time=10 --threads=1  --report-interval=1 run | tee -a sysbench.out </span><br><span class="line">sysbench fileio --file-num=1  --file-block-size=4096 --file-total-size=2G cleanup</span><br></pre></td></tr></table></figure></li></ol><h3 id="测试MySQL"><a href="#测试MySQL" class="headerlink" title="测试MySQL"></a>测试MySQL</h3><ol><li><p>生成数据文件，指定表的大小和数量，时间和线程数</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /root/chen/sysbench</span><br><span class="line">sysbench src/lua/oltp_read_only.lua \</span><br><span class="line">    --mysql-host=172.16.88.185 --mysql-port=3306 \</span><br><span class="line">    --mysql-user=root --mysql-password=111111 \</span><br><span class="line">    --mysql-db=sysbench --tables=10 \</span><br><span class="line">    --table-size=10000000 --max-requests=0 \</span><br><span class="line">    --report-interval=10 --time=120 --threads=12 \</span><br><span class="line">    prepare</span><br></pre></td></tr></table></figure></li><li><p>压测run</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sysbench src/lua/oltp_read_only.lua \</span><br><span class="line">    --mysql-host=172.16.88.185 --mysql-port=3306 \</span><br><span class="line">    --mysql-user=root --mysql-password=111111 \</span><br><span class="line">    --mysql-db=sysbench --tables=10 \</span><br><span class="line">    --table-size=10000000 --max-requests=0 \</span><br><span class="line">    --report-interval=10 --time=3600 --threads=12 \</span><br><span class="line">    run</span><br></pre></td></tr></table></figure></li><li><p>执行 cleanup 清除压测表</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;sysbench&quot;&gt;&lt;a href=&quot;#sysbench&quot; class=&quot;headerlink&quot; title=&quot;sysbench&quot;&gt;&lt;/a&gt;sysbench&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;1.x版本和0.x操作选项有区别，注意看help&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;sysbench 是一个比较通用的压测工具，可以用来做一些基准测试，看 &lt;code&gt;help&lt;/code&gt; 中有说明提供了如下测试选项，另外在源码中提供了数据库 OLTP 场景的测试脚本，调整参数配置后，通过反复基准测试验证调优效果。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.an00.cn/categories/Linux/"/>
    
    
    <category term="sysbench" scheme="https://blog.an00.cn/tags/sysbench/"/>
    
  </entry>
  
  <entry>
    <title>SSH 隧道</title>
    <link href="https://blog.an00.cn/2018/04/27/SSH%E9%9A%A7%E9%81%93/"/>
    <id>https://blog.an00.cn/2018/04/27/SSH%E9%9A%A7%E9%81%93/</id>
    <published>2018-04-27T03:34:12.000Z</published>
    <updated>2023-10-29T07:05:38.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH-隧道"><a href="#SSH-隧道" class="headerlink" title="SSH 隧道"></a>SSH 隧道</h1><ol><li>对端ip的端口映射到本机；</li><li>本机的端口映射到对端，这时通常做内网穿透。</li></ol><span id="more"></span><h2 id="SSH命令行"><a href="#SSH命令行" class="headerlink" title="SSH命令行"></a>SSH命令行</h2><blockquote><p><strong>重要</strong>：netstat 查看端口，若最外层主机只监听 127.0.0.1 则修改 sshd_config ，<strong>打开 <code>GatewayPorts yes</code></strong></p></blockquote><ol><li><p>远程转发：本机监听的端口映射到对端机器</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ssh -R remote_port:local_ip:port [remote]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将本地服务监听的8080映射到125服务器的8080，125可以是一个云服务器的外网ip</span></span><br><span class="line">ssh -CfNg -p 22 -R 8080:localhost:8080 root@172.16.88.125</span><br><span class="line">ssh -CfNg -p 22 -R 0.0.0.0:8080:localhost:8080 root@172.16.88.125</span><br></pre></td></tr></table></figure></li><li><p>本地转发：将远程的服务映射到本机端口访问</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程服务器监听的端口映射到本机的某个端口</span></span><br><span class="line">ssh -CfNg -p 22 -L 80:localhost:80 root@172.16.88.125</span><br></pre></td></tr></table></figure></li><li><p>常用参数</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-N      不执行远程命令. 用于转发端口. </span><br><span class="line">-n      把 stdin 重定向到 /dev/null (实际上防止从 stdin 读取数据).  ssh在后台运行时一定会用到这个选项. 它的常用技巧是远程运行 X11 程序. </span><br><span class="line">-f      要求 ssh 在执行命令前退至后台. </span><br><span class="line">        它用于当 ssh 准备询问口令或密语,但是用户希望它在后台进行. </span><br><span class="line">        该选项隐含了-n 选项. </span><br><span class="line">        在远端机器上启动X11程序的推荐手法就是类似于 ssh -f host xterm 的命令. </span><br><span class="line">-C      要求进行数据压缩 </span><br><span class="line">-g      允许远端主机连接本地转发的端口</span><br><span class="line"></span><br><span class="line">-R      Remote 映射本地主机服务监听的端口到远程</span><br><span class="line">-L      Local 映射远程主机服务监听端口到本地</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SSH-隧道&quot;&gt;&lt;a href=&quot;#SSH-隧道&quot; class=&quot;headerlink&quot; title=&quot;SSH 隧道&quot;&gt;&lt;/a&gt;SSH 隧道&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;对端ip的端口映射到本机；&lt;/li&gt;
&lt;li&gt;本机的端口映射到对端，这时通常做内网穿透。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.an00.cn/categories/Linux/"/>
    
    
    <category term="ssh" scheme="https://blog.an00.cn/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>zabbix-server 和 zabbix-proxy</title>
    <link href="https://blog.an00.cn/2018/04/17/zabbix-server%E5%92%8Czabbix-proxy/"/>
    <id>https://blog.an00.cn/2018/04/17/zabbix-server%E5%92%8Czabbix-proxy/</id>
    <published>2018-04-17T07:05:33.000Z</published>
    <updated>2023-10-29T07:05:58.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zabbix多机房监控"><a href="#zabbix多机房监控" class="headerlink" title="zabbix多机房监控"></a>zabbix多机房监控</h2><ol><li><strong>zabbix server</strong>和<strong>zabbix proxy</strong>连接模式如下图  </li><li>一个<strong>zabbix server</strong>可以添加多个<strong>zabbix proxy</strong>，每个网络暴露一个<strong>proxy</strong>即可通过该<strong>proxy</strong>监控到具体网络内部的<strong>agent</strong>节点。  </li><li>关于<strong>proxy</strong>主动模式和被动模式的选择  <ul><li>主动模式：<strong>proxy</strong>可以通过ip的方式直接找到<strong>server</strong>，可以选择主动模式，比如<strong>server</strong>有外网<code>ip</code>并且暴露出端口。  </li><li>被动模式：正好相反，<strong>server</strong>的网络可以找到<strong>proxy</strong>（机群多可能导致<strong>server</strong>压力较大未测试）。</li></ul></li></ol><span id="more"></span><p><img                       lazyload                     alt="image"                     data-src="https://i.imgur.com/YewWsZW.jpg"                      alt="zabbix和proxy"                ></p><h2 id="示例环境"><a href="#示例环境" class="headerlink" title="示例环境"></a>示例环境</h2><blockquote><p><strong>server</strong>和<strong>proxy</strong>系统环境为centos6，<strong>agent</strong>机器为centos7  </p></blockquote><p><code>172.16.88.0/24</code> 模拟公网，其中124为kvm宿主机，内部网段<code>192.168.122.0/24</code>模拟内网，agent节点均在其中。<br><img                       lazyload                     alt="image"                     data-src="https://i.imgur.com/48RExwC.jpg"                      alt="网络地址分配"                ></p><h2 id="安装zabbix-server"><a href="#安装zabbix-server" class="headerlink" title="安装zabbix server"></a>安装zabbix server</h2><blockquote><ul><li>zabbix-server在172.16.88.185机器（需要mysql数据库，本文使用已有实例）  </li><li>下面选择自带httpd跑web管理页面   </li><li>准备remi源，因为需要php支持</li></ul></blockquote><h3 id="获取zabbix源码"><a href="#获取zabbix源码" class="headerlink" title="获取zabbix源码"></a>获取zabbix源码</h3><p>先去<a class="link"   href="https://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Stable/3.4.7/zabbix-3.4.7.tar.gz/download" >官网<i class="fas fa-external-link-alt"></i></a>下载<code>zabbix-3.4.7.tar.gz</code>源码，是sourceforge的链接。  </p><h3 id="remi源地址"><a href="#remi源地址" class="headerlink" title="remi源地址"></a>remi源地址</h3><p><code>remi</code>源清华大学镜像站下载地址  </p><ul><li><a class="link"   href="https://mirrors.tuna.tsinghua.edu.cn/remi/enterprise/remi-release-7.rpm" >centos7<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://mirrors.tuna.tsinghua.edu.cn/remi/enterprise/remi-release-6.rpm" >centos6<i class="fas fa-external-link-alt"></i></a></li></ul><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 获取remi源</span><br><span class="line">yum install https://mirrors.tuna.tsinghua.edu.cn/remi/enterprise/remi-release-6.rpm</span><br><span class="line"></span><br><span class="line"># 安装mysql-server，这里我已经有mysql服务</span><br><span class="line">yum install httpd libevent-devel \</span><br><span class="line">            libjpeg* libmcrypt openssl-devel \</span><br><span class="line">            pcre-devel net-snmp net-snmp-devel \</span><br><span class="line">            gcc glibc mysql-devel libxml2 \</span><br><span class="line">            libxml2-devel libcurl-devel</span><br><span class="line">            </span><br><span class="line">yum install --enablerepo=remi --enablerepo=remi-php56 \</span><br><span class="line">            php php-opcache php-devel php-mbstring \</span><br><span class="line">            php-mcrypt php-mysqlnd php-phpunit-PHPUnit \</span><br><span class="line">            php-pecl-xdebug php-pecl-xhprof \</span><br><span class="line">            php-gd php-bcmath</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置php环境"><a href="#配置php环境" class="headerlink" title="配置php环境"></a>配置php环境</h3><p>修改<code>/etc/php.ini</code>中如下配置项  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">max_execution_time = 300</span><br><span class="line">max_input_time = 300</span><br><span class="line">memory_limit = 128M</span><br><span class="line">post_max_size = 16M</span><br><span class="line">upload_max_filesize = 2M</span><br><span class="line">date.timezone = Asia/Shanghai</span><br><span class="line">always_populate_raw_post_data = -1</span><br></pre></td></tr></table></figure><h3 id="初始化Server数据库"><a href="#初始化Server数据库" class="headerlink" title="初始化Server数据库"></a>初始化Server数据库</h3><p>创建zabbix-server连接的数据库，执行SQL  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database zabbix default character set &#x27;utf8&#x27;;</span><br><span class="line">grant all on zabbix.* to zabbix@&#x27;%&#x27; identified by &#x27;111111&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>导入数据库表，注意顺序  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar xf zabbix-3.4.7.tar.gz -C /usr/src</span><br><span class="line">cd /usr/src/zabbix-3.4.7/</span><br><span class="line">mysql zabbix -uzabbix -p111111 -h172.16.88.185 &lt; database/mysql/schema.sql</span><br><span class="line">mysql zabbix -uzabbix -p111111 -h172.16.88.185 &lt; database/mysql/images.sql</span><br><span class="line">mysql zabbix -uzabbix -p111111 -h172.16.88.185 &lt; database/mysql/data.sql</span><br></pre></td></tr></table></figure><h3 id="编译安装zabbix-server"><a href="#编译安装zabbix-server" class="headerlink" title="编译安装zabbix-server"></a>编译安装zabbix-server</h3><p>在源码目录编译zabbix-server，<code>-j</code>可以不用，若报错再具体分析，一般为缺包  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/zabbix-server  --enable-server --with-mysql \</span><br><span class="line">            --with-net-snmp --with-libcurl --with-libxml2 --enable-agent --with-openssl</span><br><span class="line">make install -j4</span><br></pre></td></tr></table></figure><p>在源码目录copy启动脚本，创建连接，启动脚本有调用  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp -a misc/init.d/fedora/core/zabbix_agentd /etc/init.d/</span><br><span class="line">cp -a misc/init.d/fedora/core/zabbix_server /etc/init.d/</span><br><span class="line">ln -sv /usr/local/zabbix-server/sbin/* /usr/local/sbin/</span><br><span class="line">ln -sv /usr/local/zabbix-server/bin/* /usr/local/bin/</span><br></pre></td></tr></table></figure><p>修改zabbix配置文件，如下改动  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grep -Ev &quot;^$|^#&quot; /usr/local/zabbix-server/etc/zabbix_server.conf</span></span><br><span class="line"><span class="attr">LogFile</span>=/tmp/zabbix_server.log</span><br><span class="line"><span class="attr">DBHost</span>=<span class="number">172.16</span>.<span class="number">88.185</span></span><br><span class="line"><span class="attr">DBName</span>=zabbix</span><br><span class="line"><span class="attr">DBUser</span>=zabbix</span><br><span class="line"><span class="attr">DBPassword</span>=<span class="number">111111</span></span><br><span class="line"><span class="attr">DBPort</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">Timeout</span>=<span class="number">4</span></span><br><span class="line"><span class="attr">LogSlowQueries</span>=<span class="number">3000</span></span><br></pre></td></tr></table></figure><h3 id="web管理端配置，启动服务"><a href="#web管理端配置，启动服务" class="headerlink" title="web管理端配置，启动服务"></a>web管理端配置，启动服务</h3><p>这里使用httpd，在源码目录复制web页面到httpd的站点下  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -a frontends/php /var/www/html/zabbix</span><br><span class="line">chown -R apache:apache /var/www/html/zabbix/</span><br></pre></td></tr></table></figure><p>重启服务，打开浏览器登陆，如本示例中的<code>http://172.16.88.185/zabbix</code>，默认用户认证为<strong>admin&#x2F;zabbix</strong>，打开页面后按提示操作。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/httpd restart</span><br><span class="line">/etc/init.d/zabbix_server restart</span><br><span class="line">/etc/init.d/zabbix_agentd restart</span><br></pre></td></tr></table></figure><h2 id="安装zabbix-proxy"><a href="#安装zabbix-proxy" class="headerlink" title="安装zabbix proxy"></a>安装zabbix proxy</h2><blockquote><ul><li>zabbix proxy机器为172.16.88.124（192.168.122.1也是它）   </li><li>zabbix proxy也需要数据库支持，只需要导入上面三个SQL中的<code>schema.sql</code>，注意别使用zabbix-server的库，这里使用192.168.122.66的一个数据库实例   </li><li>源码版本最好和zabbix-server一致，以防数据库字段更改造成意外。</li></ul></blockquote><h3 id="源码和依赖"><a href="#源码和依赖" class="headerlink" title="源码和依赖"></a>源码和依赖</h3><p>还是去<a class="link"   href="https://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Stable/3.4.7/zabbix-3.4.7.tar.gz/download" >官网<i class="fas fa-external-link-alt"></i></a>下载源码，或者cp上面的。  </p><p>安装依赖  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install libssh2-devel pcre-devel openssl-devel openssl libcurl-devel \</span><br><span class="line">            net-snmp-devel net-snmp gcc glibc mysql-devel</span><br></pre></td></tr></table></figure><h3 id="初始化proxy数据库"><a href="#初始化proxy数据库" class="headerlink" title="初始化proxy数据库"></a>初始化proxy数据库</h3><p>创建用户初始数据表（我这里库在192.168.122.66机器，<code>proxy</code>可以连接到）  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SQL</span></span><br><span class="line">create database zabbix_proxy default character set &#x27;utf8&#x27;;</span><br><span class="line">grant all on zabbix.* to zabbix@&#x27;%&#x27; identified by &#x27;111111&#x27;;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shell</span></span><br><span class="line">tar xf zabbix-3.4.7.tar.gz -C /usr/src/</span><br><span class="line">cd /usr/src/zabbix-3.4.7/</span><br><span class="line">mysql zabbix_proxy -uzabbix -p111111 -h192.168.122.66 &lt; database/mysql/schema.sql</span><br></pre></td></tr></table></figure><h3 id="编译安装proxy"><a href="#编译安装proxy" class="headerlink" title="编译安装proxy"></a>编译安装proxy</h3><p>编译<code>proxy</code>，并且指定开启<code>agent</code>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/zabbix-proxy --enable-proxy --enable-agent \</span><br><span class="line">            --with-net-snmp --with-mysql --with-ssh2 --with-openssl</span><br><span class="line">make install -j4</span><br></pre></td></tr></table></figure><p>修改<code>proxy</code>配置文件，使用<code>PSK</code>加密请注意后四个字段  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主动模式</span></span><br><span class="line"><span class="attr">ProxyMode</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定zabbix-server</span></span><br><span class="line"><span class="attr">Server</span>=<span class="number">172.16</span>.<span class="number">88.185</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此proxy在server段的名称，需要相同</span></span><br><span class="line"><span class="attr">Hostname</span>=zabbix proxy</span><br><span class="line"><span class="attr">LogFile</span>=/tmp/zabbix_proxy.log</span><br><span class="line"><span class="attr">PidFile</span>=/tmp/zabbix_proxy.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line"><span class="attr">DBHost</span>=<span class="number">192.168</span>.<span class="number">122.66</span></span><br><span class="line"><span class="attr">DBName</span>=zabbix_proxy</span><br><span class="line"><span class="attr">DBUser</span>=zabbix</span><br><span class="line"><span class="attr">DBPassword</span>=<span class="number">111111</span></span><br><span class="line"><span class="attr">DBPort</span>=<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置同步时间，别太长</span></span><br><span class="line"><span class="attr">ConfigFrequency</span>=<span class="number">300</span></span><br><span class="line"><span class="attr">DataSenderFrequency</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">Timeout</span>=<span class="number">4</span></span><br><span class="line"><span class="attr">LogSlowQueries</span>=<span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用PSK加密</span></span><br><span class="line"><span class="attr">TLSConnect</span>=psk</span><br><span class="line"><span class="attr">TLSAccept</span>=psk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预共享密钥，需要在zabbix-server端同写这串字符(自定义)和PSK文件内容，可以实现加密</span></span><br><span class="line"><span class="attr">TLSPSKIdentity</span>=PSK <span class="number">2243</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此文件为&quot;openssl rand -hex 32&quot;命令生成，做PSK加密</span></span><br><span class="line"><span class="attr">TLSPSKFile</span>=/usr/local/zabbix-proxy/etc/auth.psk    </span><br></pre></td></tr></table></figure><p><code>proxy</code>机器的<code>agent</code>配置，指定<code>server</code>为本机，通过<code>proxy</code>添加本机到<code>server</code>管理  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">LogFile</span>=/tmp/zabbix_agentd.log</span><br><span class="line"><span class="attr">Server</span>=<span class="number">192.168</span>.<span class="number">122.1</span></span><br><span class="line"><span class="attr">ServerActive</span>=<span class="number">192.168</span>.<span class="number">122.1</span></span><br><span class="line"><span class="attr">Hostname</span>=<span class="number">192.168</span>.<span class="number">122.1</span></span><br></pre></td></tr></table></figure><h3 id="zabbix-server管理界面中添加proxy"><a href="#zabbix-server管理界面中添加proxy" class="headerlink" title="zabbix-server管理界面中添加proxy"></a>zabbix-server管理界面中添加proxy</h3><p><code>zabbix-server</code>的web页面添加<code>proxy</code>，选择主动式，不指定<code>proxy</code>地址  </p><ul><li>创建代理<br> <img                       lazyload                     alt="image"                     data-src="https://i.imgur.com/fcgfHCf.jpg"                      alt="第一步"                ></li><li>配置proxy信息<br> <img                       lazyload                     alt="image"                     data-src="https://i.imgur.com/MBOO5eY.jpg"                      alt="第二步"                ></li><li>配置proxy连接加密，一定与自己配置文件对应<br> <img                       lazyload                     alt="image"                     data-src="https://i.imgur.com/g6YzbI2.jpg"                      alt="第三步"                ></li><li>保存<br> <img                       lazyload                     alt="image"                     data-src="https://i.imgur.com/SVl75n5.jpg"                      alt="第四步"                ></li></ul><h3 id="启动proxy服务"><a href="#启动proxy服务" class="headerlink" title="启动proxy服务"></a>启动proxy服务</h3><p>启动服务进程，直接执行，使用默认配置文件，或者<code>-c</code>指定配置文件，日志在<code>/tmp</code>目录下  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zabbix-proxy/sbin/zabbix_proxy </span><br><span class="line">/usr/local/zabbix-proxy/sbin/zabbix_agentd</span><br></pre></td></tr></table></figure><p>下面日志表示正常（web页面配置PSK加密看后面，未配置时会报错连接不上<code>zabbix-server</code>）  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">tail</span> -f /tmp/zabbix_proxy.log</span>   </span><br><span class="line">  5372:20180327:104440.758 proxy #23 started [trapper #5]</span><br><span class="line">  5373:20180327:104440.758 proxy #24 started [icmp pinger #1]</span><br><span class="line">  5350:20180327:104440.771 received configuration data from server at &quot;172.16.88.185&quot;, datalen 17649</span><br><span class="line">  5350:20180327:104940.870 received configuration data from server at &quot;172.16.88.185&quot;, datalen 17649</span><br></pre></td></tr></table></figure><p>启动<code>proxy</code>并且连接到<code>zabbix-server</code>后，可以在web管理界面看到最近出现历时是近几秒（主机数先忽略）<br><img                       lazyload                     alt="image"                     data-src="https://i.imgur.com/GxoYi9Y.jpg"                      alt="查看proxy"                ></p><p>到这<code>zabbix-proxy</code>的配置就完成了，此机器的<code>zabbix-agent</code>使用默认配置。  </p><h2 id="zabbix-agent安装"><a href="#zabbix-agent安装" class="headerlink" title="zabbix agent安装"></a>zabbix agent安装</h2><blockquote><p>分布在上图的192.168.122.80和192.168.122.70机器，都安装   </p></blockquote><h3 id="agent源码和依赖"><a href="#agent源码和依赖" class="headerlink" title="agent源码和依赖"></a>agent源码和依赖</h3><p>还是之前那份源码，安装依赖  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install net-snmp-devel net-snmp gcc glibc</span><br></pre></td></tr></table></figure><h3 id="agent安装配置"><a href="#agent安装配置" class="headerlink" title="agent安装配置"></a>agent安装配置</h3><p>编译参数  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar xf zabbix-3.4.7.tar.gz -C /usr/src/</span><br><span class="line">cd /usr/src/</span><br><span class="line">./configure --prefix=/usr/local/zabbix --enable-agent --with-net-snmp</span><br><span class="line">make install -j2</span><br></pre></td></tr></table></figure><p>配置文件，指定内网<code>proxy</code>为<code>Server</code>，指定主机名为自身<code>ip</code>，方便后面自动注册  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grep -Ev &#x27;^$|^#&#x27; /usr/local/zabbix/etc/zabbix_agentd.conf</span></span><br><span class="line"><span class="attr">LogFile</span>=/tmp/zabbix_agentd.log</span><br><span class="line"><span class="attr">Server</span>=<span class="number">192.168</span>.<span class="number">122.1</span></span><br><span class="line"><span class="attr">ServerActive</span>=<span class="number">192.168</span>.<span class="number">122.1</span></span><br><span class="line"><span class="attr">Hostname</span>=<span class="number">192.168</span>.<span class="number">122.80</span></span><br></pre></td></tr></table></figure><p>启动服务，使用默认配置文件  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zabbix/sbin/zabbix_agentd</span><br></pre></td></tr></table></figure><h3 id="配置agent自动注册"><a href="#配置agent自动注册" class="headerlink" title="配置agent自动注册"></a>配置agent自动注册</h3><blockquote><p>前往<code>zabbix-server</code>的管理界面配置<code>zabbix-agent</code>自动注册    </p></blockquote><p>在<code>zabbix</code>中还有一直方式是自动发现，不过速度比较慢，尝试之后自动注册比较方便。由每个<code>agent</code>自身主动通过<code>zabbix-proxy</code>向<code>zabbix-server</code>注册。自动注册可以配置动作，将机器加入某个组群和添加监控模板。  </p><ul><li>添加主机群组，用于容纳不同<code>porxy</code>下的<code>agent</code><br><img                       lazyload                     alt="image"                     data-src="https://i.imgur.com/WxO4tFz.jpg"                      alt="添加主机群组"                ></li><li>创建自动注册动作<br><img                       lazyload                     alt="image"                     data-src="https://i.imgur.com/cTtBPHI.jpg"                      alt="创建自动注册动作"                ></li><li>为自动注册动作指定<code>proxy</code>，，勾选启用<br><img                       lazyload                     alt="image"                     data-src="https://i.imgur.com/ZSD4K3j.jpg"                      alt="指定proxy"                ></li><li>打开操作选项卡，配置对该自动注册的机器进行的操作，我们将它加入到刚刚新增的主机群组，并加入<code>Linux</code>操作系统的监控模板<br><img                       lazyload                     alt="image"                     data-src="https://i.imgur.com/P05f5WR.jpg"                      alt="添加到监控组群"                ></li><li>添加监控模板<br><img                       lazyload                     alt="image"                     data-src="https://i.imgur.com/XYdSsUr.jpg"                      alt="添加监控模板"                ></li></ul><p>接下来，就等<code>agent</code>们注册了，每个<code>agent</code>使用自身ip，去管理界面的主机中查看<br>可能需要等待一段时间，但比较快，zabbix可用性是会比较慢，当zabbix可用性绿了之后就可以监控到模板的值了。<br>   <img                       lazyload                     alt="image"                     data-src="https://i.imgur.com/aDMP8Go.jpg"                      alt="注册主机"                ></p><p>监控主机已经添加到了<code>zabbix-server</code>，若有多个网络区域可以每个网络区域之间通过一个<code>zabbix-proxy</code>与<code>zabbix-server</code>连接。  </p><h2 id="附批量安装的ansible-playbook"><a href="#附批量安装的ansible-playbook" class="headerlink" title="附批量安装的ansible-playbook"></a>附批量安装的ansible-playbook</h2><blockquote><p>因为安装并不复杂，配置也变动不大，所以套了ansible和jinja2模板，多机器安装比较方便。  </p></blockquote><h3 id="ansible中主机定义和分组配置如下"><a href="#ansible中主机定义和分组配置如下" class="headerlink" title="ansible中主机定义和分组配置如下"></a>ansible中主机定义和分组配置如下</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/ansible/ansible.cfg    # 这里使用公钥连接，也可以在hosts配置对应密码，搭建完删掉 </span></span><br><span class="line"><span class="section">[defaults]</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">private_key_file</span> = /root/.ssh/id_rsa</span><br><span class="line"><span class="attr">host_key_checking</span> = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cat /etc/ansible/hosts </span></span><br><span class="line"><span class="section">[local]</span></span><br><span class="line">192.168.122.1</span><br><span class="line"></span><br><span class="line"><span class="section">[agents]</span></span><br><span class="line">192.168.122.66</span><br><span class="line">192.168.122.70</span><br><span class="line">192.168.122.80</span><br></pre></td></tr></table></figure><h3 id="获取zabbix安装包"><a href="#获取zabbix安装包" class="headerlink" title="获取zabbix安装包"></a>获取zabbix安装包</h3><p>存放如下目录结构，包含一些经常用到的脚本和自定义<code>key</code>配置文件    </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tree .</span></span><br><span class="line">.</span><br><span class="line">├── files</span><br><span class="line">│   ├── script.tar.gz                 # 整理的配置脚本</span><br><span class="line">│   ├── zabbix-3.4.7.tar.gz</span><br><span class="line">│   ├── zabbix_agentd.conf</span><br><span class="line">│   ├── zabbix_agentd.userparams.conf # 和脚本对应的zabbix自定义key配置</span><br><span class="line">│   └── zabbix_proxy.conf</span><br><span class="line">├── install_zabbix_agent.yml          # agent playbook</span><br><span class="line">└── install_zabbix_proxy.yml          # proxy playbook，启用并包含agent</span><br><span class="line"></span><br><span class="line">1 directory, 7 files</span><br></pre></td></tr></table></figure><h3 id="install-zabbix-proxy-yml"><a href="#install-zabbix-proxy-yml" class="headerlink" title="install_zabbix_proxy.yml"></a><strong>install_zabbix_proxy.yml</strong></h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">local</span></span><br><span class="line">   <span class="attr">vars:</span> </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">zabbix_server_address:</span> <span class="number">172.16</span><span class="number">.88</span><span class="number">.185</span>  <span class="comment"># zabbix server地址 </span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">zabbix_proxy_address:</span> <span class="number">192.168</span><span class="number">.122</span><span class="number">.1</span>   <span class="comment"># 当前主机成为proxy, 使用自身ip</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">proxy_name:</span> <span class="string">&quot;zabbix proxy&quot;</span>            <span class="comment"># server页面配置的名称，各区域之间的proxy应不通</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">package:</span> <span class="string">zabbix-3.4.7</span>                 <span class="comment"># 源码包</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">basedir:</span> <span class="string">/usr/local/zabbix-proxy</span>      <span class="comment"># proxy编译地址，包含agent</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">db_host:</span> <span class="number">192.168</span><span class="number">.122</span><span class="number">.66</span>               <span class="comment"># 数据库连接信息</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">db_port:</span> <span class="number">3306</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">db_name:</span> <span class="string">zabbbix_proxy</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">db_user:</span> <span class="string">zabbix</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">db_passwd:</span> <span class="number">111111</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">current_dir:</span> <span class="string">/root/ansible/zabbix</span>     <span class="comment"># 当前目录请修改，最后别斜杠</span></span><br><span class="line">   </span><br><span class="line">   <span class="attr">tasks:</span> </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">添加zabbix用户</span></span><br><span class="line">       <span class="attr">user:</span> <span class="string">name=zabbix</span> <span class="string">state=present</span> <span class="string">shell=/bin/false</span> <span class="string">group=zabbix</span> <span class="string">system=yes</span> <span class="string">createhome=no</span></span><br><span class="line"></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">解软件压源码</span></span><br><span class="line">       <span class="attr">unarchive:</span> <span class="string">src=&#123;&#123;</span> <span class="string">current_dir</span> <span class="string">&#125;&#125;/files/&#123;&#123;</span> <span class="string">package</span> <span class="string">&#125;&#125;.tar.gz</span> <span class="string">dest=/usr/src/</span> <span class="string">copy=no</span></span><br><span class="line"></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖软件</span></span><br><span class="line">       <span class="attr">yum:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> <span class="string">state=installed</span></span><br><span class="line">       <span class="attr">with_items:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">libssh2-devel</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">pcre-devel</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">openssl-devel</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">openssl</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">libcurl-devel</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">net-snmp-devel</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">net-snmp</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">gcc</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">glibc</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">mysql-devel</span></span><br><span class="line"></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">编译zabbix</span> <span class="string">proxy，时间稍长请等待...</span></span><br><span class="line">       <span class="attr">shell:</span> <span class="string">./configure</span> <span class="string">--prefix=&#123;&#123;</span> <span class="string">basedir&#125;&#125;</span> <span class="string">--enable-proxy</span> <span class="string">--enable-agent</span> <span class="string">--with-net-snmp</span> <span class="string">--with-mysql</span> <span class="string">--with-ssh2</span> <span class="string">--with-openssl</span> <span class="string">&amp;&amp;</span> <span class="string">make</span> <span class="string">install</span> <span class="string">chdir=/usr/src/&#123;&#123;</span> <span class="string">package</span> <span class="string">&#125;&#125;</span></span><br><span class="line">     </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">zabbix</span> <span class="string">proxy配置文件</span></span><br><span class="line">       <span class="attr">template:</span> <span class="string">src=&#123;&#123;</span> <span class="string">current_dir</span> <span class="string">&#125;&#125;/files/zabbix_proxy.conf</span> <span class="string">dest=&#123;&#123;</span> <span class="string">basedir</span> <span class="string">&#125;&#125;/etc/zabbix_proxy.conf</span></span><br><span class="line"></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">zabbix</span> <span class="string">proxy和服务器的PSK认证文件</span></span><br><span class="line">       <span class="attr">copy:</span> <span class="string">src=&#123;&#123;</span> <span class="string">current_dir</span> <span class="string">&#125;&#125;/files/auth.psk</span> <span class="string">dest=&#123;&#123;</span> <span class="string">basedir</span> <span class="string">&#125;&#125;/etc/auth.psk</span></span><br><span class="line"></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">zabbix</span> <span class="string">agent配置文件</span></span><br><span class="line">       <span class="attr">template:</span> <span class="string">src=&#123;&#123;</span> <span class="string">current_dir</span> <span class="string">&#125;&#125;/files/zabbix_agentd.conf</span>  <span class="string">dest=&#123;&#123;</span> <span class="string">basedir</span> <span class="string">&#125;&#125;/etc/zabbix_agentd.conf</span></span><br><span class="line">     </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">zabbix</span> <span class="string">agent自定义key配置文件</span></span><br><span class="line">       <span class="attr">template:</span> <span class="string">src=&#123;&#123;</span> <span class="string">current_dir</span> <span class="string">&#125;&#125;/files/zabbix_agentd.userparams.conf</span>  <span class="string">dest=&#123;&#123;</span> <span class="string">basedir</span> <span class="string">&#125;&#125;/etc/zabbix_agentd.userparams.conf</span></span><br><span class="line"></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">解压自定义脚本</span></span><br><span class="line">       <span class="attr">unarchive:</span> <span class="string">src=&#123;&#123;</span> <span class="string">current_dir</span> <span class="string">&#125;&#125;/files/script.tar.gz</span> <span class="string">dest=&#123;&#123;</span> <span class="string">basedir</span> <span class="string">&#125;&#125;/etc</span> <span class="string">copy=no</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="install-zabbix-agent-yml"><a href="#install-zabbix-agent-yml" class="headerlink" title="install_zabbix_agent.yml"></a><strong>install_zabbix_agent.yml</strong></h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">agents</span></span><br><span class="line">   <span class="attr">vars:</span> </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">zabbix_proxy_address:</span> <span class="number">192.168</span><span class="number">.122</span><span class="number">.1</span>   <span class="comment"># 当前局域网的proxy服务ip地址</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">package:</span> <span class="string">zabbix-3.4.7</span>                 <span class="comment"># 源码包去除&quot;.tar.gz&quot;的名称</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">basedir:</span> <span class="string">/usr/local/zabbix-x</span>          <span class="comment"># 编译安装地址</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">current_dir:</span> <span class="string">/root/ansible/zabbix</span>     <span class="comment"># 请修改当前目录，下面需要绝对路径</span></span><br><span class="line">   </span><br><span class="line">   <span class="attr">tasks:</span> </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">添加zabbix用户</span></span><br><span class="line">       <span class="attr">user:</span> <span class="string">name=zabbix</span> <span class="string">state=present</span> <span class="string">shell=/bin/false</span> <span class="string">group=zabbix</span> <span class="string">system=yes</span> <span class="string">createhome=no</span></span><br><span class="line"></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">解软件压源码</span></span><br><span class="line">       <span class="attr">unarchive:</span> <span class="string">src=&#123;&#123;</span> <span class="string">current_dir</span> <span class="string">&#125;&#125;/files/&#123;&#123;</span> <span class="string">package</span> <span class="string">&#125;&#125;.tar.gz</span> <span class="string">dest=/usr/src/</span> <span class="string">copy=no</span></span><br><span class="line"></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖软件</span></span><br><span class="line">       <span class="attr">yum:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> <span class="string">state=installed</span></span><br><span class="line">       <span class="attr">with_items:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">net-snmp-devel</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">net-snmp</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">gcc</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">glibc</span></span><br><span class="line"></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">编译zabbix</span> <span class="string">agent时间稍长...</span></span><br><span class="line">       <span class="attr">shell:</span> <span class="string">./configure</span> <span class="string">--prefix=&#123;&#123;</span> <span class="string">basedir&#125;&#125;</span> <span class="string">--enable-agent</span> <span class="string">--with-net-snmp</span> <span class="string">&amp;&amp;</span> <span class="string">make</span> <span class="string">install</span> <span class="string">chdir=/usr/src/&#123;&#123;</span> <span class="string">package</span> <span class="string">&#125;&#125;</span></span><br><span class="line">     </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">zabbix</span> <span class="string">agent配置文件</span></span><br><span class="line">       <span class="attr">template:</span> <span class="string">src=&#123;&#123;</span> <span class="string">current_dir</span> <span class="string">&#125;&#125;/files/zabbix_agentd.conf</span>  <span class="string">dest=&#123;&#123;</span> <span class="string">basedir</span> <span class="string">&#125;&#125;/etc/zabbix_agentd.conf</span></span><br><span class="line">     </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">zabbix</span> <span class="string">agent自定义key配置文件</span></span><br><span class="line">       <span class="attr">template:</span> <span class="string">src=&#123;&#123;</span> <span class="string">current_dir</span> <span class="string">&#125;&#125;/files/zabbix_agentd.userparams.conf</span>  <span class="string">dest=&#123;&#123;</span> <span class="string">basedir</span> <span class="string">&#125;&#125;/etc/zabbix_agentd.userparams.conf</span></span><br><span class="line"></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">解压自定义脚本</span></span><br><span class="line">       <span class="attr">unarchive:</span> <span class="string">src=&#123;&#123;</span> <span class="string">current_dir</span> <span class="string">&#125;&#125;/files/script.tar.gz</span> <span class="string">dest=&#123;&#123;</span> <span class="string">basedir</span> <span class="string">&#125;&#125;/etc</span> <span class="string">copy=no</span></span><br></pre></td></tr></table></figure><h3 id="files-zabbix-agentd-conf"><a href="#files-zabbix-agentd-conf" class="headerlink" title="files&#x2F;zabbix_agentd.conf"></a><strong>files&#x2F;zabbix_agentd.conf</strong></h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">LogFile</span>=/tmp/zabbix_agentd.log</span><br><span class="line"><span class="attr">Server</span>=&#123;&#123; zabbix_proxy_address &#125;&#125;</span><br><span class="line"><span class="attr">ServerActive</span>=&#123;&#123; zabbix_proxy_address &#125;&#125;</span><br><span class="line"><span class="attr">Hostname</span>=&#123;&#123; ansible_default_ipv4[<span class="string">&#x27;address&#x27;</span>] &#125;&#125;</span><br><span class="line"><span class="attr">Include</span>=&#123;&#123; datadir &#125;&#125;/etc/zabbix_agentd.userparams.conf</span><br></pre></td></tr></table></figure><h3 id="files-zabbix-proxy-conf"><a href="#files-zabbix-proxy-conf" class="headerlink" title="files&#x2F;zabbix_proxy.conf"></a><strong>files&#x2F;zabbix_proxy.conf</strong></h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ProxyMode</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">Server</span>=&#123;&#123; zabbix_server_address &#125;&#125;</span><br><span class="line"><span class="attr">Hostname</span>=&#123;&#123; proxy_name &#125;&#125;</span><br><span class="line"><span class="attr">LogFile</span>=/tmp/zabbix_proxy.log</span><br><span class="line"><span class="attr">PidFile</span>=/tmp/zabbix_proxy.pid</span><br><span class="line"><span class="attr">DBHost</span>=&#123;&#123; db_host &#125;&#125;</span><br><span class="line"><span class="attr">DBName</span>=&#123;&#123; db_name &#125;&#125;</span><br><span class="line"><span class="attr">DBUser</span>=&#123;&#123; db_user &#125;&#125;</span><br><span class="line"><span class="attr">DBPassword</span>=&#123;&#123; db_passwd &#125;&#125;</span><br><span class="line"><span class="attr">DBPort</span>=&#123;&#123; db_port &#125;&#125;</span><br><span class="line"><span class="attr">ConfigFrequency</span>=<span class="number">300</span></span><br><span class="line"><span class="attr">DataSenderFrequency</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">Timeout</span>=<span class="number">4</span></span><br><span class="line"><span class="attr">LogSlowQueries</span>=<span class="number">3000</span></span><br><span class="line"><span class="attr">TLSConnect</span>=psk</span><br><span class="line"><span class="attr">TLSAccept</span>=psk</span><br><span class="line"><span class="attr">TLSPSKIdentity</span>=PSK <span class="number">2243</span></span><br><span class="line"><span class="attr">TLSPSKFile</span>=&#123;&#123; basedir &#125;&#125;/etc/auth.psk</span><br></pre></td></tr></table></figure><blockquote><p> <code>auth.psk</code>为连接加密文件<code>openssl rand -hex 32</code>生成<br><code>zabbix_agentd.userparams.conf</code>文件是<code>script</code>目录中对应脚本的<code>key</code>，常用脚本。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;zabbix多机房监控&quot;&gt;&lt;a href=&quot;#zabbix多机房监控&quot; class=&quot;headerlink&quot; title=&quot;zabbix多机房监控&quot;&gt;&lt;/a&gt;zabbix多机房监控&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;zabbix server&lt;/strong&gt;和&lt;strong&gt;zabbix proxy&lt;/strong&gt;连接模式如下图  &lt;/li&gt;
&lt;li&gt;一个&lt;strong&gt;zabbix server&lt;/strong&gt;可以添加多个&lt;strong&gt;zabbix proxy&lt;/strong&gt;，每个网络暴露一个&lt;strong&gt;proxy&lt;/strong&gt;即可通过该&lt;strong&gt;proxy&lt;/strong&gt;监控到具体网络内部的&lt;strong&gt;agent&lt;/strong&gt;节点。  &lt;/li&gt;
&lt;li&gt;关于&lt;strong&gt;proxy&lt;/strong&gt;主动模式和被动模式的选择  &lt;ul&gt;
&lt;li&gt;主动模式：&lt;strong&gt;proxy&lt;/strong&gt;可以通过ip的方式直接找到&lt;strong&gt;server&lt;/strong&gt;，可以选择主动模式，比如&lt;strong&gt;server&lt;/strong&gt;有外网&lt;code&gt;ip&lt;/code&gt;并且暴露出端口。  &lt;/li&gt;
&lt;li&gt;被动模式：正好相反，&lt;strong&gt;server&lt;/strong&gt;的网络可以找到&lt;strong&gt;proxy&lt;/strong&gt;（机群多可能导致&lt;strong&gt;server&lt;/strong&gt;压力较大未测试）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://blog.an00.cn/categories/Linux/"/>
    
    
    <category term="zabbix" scheme="https://blog.an00.cn/tags/zabbix/"/>
    
  </entry>
  
</feed>
